define(['dart_sdk', 'packages/charts_common/src/common/math.dart', 'packages/charts_common/src/chart/cartesian/axis/tick.dart', 'packages/charts_common/src/chart/common/chart_context.dart', 'packages/charts_common/src/common/graphics_factory.dart', 'packages/charts_common/src/chart/common/unitconverter/identity_converter.dart', 'packages/charts_common/src/chart/common/unitconverter/unit_converter.dart', 'packages/charts_common/src/chart/cartesian/axis/collision_report.dart', 'packages/charts_common/src/common/text_element.dart', 'packages/charts_common/src/chart/common/canvas_shapes.dart', 'packages/charts_common/src/common/line_style.dart', 'packages/charts_common/src/common/text_style.dart', 'packages/intl/src/intl/number_parser.dart', 'packages/charts_common/src/common/color.dart', 'packages/charts_common/src/common/typed_registry.dart', 'packages/collection/src/equality.dart', 'packages/charts_common/src/chart/layout/layout_config.dart', 'packages/charts_common/src/common/proxy_gesture_listener.dart', 'packages/charts_common/src/common/gesture_listener.dart', 'packages/charts_common/src/common/material_palette.dart', 'packages/charts_common/src/common/palette.dart', 'packages/charts_common/src/chart/cartesian/axis/axis_tick.dart', 'packages/charts_common/src/chart/cartesian/axis/range_tick.dart', 'packages/charts_common/src/chart/cartesian/axis/range_axis_tick.dart'], (function load__packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale_dart(dart_sdk, packages__charts_common__src__common__math$46dart, packages__charts_common__src__chart__cartesian__axis__tick$46dart, packages__charts_common__src__chart__common__chart_context$46dart, packages__charts_common__src__common__graphics_factory$46dart, packages__charts_common__src__chart__common__unitconverter__identity_converter$46dart, packages__charts_common__src__chart__common__unitconverter__unit_converter$46dart, packages__charts_common__src__chart__cartesian__axis__collision_report$46dart, packages__charts_common__src__common__text_element$46dart, packages__charts_common__src__chart__common__canvas_shapes$46dart, packages__charts_common__src__common__line_style$46dart, packages__charts_common__src__common__text_style$46dart, packages__intl__src__intl__number_parser$46dart, packages__charts_common__src__common__color$46dart, packages__charts_common__src__common__typed_registry$46dart, packages__collection__src__equality$46dart, packages__charts_common__src__chart__layout__layout_config$46dart, packages__charts_common__src__common__proxy_gesture_listener$46dart, packages__charts_common__src__common__gesture_listener$46dart, packages__charts_common__src__common__material_palette$46dart, packages__charts_common__src__common__palette$46dart, packages__charts_common__src__chart__cartesian__axis__axis_tick$46dart, packages__charts_common__src__chart__cartesian__axis__range_tick$46dart, packages__charts_common__src__chart__cartesian__axis__range_axis_tick$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const math$ = packages__charts_common__src__common__math$46dart.src__common__math;
  const tick = packages__charts_common__src__chart__cartesian__axis__tick$46dart.src__chart__cartesian__axis__tick;
  const chart_context = packages__charts_common__src__chart__common__chart_context$46dart.src__chart__common__chart_context;
  const graphics_factory = packages__charts_common__src__common__graphics_factory$46dart.src__common__graphics_factory;
  const identity_converter = packages__charts_common__src__chart__common__unitconverter__identity_converter$46dart.src__chart__common__unitconverter__identity_converter;
  const unit_converter = packages__charts_common__src__chart__common__unitconverter__unit_converter$46dart.src__chart__common__unitconverter__unit_converter;
  const collision_report = packages__charts_common__src__chart__cartesian__axis__collision_report$46dart.src__chart__cartesian__axis__collision_report;
  const text_element = packages__charts_common__src__common__text_element$46dart.src__common__text_element;
  const chart_canvas = packages__charts_common__src__chart__common__canvas_shapes$46dart.src__chart__common__chart_canvas;
  const line_style = packages__charts_common__src__common__line_style$46dart.src__common__line_style;
  const text_style = packages__charts_common__src__common__text_style$46dart.src__common__text_style;
  const number_format = packages__intl__src__intl__number_parser$46dart.src__intl__number_format;
  const color = packages__charts_common__src__common__color$46dart.src__common__color;
  const typed_registry = packages__charts_common__src__common__typed_registry$46dart.src__common__typed_registry;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const layout_config = packages__charts_common__src__chart__layout__layout_config$46dart.src__chart__layout__layout_config;
  const proxy_gesture_listener = packages__charts_common__src__common__proxy_gesture_listener$46dart.src__common__proxy_gesture_listener;
  const gesture_listener = packages__charts_common__src__common__gesture_listener$46dart.src__common__gesture_listener;
  const material_palette = packages__charts_common__src__common__material_palette$46dart.src__common__material_palette;
  const palette = packages__charts_common__src__common__palette$46dart.src__common__palette;
  const axis_tick = packages__charts_common__src__chart__cartesian__axis__axis_tick$46dart.src__chart__cartesian__axis__axis_tick;
  const range_tick = packages__charts_common__src__chart__cartesian__axis__range_tick$46dart.src__chart__cartesian__axis__range_tick;
  const range_axis_tick = packages__charts_common__src__chart__cartesian__axis__range_axis_tick$46dart.src__chart__cartesian__axis__range_axis_tick;
  var simple_ordinal_scale = Object.create(dart.library);
  var ordinal_tick_provider = Object.create(dart.library);
  var ordinal_extents = Object.create(dart.library);
  var ordinal_scale_domain_info = Object.create(dart.library);
  var ordinal_scale = Object.create(dart.library);
  var numeric_tick_provider = Object.create(dart.library);
  var linear_scale_viewport = Object.create(dart.library);
  var linear_scale_function = Object.create(dart.library);
  var linear_scale_domain_info = Object.create(dart.library);
  var numeric_scale = Object.create(dart.library);
  var numeric_extents = Object.create(dart.library);
  var linear_scale = Object.create(dart.library);
  var base_tick_draw_strategy = Object.create(dart.library);
  var small_tick_draw_strategy = Object.create(dart.library);
  var tick_provider = Object.create(dart.library);
  var tick_formatter = Object.create(dart.library);
  var series_renderer = Object.create(dart.library);
  var series_datum = Object.create(dart.library);
  var selection_model = Object.create(dart.library);
  var processed_series = Object.create(dart.library);
  var symbol_renderer = Object.create(dart.library);
  var datum_details = Object.create(dart.library);
  var layout_margin_strategy = Object.create(dart.library);
  var layout_manager_impl = Object.create(dart.library);
  var layout_manager = Object.create(dart.library);
  var base_chart = Object.create(dart.library);
  var chart_behavior = Object.create(dart.library);
  var layout_view = Object.create(dart.library);
  var tick_draw_strategy = Object.create(dart.library);
  var style = Object.create(dart.library);
  var material_style = Object.create(dart.library);
  var style_factory = Object.create(dart.library);
  var scale = Object.create(dart.library);
  var axis_spec = Object.create(dart.library);
  var series$ = Object.create(dart.library);
  var axis = Object.create(dart.library);
  var $round = dartx.round;
  var $abs = dartx.abs;
  var $toInt = dartx.toInt;
  var $truncate = dartx.truncate;
  var $ceil = dartx.ceil;
  var $toDouble = dartx.toDouble;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $isEmpty = dartx.isEmpty;
  var $indexOf = dartx.indexOf;
  var $addAll = dartx.addAll;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $first = dartx.first;
  var $last = dartx.last;
  var $clear = dartx.clear;
  var $isNotEmpty = dartx.isNotEmpty;
  var $sort = dartx.sort;
  var $floor = dartx.floor;
  var $floorToDouble = dartx.floorToDouble;
  var $roundToDouble = dartx.roundToDouble;
  var $isFinite = dartx.isFinite;
  var $toString = dartx.toString;
  var $fold = dartx.fold;
  var $bottomLeft = dartx.bottomLeft;
  var $bottomRight = dartx.bottomRight;
  var $topLeft = dartx.topLeft;
  var $topRight = dartx.topRight;
  var $top = dartx.top;
  var $bottom = dartx.bottom;
  var $right = dartx.right;
  var $left = dartx.left;
  var $split = dartx.split;
  var $trim = dartx.trim;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $reduce = dartx.reduce;
  var $forEach = dartx.forEach;
  var $modulo = dartx['%'];
  var $keys = dartx.keys;
  var $containsPoint = dartx.containsPoint;
  var $contains = dartx.contains;
  var $where = dartx.where;
  var $remove = dartx.remove;
  var $width = dartx.width;
  var $height = dartx.height;
  var $compareTo = dartx.compareTo;
  var $skip = dartx.skip;
  var $boundingBox = dartx.boundingBox;
  var $putIfAbsent = dartx.putIfAbsent;
  var $any = dartx.any;
  var $values = dartx.values;
  var $firstWhere = dartx.firstWhere;
  var $removeWhere = dartx.removeWhere;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    numL: () => (T$.numL = dart.constFn(dart.legacy(core.num)))(),
    OrdinalScaleL: () => (T$.OrdinalScaleL = dart.constFn(dart.legacy(ordinal_scale.OrdinalScale)))(),
    TickFormatterL: () => (T$.TickFormatterL = dart.constFn(dart.legacy(tick_formatter.TickFormatter)))(),
    MapOfStringL$StringL: () => (T$.MapOfStringL$StringL = dart.constFn(core.Map$(T$.StringL(), T$.StringL())))(),
    MapLOfStringL$StringL: () => (T$.MapLOfStringL$StringL = dart.constFn(dart.legacy(T$.MapOfStringL$StringL())))(),
    TickHintOfStringL: () => (T$.TickHintOfStringL = dart.constFn(tick_provider.TickHint$(T$.StringL())))(),
    TickHintLOfStringL: () => (T$.TickHintLOfStringL = dart.constFn(dart.legacy(T$.TickHintOfStringL())))(),
    TickFormatterOfStringL: () => (T$.TickFormatterOfStringL = dart.constFn(tick_formatter.TickFormatter$(T$.StringL())))(),
    TickFormatterLOfStringL: () => (T$.TickFormatterLOfStringL = dart.constFn(dart.legacy(T$.TickFormatterOfStringL())))(),
    OrdinalTickProviderL: () => (T$.OrdinalTickProviderL = dart.constFn(dart.legacy(ordinal_tick_provider.OrdinalTickProvider)))(),
    IdentityMapOfStringL$intL: () => (T$.IdentityMapOfStringL$intL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.intL())))(),
    JSArrayOfStringL: () => (T$.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T$.StringL())))(),
    IdentityConverterOfnumL: () => (T$.IdentityConverterOfnumL = dart.constFn(identity_converter.IdentityConverter$(T$.numL())))(),
    ListOfdoubleL: () => (T$.ListOfdoubleL = dart.constFn(core.List$(T$.doubleL())))(),
    NumericScaleL: () => (T$.NumericScaleL = dart.constFn(dart.legacy(numeric_scale.NumericScale)))(),
    TickFormatterOfnumL: () => (T$.TickFormatterOfnumL = dart.constFn(tick_formatter.TickFormatter$(T$.numL())))(),
    TickFormatterLOfnumL: () => (T$.TickFormatterLOfnumL = dart.constFn(dart.legacy(T$.TickFormatterOfnumL())))(),
    MapOfnumL$StringL: () => (T$.MapOfnumL$StringL = dart.constFn(core.Map$(T$.numL(), T$.StringL())))(),
    MapLOfnumL$StringL: () => (T$.MapLOfnumL$StringL = dart.constFn(dart.legacy(T$.MapOfnumL$StringL())))(),
    TickHintOfnumL: () => (T$.TickHintOfnumL = dart.constFn(tick_provider.TickHint$(T$.numL())))(),
    TickHintLOfnumL: () => (T$.TickHintLOfnumL = dart.constFn(dart.legacy(T$.TickHintOfnumL())))(),
    TickOfnumL: () => (T$.TickOfnumL = dart.constFn(tick.Tick$(T$.numL())))(),
    TickLOfnumL: () => (T$.TickLOfnumL = dart.constFn(dart.legacy(T$.TickOfnumL())))(),
    ListOfTickLOfnumL: () => (T$.ListOfTickLOfnumL = dart.constFn(core.List$(T$.TickLOfnumL())))(),
    ListLOfTickLOfnumL: () => (T$.ListLOfTickLOfnumL = dart.constFn(dart.legacy(T$.ListOfTickLOfnumL())))(),
    JSArrayOfdoubleL: () => (T$.JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(T$.doubleL())))(),
    NumericExtentsL: () => (T$.NumericExtentsL = dart.constFn(dart.legacy(numeric_extents.NumericExtents)))(),
    BaseRenderSpecL: () => (T$.BaseRenderSpecL = dart.constFn(dart.legacy(base_tick_draw_strategy.BaseRenderSpec)))(),
    PointOfnumL: () => (T$.PointOfnumL = dart.constFn(math.Point$(T$.numL())))(),
    PointLOfnumL: () => (T$.PointLOfnumL = dart.constFn(dart.legacy(T$.PointOfnumL())))(),
    JSArrayOfPointLOfnumL: () => (T$.JSArrayOfPointLOfnumL = dart.constFn(_interceptors.JSArray$(T$.PointLOfnumL())))(),
    TextElementL: () => (T$.TextElementL = dart.constFn(dart.legacy(text_element.TextElement)))(),
    StringLToTextElementL: () => (T$.StringLToTextElementL = dart.constFn(dart.fnType(T$.TextElementL(), [T$.StringL()])))(),
    TextElementLTodoubleL: () => (T$.TextElementLTodoubleL = dart.constFn(dart.fnType(T$.doubleL(), [T$.TextElementL()])))(),
    TAndTToT: () => (T$.TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    _PixelVerticalDirectionL: () => (T$._PixelVerticalDirectionL = dart.constFn(dart.legacy(base_tick_draw_strategy._PixelVerticalDirection)))(),
    SmallTickRendererSpecL: () => (T$.SmallTickRendererSpecL = dart.constFn(dart.legacy(small_tick_draw_strategy.SmallTickRendererSpec)))(),
    OrdinalTickFormatterL: () => (T$.OrdinalTickFormatterL = dart.constFn(dart.legacy(tick_formatter.OrdinalTickFormatter)))(),
    numLToStringL: () => (T$.numLToStringL = dart.constFn(dart.fnType(T$.StringL(), [T$.numL()])))(),
    NumericTickFormatterL: () => (T$.NumericTickFormatterL = dart.constFn(dart.legacy(tick_formatter.NumericTickFormatter)))(),
    ColorL: () => (T$.ColorL = dart.constFn(dart.legacy(color.Color)))(),
    intLToColorL: () => (T$.intLToColorL = dart.constFn(dart.fnType(T$.ColorL(), [T$.intL()])))(),
    MutableSeriesL: () => (T$.MutableSeriesL = dart.constFn(dart.legacy(processed_series.MutableSeries)))(),
    MutableSeriesLToNull: () => (T$.MutableSeriesLToNull = dart.constFn(dart.fnType(core.Null, [T$.MutableSeriesL()])))(),
    ListOfColorL: () => (T$.ListOfColorL = dart.constFn(core.List$(T$.ColorL())))(),
    ListLOfColorL: () => (T$.ListLOfColorL = dart.constFn(dart.legacy(T$.ListOfColorL())))(),
    IdentityMapOfStringL$ListLOfColorL: () => (T$.IdentityMapOfStringL$ListLOfColorL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.ListLOfColorL())))(),
    StringLToNull: () => (T$.StringLToNull = dart.constFn(dart.fnType(core.Null, [T$.StringL()])))(),
    AttributeKeyOfStringL: () => (T$.AttributeKeyOfStringL = dart.constFn(series$.AttributeKey$(T$.StringL())))(),
    SeriesRendererL: () => (T$.SeriesRendererL = dart.constFn(dart.legacy(series_renderer.SeriesRenderer)))(),
    AttributeKeyOfSeriesRendererL: () => (T$.AttributeKeyOfSeriesRendererL = dart.constFn(series$.AttributeKey$(T$.SeriesRendererL())))(),
    SeriesDatumL: () => (T$.SeriesDatumL = dart.constFn(dart.legacy(series_datum.SeriesDatum)))(),
    SeriesDatumConfigL: () => (T$.SeriesDatumConfigL = dart.constFn(dart.legacy(series_datum.SeriesDatumConfig)))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    StringLToboolL: () => (T$.StringLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.StringL()])))(),
    SelectionModelL: () => (T$.SelectionModelL = dart.constFn(dart.legacy(selection_model.SelectionModel)))(),
    SelectionModelTypeL: () => (T$.SelectionModelTypeL = dart.constFn(dart.legacy(selection_model.SelectionModelType)))(),
    intLToStringL: () => (T$.intLToStringL = dart.constFn(dart.fnType(T$.StringL(), [T$.intL()])))(),
    SymbolRendererL: () => (T$.SymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.SymbolRenderer)))(),
    RoundedRectSymbolRendererL: () => (T$.RoundedRectSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.RoundedRectSymbolRenderer)))(),
    LineSymbolRendererL: () => (T$.LineSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.LineSymbolRenderer)))(),
    CircleSymbolRendererL: () => (T$.CircleSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.CircleSymbolRenderer)))(),
    RectSymbolRendererL: () => (T$.RectSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.RectSymbolRenderer)))(),
    TriangleSymbolRendererL: () => (T$.TriangleSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.TriangleSymbolRenderer)))(),
    PointOfdoubleL: () => (T$.PointOfdoubleL = dart.constFn(math.Point$(T$.doubleL())))(),
    CylinderSymbolRendererL: () => (T$.CylinderSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.CylinderSymbolRenderer)))(),
    RectangleRangeSymbolRendererL: () => (T$.RectangleRangeSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.RectangleRangeSymbolRenderer)))(),
    JSArrayOfintL: () => (T$.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T$.intL())))(),
    LayoutViewL: () => (T$.LayoutViewL = dart.constFn(dart.legacy(layout_view.LayoutView)))(),
    LayoutViewLToNull: () => (T$.LayoutViewLToNull = dart.constFn(dart.fnType(core.Null, [T$.LayoutViewL()])))(),
    RectangleOfintL: () => (T$.RectangleOfintL = dart.constFn(math.Rectangle$(T$.intL())))(),
    JSArrayOfLayoutViewL: () => (T$.JSArrayOfLayoutViewL = dart.constFn(_interceptors.JSArray$(T$.LayoutViewL())))(),
    ListOfLayoutViewL: () => (T$.ListOfLayoutViewL = dart.constFn(core.List$(T$.LayoutViewL())))(),
    LayoutViewLAndLayoutViewLTointL: () => (T$.LayoutViewLAndLayoutViewLTointL = dart.constFn(dart.fnType(T$.intL(), [T$.LayoutViewL(), T$.LayoutViewL()])))(),
    LayoutViewLToboolL: () => (T$.LayoutViewLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.LayoutViewL()])))(),
    LayoutViewLTovoid: () => (T$.LayoutViewLTovoid = dart.constFn(dart.fnType(dart.void, [T$.LayoutViewL()])))(),
    LinkedHashSetOfStringL: () => (T$.LinkedHashSetOfStringL = dart.constFn(collection.LinkedHashSet$(T$.StringL())))(),
    GraphicsFactoryL: () => (T$.GraphicsFactoryL = dart.constFn(dart.legacy(graphics_factory.GraphicsFactory)))(),
    LayoutViewLToGraphicsFactoryL: () => (T$.LayoutViewLToGraphicsFactoryL = dart.constFn(dart.fnType(T$.GraphicsFactoryL(), [T$.LayoutViewL()])))(),
    MutableSelectionModelL: () => (T$.MutableSelectionModelL = dart.constFn(dart.legacy(selection_model.MutableSelectionModel)))(),
    MutableSelectionModelLTovoid: () => (T$.MutableSelectionModelLTovoid = dart.constFn(dart.fnType(dart.void, [T$.MutableSelectionModelL()])))(),
    BehaviorPositionL: () => (T$.BehaviorPositionL = dart.constFn(dart.legacy(chart_behavior.BehaviorPosition)))(),
    OutsideJustificationL: () => (T$.OutsideJustificationL = dart.constFn(dart.legacy(chart_behavior.OutsideJustification)))(),
    InsideJustificationL: () => (T$.InsideJustificationL = dart.constFn(dart.legacy(chart_behavior.InsideJustification)))(),
    LayoutPositionL: () => (T$.LayoutPositionL = dart.constFn(dart.legacy(layout_view.LayoutPosition)))(),
    ScaleOutputExtentL: () => (T$.ScaleOutputExtentL = dart.constFn(dart.legacy(scale.ScaleOutputExtent)))(),
    RangeBandTypeL: () => (T$.RangeBandTypeL = dart.constFn(dart.legacy(scale.RangeBandType)))(),
    StepSizeTypeL: () => (T$.StepSizeTypeL = dart.constFn(dart.legacy(scale.StepSizeType)))(),
    AxisSpecL: () => (T$.AxisSpecL = dart.constFn(dart.legacy(axis_spec.AxisSpec)))(),
    TextStyleSpecL: () => (T$.TextStyleSpecL = dart.constFn(dart.legacy(axis_spec.TextStyleSpec)))(),
    LineStyleSpecL: () => (T$.LineStyleSpecL = dart.constFn(dart.legacy(axis_spec.LineStyleSpec)))(),
    TickLabelAnchorL: () => (T$.TickLabelAnchorL = dart.constFn(dart.legacy(axis_spec.TickLabelAnchor)))(),
    TickLabelJustificationL: () => (T$.TickLabelJustificationL = dart.constFn(dart.legacy(axis_spec.TickLabelJustification)))(),
    intLTonumL: () => (T$.intLTonumL = dart.constFn(dart.fnType(T$.numL(), [T$.intL()])))(),
    ListOfintL: () => (T$.ListOfintL = dart.constFn(core.List$(T$.intL())))(),
    ListLOfintL: () => (T$.ListLOfintL = dart.constFn(dart.legacy(T$.ListOfintL())))(),
    intLToListLOfintL: () => (T$.intLToListLOfintL = dart.constFn(dart.fnType(T$.ListLOfintL(), [T$.intL()])))(),
    FillPatternTypeL: () => (T$.FillPatternTypeL = dart.constFn(dart.legacy(chart_canvas.FillPatternType)))(),
    intLToFillPatternTypeL: () => (T$.intLToFillPatternTypeL = dart.constFn(dart.fnType(T$.FillPatternTypeL(), [T$.intL()])))(),
    intLToTextStyleSpecL: () => (T$.intLToTextStyleSpecL = dart.constFn(dart.fnType(T$.TextStyleSpecL(), [T$.intL()])))(),
    numLToLStringL: () => (T$.numLToLStringL = dart.constFn(dart.legacy(T$.numLToStringL())))(),
    intLToFn$1: () => (T$.intLToFn$1 = dart.constFn(dart.fnType(T$.numLToLStringL(), [T$.intL()])))(),
    AxisOrientationL: () => (T$.AxisOrientationL = dart.constFn(dart.legacy(axis.AxisOrientation)))(),
    dynamicToboolL: () => (T$.dynamicToboolL = dart.constFn(dart.fnType(T$.boolL(), [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    RangeTickL: () => (T$.RangeTickL = dart.constFn(dart.legacy(range_tick.RangeTick)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    SmallTickDrawStrategyL: () => (T$.SmallTickDrawStrategyL = dart.constFn(dart.legacy(small_tick_draw_strategy.SmallTickDrawStrategy)))(),
    TickProviderOfStringL: () => (T$.TickProviderOfStringL = dart.constFn(tick_provider.TickProvider$(T$.StringL())))(),
    TickProviderLOfStringL: () => (T$.TickProviderLOfStringL = dart.constFn(dart.legacy(T$.TickProviderOfStringL())))(),
    OrdinalViewportL: () => (T$.OrdinalViewportL = dart.constFn(dart.legacy(axis.OrdinalViewport)))(),
    AxisL: () => (T$.AxisL = dart.constFn(dart.legacy(axis.Axis)))(),
    AttributeKeyOfAxisL: () => (T$.AttributeKeyOfAxisL = dart.constFn(series$.AttributeKey$(T$.AxisL())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.fixedPixel",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.fixedPixelSpaceFromStep",
        index: 5
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.styleAssignedPercentOfStep",
        index: 4
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.fixedPercentOfStep",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.fixedDomain",
        index: 2
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.none",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: T$.IdentityConverterOfnumL().prototype
      });
    },
    get C7() {
      return C[7] = dart.constList([0.01, 0.02, 0.025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 2.5, 3, 4, 5, 6, 7, 8, 9], T$.doubleL());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: scale.StepSizeType.prototype,
        [_name$]: "StepSizeType.autoDetect",
        index: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: scale.StepSizeType.prototype,
        [_name$]: "StepSizeType.fixedPixels",
        index: 2
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: scale.StepSizeType.prototype,
        [_name$]: "StepSizeType.fixedDomain",
        index: 1
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [max$]: 1 / 0,
        [min$]: -1 / 0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [max$]: 0,
        [min$]: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: scale.RangeBandConfig.prototype,
        [RangeBandConfig_size]: 0,
        [RangeBandConfig_type]: C[5] || CT.C5
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: scale.StepSizeConfig.prototype,
        [StepSizeConfig_size]: 0,
        [StepSizeConfig_type]: C[8] || CT.C8
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 1
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [_name]: "TextDirection.center",
        index: 2
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: axis.AxisOrientation.prototype,
        [_name$0]: "AxisOrientation.top",
        index: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: axis.AxisOrientation.prototype,
        [_name$0]: "AxisOrientation.bottom",
        index: 2
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: axis.AxisOrientation.prototype,
        [_name$0]: "AxisOrientation.right",
        index: 1
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: axis.AxisOrientation.prototype,
        [_name$0]: "AxisOrientation.left",
        index: 3
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [_name$1]: "_PixelVerticalDirection.over",
        index: 0
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [_name$1]: "_PixelVerticalDirection.under",
        index: 2
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [_name$1]: "_PixelVerticalDirection.center",
        index: 1
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.before",
        index: 0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.after",
        index: 2
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.inside",
        index: 3
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.centered",
        index: 1
      });
    },
    get C29() {
      return C[29] = dart.fn(math.max, T$.TAndTToT());
    },
    get C30() {
      return C[30] = dart.constList([C[22] || CT.C22, C[24] || CT.C24, C[23] || CT.C23], T$._PixelVerticalDirectionL());
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: T$.AttributeKeyOfStringL().prototype,
        [TypedKey_uniqueKey]: "SeriesRenderer.rendererId"
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: T$.AttributeKeyOfSeriesRendererL().prototype,
        [TypedKey_uniqueKey]: "SeriesRenderer.renderer"
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: selection_model.SelectionModelType.prototype,
        [_name$3]: "SelectionModelType.info",
        index: 0
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: selection_model.SelectionModelType.prototype,
        [_name$3]: "SelectionModelType.action",
        index: 1
      });
    },
    get C35() {
      return C[35] = dart.constList([C[33] || CT.C33, C[34] || CT.C34], T$.SelectionModelTypeL());
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$4]: "BehaviorPosition.top",
        index: 0
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$4]: "BehaviorPosition.bottom",
        index: 1
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$4]: "BehaviorPosition.start",
        index: 2
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$4]: "BehaviorPosition.end",
        index: 3
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$4]: "BehaviorPosition.inside",
        index: 4
      });
    },
    get C42() {
      return C[42] = dart.constList([C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41], T$.BehaviorPositionL());
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$4]: "OutsideJustification.startDrawArea",
        index: 0
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$4]: "OutsideJustification.start",
        index: 1
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$4]: "OutsideJustification.middleDrawArea",
        index: 2
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$4]: "OutsideJustification.middle",
        index: 3
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$4]: "OutsideJustification.endDrawArea",
        index: 4
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$4]: "OutsideJustification.end",
        index: 5
      });
    },
    get C49() {
      return C[49] = dart.constList([C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48], T$.OutsideJustificationL());
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: chart_behavior.InsideJustification.prototype,
        [_name$4]: "InsideJustification.topStart",
        index: 0
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: chart_behavior.InsideJustification.prototype,
        [_name$4]: "InsideJustification.topEnd",
        index: 1
      });
    },
    get C52() {
      return C[52] = dart.constList([C[50] || CT.C50, C[51] || CT.C51], T$.InsideJustificationL());
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$5]: "LayoutPosition.Bottom",
        index: 0
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$5]: "LayoutPosition.FullBottom",
        index: 1
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$5]: "LayoutPosition.Top",
        index: 2
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$5]: "LayoutPosition.FullTop",
        index: 3
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$5]: "LayoutPosition.Left",
        index: 4
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$5]: "LayoutPosition.FullLeft",
        index: 5
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$5]: "LayoutPosition.Right",
        index: 6
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$5]: "LayoutPosition.FullRight",
        index: 7
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$5]: "LayoutPosition.DrawArea",
        index: 8
      });
    },
    get C62() {
      return C[62] = dart.constList([C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59, C[60] || CT.C60, C[61] || CT.C61], T$.LayoutPositionL());
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: layout_view.ViewMargin.prototype,
        [leftPx$]: 0,
        [rightPx$]: 0,
        [bottomPx$]: 0,
        [topPx$]: 0
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: layout_view.ViewMeasuredSizes.prototype,
        [minHeight$]: 0,
        [minWidth$]: 0,
        [preferredHeight$]: 0,
        [preferredWidth$]: 0
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: material_style.MaterialStyle.prototype
      });
    },
    get C66() {
      return C[66] = dart.constList([C[5] || CT.C5, C[0] || CT.C0, C[4] || CT.C4, C[3] || CT.C3, C[2] || CT.C2, C[1] || CT.C1], T$.RangeBandTypeL());
    },
    get C67() {
      return C[67] = dart.constList([C[8] || CT.C8, C[10] || CT.C10, C[9] || CT.C9], T$.StepSizeTypeL());
    },
    get C68() {
      return C[68] = dart.constList([C[25] || CT.C25, C[28] || CT.C28, C[26] || CT.C26, C[27] || CT.C27], T$.TickLabelAnchorL());
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: axis_spec.TickLabelJustification.prototype,
        [_name$2]: "TickLabelJustification.inside",
        index: 0
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: axis_spec.TickLabelJustification.prototype,
        [_name$2]: "TickLabelJustification.outside",
        index: 1
      });
    },
    get C71() {
      return C[71] = dart.constList([C[69] || CT.C69, C[70] || CT.C70], T$.TickLabelJustificationL());
    },
    get C72() {
      return C[72] = dart.constList([C[18] || CT.C18, C[20] || CT.C20, C[19] || CT.C19, C[21] || CT.C21], T$.AxisOrientationL());
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: ordinal_tick_provider.OrdinalTickProvider.prototype
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: tick_formatter.OrdinalTickFormatter.prototype
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: T$.AttributeKeyOfStringL().prototype,
        [TypedKey_uniqueKey]: "Axis.measureAxisId"
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: T$.AttributeKeyOfAxisL().prototype,
        [TypedKey_uniqueKey]: "Axis.measureAxis"
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: T$.AttributeKeyOfAxisL().prototype,
        [TypedKey_uniqueKey]: "Axis.domainAxis"
      });
    }
  }, false);
  var C = Array(78).fill(void 0);
  var I = [
    "package:charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_tick_provider.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.10.0/lib/src/chart/cartesian/axis/ordinal_extents.dart",
    "package:charts_common/src/chart/cartesian/axis/scale.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_extents.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.10.0/lib/src/chart/cartesian/axis/ordinal_scale_domain_info.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.10.0/lib/src/chart/cartesian/axis/numeric_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_viewport.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_function.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_domain_info.dart",
    "package:charts_common/src/chart/cartesian/axis/numeric_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/numeric_extents.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.10.0/lib/src/chart/cartesian/axis/linear/linear_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart",
    "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart",
    "package:charts_common/src/chart/layout/layout_view.dart",
    "package:charts_common/src/chart/common/series_renderer.dart",
    "package:charts_common/src/chart/common/series_datum.dart",
    "package:charts_common/src/chart/common/selection_model/selection_model.dart",
    "package:charts_common/src/chart/common/processed_series.dart",
    "package:charts_common/src/common/symbol_renderer.dart",
    "package:charts_common/src/chart/common/datum_details.dart",
    "package:charts_common/src/chart/layout/layout_margin_strategy.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.10.0/lib/src/chart/layout/layout_manager_impl.dart",
    "package:charts_common/src/chart/layout/layout_manager_impl.dart",
    "package:charts_common/src/chart/layout/layout_manager.dart",
    "package:charts_common/src/chart/common/base_chart.dart",
    "package:charts_common/src/chart/common/behavior/chart_behavior.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart",
    "package:charts_common/src/common/style/style.dart",
    "package:charts_common/src/common/style/material_style.dart",
    "package:charts_common/src/common/style/style_factory.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.10.0/lib/src/chart/cartesian/axis/scale.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart",
    "package:charts_common/src/data/series.dart",
    "package:charts_common/src/chart/cartesian/axis/axis.dart"
  ];
  var _stepSizeConfig = dart.privateName(simple_ordinal_scale, "_stepSizeConfig");
  var _range = dart.privateName(simple_ordinal_scale, "_range");
  var _viewportScale = dart.privateName(simple_ordinal_scale, "_viewportScale");
  var _viewportTranslatePx = dart.privateName(simple_ordinal_scale, "_viewportTranslatePx");
  var _rangeBandConfig = dart.privateName(simple_ordinal_scale, "_rangeBandConfig");
  var _scaleChanged = dart.privateName(simple_ordinal_scale, "_scaleChanged");
  var _cachedStepSizePixels = dart.privateName(simple_ordinal_scale, "_cachedStepSizePixels");
  var _cachedRangeBandShift = dart.privateName(simple_ordinal_scale, "_cachedRangeBandShift");
  var _cachedRangeBandSize = dart.privateName(simple_ordinal_scale, "_cachedRangeBandSize");
  var _viewportDataSize = dart.privateName(simple_ordinal_scale, "_viewportDataSize");
  var _viewportStartingDomain = dart.privateName(simple_ordinal_scale, "_viewportStartingDomain");
  var _domain = dart.privateName(simple_ordinal_scale, "_domain");
  var _isVertical = dart.privateName(simple_ordinal_scale, "_isVertical");
  var _updateScale = dart.privateName(simple_ordinal_scale, "_updateScale");
  var _recalculateScale = dart.privateName(simple_ordinal_scale, "_recalculateScale");
  var _updateViewport = dart.privateName(simple_ordinal_scale, "_updateViewport");
  var _updateCachedFields = dart.privateName(simple_ordinal_scale, "_updateCachedFields");
  var _name$ = dart.privateName(scale, "_name");
  simple_ordinal_scale.SimpleOrdinalScale = class SimpleOrdinalScale extends core.Object {
    get [_isVertical]() {
      return dart.notNull(this.range.start) > dart.notNull(this.range.end);
    }
    get rangeBand() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      return this[_cachedRangeBandSize];
    }
    get stepSize() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      return this[_cachedStepSizePixels];
    }
    get domainStepSize() {
      return 1.0;
    }
    set rangeBandConfig(barGroupWidthConfig) {
      if (barGroupWidthConfig == null) {
        dart.throw(new core.ArgumentError.notNull("RangeBandConfig must not be null."));
      }
      if (barGroupWidthConfig.type == scale.RangeBandType.fixedDomain || barGroupWidthConfig.type == scale.RangeBandType.none) {
        dart.throw(new core.ArgumentError.new("barGroupWidthConfig must not be NONE or FIXED_DOMAIN"));
      }
      this[_rangeBandConfig] = barGroupWidthConfig;
      this[_scaleChanged] = true;
    }
    get rangeBandConfig() {
      return this[_rangeBandConfig];
    }
    set stepSizeConfig(config) {
      if (config != null && config.type != scale.StepSizeType.autoDetect) {
        dart.throw(new core.ArgumentError.new("Ordinal scales only support StepSizeConfig of type Auto"));
      }
    }
    get stepSizeConfig() {
      return this[_stepSizeConfig];
    }
    _get(domainValue) {
      T$.StringL().as(domainValue);
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      let i = this[_domain].indexOf(domainValue);
      if (i != null) {
        return dart.notNull(this.viewportTranslatePx) + dart.notNull(this[_range].start) + dart.notNull(this[_cachedRangeBandShift]) + dart.notNull(this[_cachedStepSizePixels]) * dart.notNull(i);
      }
      return 0.0;
    }
    reverse(pixelLocation) {
      let index = (dart.notNull(pixelLocation) - dart.notNull(this.viewportTranslatePx) - dart.notNull(this[_range].start) - dart.notNull(this[_cachedRangeBandShift])) / dart.notNull(this[_cachedStepSizePixels]);
      return this[_domain].getDomainAtIndex(math.max(T$.intL(), 0, math.min(T$.intL(), index[$round](), dart.notNull(this.domain.size) - 1)));
    }
    canTranslate(domainValue) {
      T$.StringL().as(domainValue);
      return this[_domain].indexOf(domainValue) != null;
    }
    get domain() {
      return this[_domain];
    }
    addDomain(domainValue) {
      T$.StringL().as(domainValue);
      this[_domain].add(domainValue);
      this[_scaleChanged] = true;
    }
    set range(extent) {
      this[_range] = extent;
      this[_scaleChanged] = true;
    }
    get range() {
      return this[_range];
    }
    resetDomain() {
      this[_domain].clear();
      this[_scaleChanged] = true;
    }
    resetViewportSettings() {
      this[_viewportScale] = 1.0;
      this[_viewportTranslatePx] = 0.0;
      this[_scaleChanged] = true;
    }
    get rangeWidth() {
      return (dart.notNull(this.range.start) - dart.notNull(this.range.end))[$abs]()[$toInt]();
    }
    get viewportScalingFactor() {
      return this[_viewportScale];
    }
    get viewportTranslatePx() {
      return this[_viewportTranslatePx];
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      this[_viewportScale] = viewportScale;
      if (dart.test(this[_isVertical])) {
        this[_viewportTranslatePx] = math.max(T$.doubleL(), math.min(T$.doubleL(), -(dart.notNull(this.rangeWidth) * (1.0 - dart.notNull(viewportScale))), viewportTranslatePx), 0.0);
      } else {
        this[_viewportTranslatePx] = math.min(T$.doubleL(), math.max(T$.doubleL(), dart.notNull(this.rangeWidth) * (1.0 - dart.notNull(viewportScale)), viewportTranslatePx), 0.0);
      }
      this[_scaleChanged] = true;
    }
    setViewport(viewportDataSize, startingDomain) {
      if (startingDomain != null && viewportDataSize != null && dart.notNull(viewportDataSize) <= 0) {
        dart.throw(new core.ArgumentError.new("viewportDataSize can" + "t be less than 1."));
      }
      this[_scaleChanged] = true;
      this[_viewportDataSize] = viewportDataSize;
      this[_viewportStartingDomain] = startingDomain;
    }
    [_updateViewport]() {
      this.setViewportSettings(1.0, 0.0);
      this[_recalculateScale]();
      if (dart.test(this[_domain].isEmpty)) {
        return;
      }
      this.setViewportSettings(dart.notNull(this[_domain].size) / math.min(T$.numL(), this[_viewportDataSize], this[_domain].size), dart.test(this[_isVertical]) ? 1.7976931348623157e+308 : 0.0);
      this[_recalculateScale]();
      let domainIndex = this[_domain].indexOf(this[_viewportStartingDomain]);
      if (domainIndex != null) {
        let viewportTranslatePx = 0.0;
        if (dart.test(this[_isVertical])) {
          viewportTranslatePx = (dart.notNull(this[_viewportDataSize]) - dart.notNull(domainIndex) - 1) * dart.notNull(this[_cachedStepSizePixels]);
        } else {
          viewportTranslatePx = -(dart.notNull(this[_cachedStepSizePixels]) * dart.notNull(domainIndex));
        }
        this.setViewportSettings(this[_viewportScale], viewportTranslatePx);
      }
    }
    get viewportDataSize() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      return dart.test(this[_domain].isEmpty) ? 0 : (dart.notNull(this.rangeWidth) / this[_cachedStepSizePixels][$abs]())[$truncate]();
    }
    get viewportStartingDomain() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      if (dart.test(this[_domain].isEmpty)) {
        return null;
      }
      if (dart.test(this[_isVertical])) {
        let index = (-(dart.notNull(this.rangeWidth) + dart.notNull(this[_viewportTranslatePx])) / dart.notNull(this[_cachedStepSizePixels]))[$ceil]()[$toInt]() - 1;
        return this[_domain].getDomainAtIndex(index);
      } else {
        return this[_domain].getDomainAtIndex((-dart.notNull(this[_viewportTranslatePx]) / dart.notNull(this[_cachedStepSizePixels]))[$ceil]()[$toInt]());
      }
    }
    isRangeValueWithinViewport(rangeValue) {
      return math$.withinBounds(rangeValue, this.range.min, this.range.max);
    }
    compareDomainValueToViewport(domainValue) {
      T$.StringL().as(domainValue);
      let i = this[_domain].indexOf(domainValue);
      if (i != null && this.range != null) {
        let domainPx = this._get(domainValue);
        if (dart.notNull(domainPx) < dart.notNull(this.range.min)) {
          return -1;
        }
        if (dart.notNull(domainPx) > dart.notNull(this.range.max)) {
          return 1;
        }
        return 0;
      }
      return -1;
    }
    copy() {
      return new simple_ordinal_scale.SimpleOrdinalScale._copy(this);
    }
    [_updateCachedFields](stepSizePixels, rangeBandPixels, rangeBandShift) {
      this[_cachedStepSizePixels] = stepSizePixels;
      this[_cachedRangeBandSize] = rangeBandPixels;
      this[_cachedRangeBandShift] = rangeBandShift;
      if (dart.test(this[_isVertical])) {
        this[_cachedStepSizePixels] = dart.notNull(this[_cachedStepSizePixels]) * -1;
        this[_cachedRangeBandShift] = dart.notNull(this[_cachedRangeBandShift]) * -1;
      }
      this[_scaleChanged] = false;
    }
    [_updateScale]() {
      if (this[_viewportStartingDomain] != null && this[_viewportDataSize] != null) {
        this[_updateViewport]();
      }
      this[_recalculateScale]();
    }
    [_recalculateScale]() {
      let stepSizePixels = dart.test(this[_domain].isEmpty) ? 0.0 : dart.notNull(this[_viewportScale]) * (this.rangeWidth[$toDouble]() / this[_domain].size[$toDouble]());
      let rangeBandPixels = null;
      switch (this.rangeBandConfig.type) {
        case C[0] || CT.C0:
        {
          rangeBandPixels = this.rangeBandConfig.size[$toDouble]();
          break;
        }
        case C[1] || CT.C1:
        {
          let spaceInPixels = this.rangeBandConfig.size[$toDouble]();
          rangeBandPixels = math.max(T$.doubleL(), 0.0, stepSizePixels - spaceInPixels);
          break;
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          let percent = this.rangeBandConfig.size[$toDouble]();
          rangeBandPixels = stepSizePixels * percent;
          break;
        }
        case C[4] || CT.C4:
        case C[5] || CT.C5:
        default:
        {
          dart.throw(new core.StateError.new("RangeBandType must not be NONE or FIXED_DOMAIN"));
          break;
        }
      }
      this[_updateCachedFields](stepSizePixels, rangeBandPixels, stepSizePixels / 2.0);
    }
  };
  (simple_ordinal_scale.SimpleOrdinalScale.new = function() {
    this[_stepSizeConfig] = new scale.StepSizeConfig.auto();
    this[_range] = new scale.ScaleOutputExtent.new(0, 1);
    this[_viewportScale] = 1.0;
    this[_viewportTranslatePx] = 0.0;
    this[_rangeBandConfig] = new scale.RangeBandConfig.styleAssignedPercent();
    this[_scaleChanged] = true;
    this[_cachedStepSizePixels] = null;
    this[_cachedRangeBandShift] = null;
    this[_cachedRangeBandSize] = null;
    this[_viewportDataSize] = null;
    this[_viewportStartingDomain] = null;
    this[_domain] = new ordinal_scale_domain_info.OrdinalScaleDomainInfo.new();
    ;
  }).prototype = simple_ordinal_scale.SimpleOrdinalScale.prototype;
  (simple_ordinal_scale.SimpleOrdinalScale._copy = function(other) {
    this[_stepSizeConfig] = new scale.StepSizeConfig.auto();
    this[_range] = new scale.ScaleOutputExtent.new(0, 1);
    this[_viewportScale] = 1.0;
    this[_viewportTranslatePx] = 0.0;
    this[_rangeBandConfig] = new scale.RangeBandConfig.styleAssignedPercent();
    this[_scaleChanged] = true;
    this[_cachedStepSizePixels] = null;
    this[_cachedRangeBandShift] = null;
    this[_cachedRangeBandSize] = null;
    this[_viewportDataSize] = null;
    this[_viewportStartingDomain] = null;
    this[_domain] = other[_domain].copy();
    this[_range] = new scale.ScaleOutputExtent.new(other[_range].start, other[_range].end);
    this[_viewportScale] = other[_viewportScale];
    this[_viewportTranslatePx] = other[_viewportTranslatePx];
    this[_rangeBandConfig] = other[_rangeBandConfig];
    ;
  }).prototype = simple_ordinal_scale.SimpleOrdinalScale.prototype;
  dart.addTypeTests(simple_ordinal_scale.SimpleOrdinalScale);
  dart.addTypeCaches(simple_ordinal_scale.SimpleOrdinalScale);
  simple_ordinal_scale.SimpleOrdinalScale[dart.implements] = () => [ordinal_scale.OrdinalScale];
  dart.setMethodSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getMethods(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    _get: dart.fnType(dart.legacy(core.num), [dart.legacy(core.Object)]),
    reverse: dart.fnType(dart.legacy(core.String), [dart.legacy(core.double)]),
    canTranslate: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    addDomain: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    resetDomain: dart.fnType(dart.void, []),
    resetViewportSettings: dart.fnType(dart.void, []),
    setViewportSettings: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    setViewport: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.String)]),
    [_updateViewport]: dart.fnType(dart.void, []),
    isRangeValueWithinViewport: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    compareDomainValueToViewport: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    copy: dart.fnType(dart.legacy(simple_ordinal_scale.SimpleOrdinalScale), []),
    [_updateCachedFields]: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    [_updateScale]: dart.fnType(dart.void, []),
    [_recalculateScale]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getGetters(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    [_isVertical]: dart.legacy(core.bool),
    rangeBand: dart.legacy(core.double),
    stepSize: dart.legacy(core.double),
    domainStepSize: dart.legacy(core.double),
    rangeBandConfig: dart.legacy(scale.RangeBandConfig),
    stepSizeConfig: dart.legacy(scale.StepSizeConfig),
    domain: dart.legacy(ordinal_scale_domain_info.OrdinalScaleDomainInfo),
    range: dart.legacy(scale.ScaleOutputExtent),
    rangeWidth: dart.legacy(core.int),
    viewportScalingFactor: dart.legacy(core.double),
    viewportTranslatePx: dart.legacy(core.double),
    viewportDataSize: dart.legacy(core.int),
    viewportStartingDomain: dart.legacy(core.String)
  }));
  dart.setSetterSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getSetters(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    rangeBandConfig: dart.legacy(scale.RangeBandConfig),
    stepSizeConfig: dart.legacy(scale.StepSizeConfig),
    range: dart.legacy(scale.ScaleOutputExtent)
  }));
  dart.setLibraryUri(simple_ordinal_scale.SimpleOrdinalScale, I[0]);
  dart.setFieldSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getFields(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    [_stepSizeConfig]: dart.finalFieldType(dart.legacy(scale.StepSizeConfig)),
    [_domain]: dart.finalFieldType(dart.legacy(ordinal_scale_domain_info.OrdinalScaleDomainInfo)),
    [_range]: dart.fieldType(dart.legacy(scale.ScaleOutputExtent)),
    [_viewportScale]: dart.fieldType(dart.legacy(core.double)),
    [_viewportTranslatePx]: dart.fieldType(dart.legacy(core.double)),
    [_rangeBandConfig]: dart.fieldType(dart.legacy(scale.RangeBandConfig)),
    [_scaleChanged]: dart.fieldType(dart.legacy(core.bool)),
    [_cachedStepSizePixels]: dart.fieldType(dart.legacy(core.double)),
    [_cachedRangeBandShift]: dart.fieldType(dart.legacy(core.double)),
    [_cachedRangeBandSize]: dart.fieldType(dart.legacy(core.double)),
    [_viewportDataSize]: dart.fieldType(dart.legacy(core.int)),
    [_viewportStartingDomain]: dart.fieldType(dart.legacy(core.String))
  }));
  const _is_BaseTickProvider_default = Symbol('_is_BaseTickProvider_default');
  tick_provider.BaseTickProvider$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var ListOfDL = () => (ListOfDL = dart.constFn(core.List$(DL())))();
    var ListLOfDL = () => (ListLOfDL = dart.constFn(dart.legacy(ListOfDL())))();
    var MutableScaleOfDL = () => (MutableScaleOfDL = dart.constFn(scale.MutableScale$(DL())))();
    var MutableScaleLOfDL = () => (MutableScaleLOfDL = dart.constFn(dart.legacy(MutableScaleOfDL())))();
    var TickFormatterOfDL = () => (TickFormatterOfDL = dart.constFn(tick_formatter.TickFormatter$(DL())))();
    var TickFormatterLOfDL = () => (TickFormatterLOfDL = dart.constFn(dart.legacy(TickFormatterOfDL())))();
    var MapOfDL$StringL = () => (MapOfDL$StringL = dart.constFn(core.Map$(DL(), T$.StringL())))();
    var MapLOfDL$StringL = () => (MapLOfDL$StringL = dart.constFn(dart.legacy(MapOfDL$StringL())))();
    var TickOfDL = () => (TickOfDL = dart.constFn(tick.Tick$(DL())))();
    var TickLOfDL = () => (TickLOfDL = dart.constFn(dart.legacy(TickOfDL())))();
    var JSArrayOfTickLOfDL = () => (JSArrayOfTickLOfDL = dart.constFn(_interceptors.JSArray$(TickLOfDL())))();
    class BaseTickProvider extends core.Object {
      createTicks(domainValues, opts) {
        ListLOfDL().as(domainValues);
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleLOfDL().as(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterLOfDL().as(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapLOfDL$StringL().as(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
        let ticks = JSArrayOfTickLOfDL().of([]);
        let labels = formatter.format(domainValues, formatterValueCache, {stepSize: stepSize});
        for (let i = 0; i < dart.notNull(domainValues[$length]); i = i + 1) {
          let value = domainValues[$_get](i);
          let tick = new (TickOfDL()).new({value: value, textElement: graphicsFactory.createTextElement(labels[$_get](i)), locationPx: scale._get(value)});
          ticks[$add](tick);
        }
        tickDrawStrategy.decorateTicks(ticks);
        return ticks;
      }
    }
    (BaseTickProvider.new = function() {
      ;
    }).prototype = BaseTickProvider.prototype;
    dart.addTypeTests(BaseTickProvider);
    BaseTickProvider.prototype[_is_BaseTickProvider_default] = true;
    dart.addTypeCaches(BaseTickProvider);
    BaseTickProvider[dart.implements] = () => [tick_provider.TickProvider$(dart.legacy(D))];
    dart.setMethodSignature(BaseTickProvider, () => ({
      __proto__: dart.getMethods(BaseTickProvider.__proto__),
      createTicks: dart.fnType(dart.legacy(core.List$(dart.legacy(tick.Tick$(dart.legacy(D))))), [dart.legacy(core.Object)], {context: dart.legacy(chart_context.ChartContext), formatter: dart.legacy(core.Object), formatterValueCache: dart.legacy(core.Object), graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory), scale: dart.legacy(core.Object), stepSize: dart.legacy(core.num), tickDrawStrategy: dart.legacy(tick_draw_strategy.TickDrawStrategy)}, {})
    }));
    dart.setLibraryUri(BaseTickProvider, I[1]);
    return BaseTickProvider;
  });
  tick_provider.BaseTickProvider = tick_provider.BaseTickProvider$();
  dart.addTypeTests(tick_provider.BaseTickProvider, _is_BaseTickProvider_default);
  ordinal_tick_provider.OrdinalTickProvider = class OrdinalTickProvider extends tick_provider.BaseTickProvider$(dart.legacy(core.String)) {
    getTicks(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let domainValues = opts && 'domainValues' in opts ? opts.domainValues : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      T$.OrdinalScaleL().as(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      T$.TickFormatterL().as(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      T$.MapLOfStringL$StringL().as(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      T$.TickHintLOfStringL().as(tickHint);
      return this.createTicks(scale.domain.domains, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: T$.TickFormatterLOfStringL().as(formatter), formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy});
    }
    _equals(other) {
      if (other == null) return false;
      return T$.OrdinalTickProviderL().is(other);
    }
    get hashCode() {
      return 31;
    }
  };
  (ordinal_tick_provider.OrdinalTickProvider.new = function() {
    ordinal_tick_provider.OrdinalTickProvider.__proto__.new.call(this);
    ;
  }).prototype = ordinal_tick_provider.OrdinalTickProvider.prototype;
  dart.addTypeTests(ordinal_tick_provider.OrdinalTickProvider);
  dart.addTypeCaches(ordinal_tick_provider.OrdinalTickProvider);
  dart.setMethodSignature(ordinal_tick_provider.OrdinalTickProvider, () => ({
    __proto__: dart.getMethods(ordinal_tick_provider.OrdinalTickProvider.__proto__),
    getTicks: dart.fnType(dart.legacy(core.List$(dart.legacy(tick.Tick$(dart.legacy(core.String))))), [], {context: dart.legacy(chart_context.ChartContext), domainValues: dart.legacy(core.List$(dart.legacy(core.String))), formatter: dart.legacy(core.Object), formatterValueCache: dart.legacy(core.Object), graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory), orientation: dart.legacy(axis.AxisOrientation), scale: dart.legacy(core.Object), tickDrawStrategy: dart.legacy(tick_draw_strategy.TickDrawStrategy), tickHint: dart.legacy(core.Object), viewportExtensionEnabled: dart.legacy(core.bool)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(ordinal_tick_provider.OrdinalTickProvider, () => ({
    __proto__: dart.getGetters(ordinal_tick_provider.OrdinalTickProvider.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(ordinal_tick_provider.OrdinalTickProvider, I[2]);
  dart.defineExtensionMethods(ordinal_tick_provider.OrdinalTickProvider, ['_equals']);
  dart.defineExtensionAccessors(ordinal_tick_provider.OrdinalTickProvider, ['hashCode']);
  var _range$ = dart.privateName(ordinal_extents, "_range");
  const _is_Extents_default = Symbol('_is_Extents_default');
  scale.Extents$ = dart.generic(D => {
    class Extents extends core.Object {}
    (Extents.new = function() {
      ;
    }).prototype = Extents.prototype;
    dart.addTypeTests(Extents);
    Extents.prototype[_is_Extents_default] = true;
    dart.addTypeCaches(Extents);
    dart.setLibraryUri(Extents, I[4]);
    return Extents;
  });
  scale.Extents = scale.Extents$();
  dart.addTypeTests(scale.Extents, _is_Extents_default);
  ordinal_extents.OrdinalExtents = class OrdinalExtents extends scale.Extents$(dart.legacy(core.String)) {
    static all(range) {
      return new ordinal_extents.OrdinalExtents.new(range);
    }
    get isEmpty() {
      return this[_range$][$isEmpty];
    }
    get length() {
      return this[_range$][$length];
    }
    _get(index) {
      return this[_range$][$_get](index);
    }
    indexOf(value) {
      return this[_range$][$indexOf](value);
    }
  };
  (ordinal_extents.OrdinalExtents.new = function(range) {
    this[_range$] = range;
    let uniqueValueCount = collection.HashSet.from(this[_range$])[$length];
    if (!(uniqueValueCount == range[$length])) dart.assertFailed(null, I[3], 31, 12, "uniqueValueCount == range.length");
  }).prototype = ordinal_extents.OrdinalExtents.prototype;
  dart.addTypeTests(ordinal_extents.OrdinalExtents);
  dart.addTypeCaches(ordinal_extents.OrdinalExtents);
  dart.setMethodSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getMethods(ordinal_extents.OrdinalExtents.__proto__),
    _get: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    indexOf: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getGetters(ordinal_extents.OrdinalExtents.__proto__),
    isEmpty: dart.legacy(core.bool),
    length: dart.legacy(core.int)
  }));
  dart.setLibraryUri(ordinal_extents.OrdinalExtents, I[5]);
  dart.setFieldSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getFields(ordinal_extents.OrdinalExtents.__proto__),
    [_range$]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  var _index = dart.privateName(ordinal_scale_domain_info, "_index");
  var _domainsToOrder = dart.privateName(ordinal_scale_domain_info, "_domainsToOrder");
  var _domainList = dart.privateName(ordinal_scale_domain_info, "_domainList");
  ordinal_scale_domain_info.OrdinalScaleDomainInfo = class OrdinalScaleDomainInfo extends core.Object {
    copy() {
      let t0;
      t0 = new ordinal_scale_domain_info.OrdinalScaleDomainInfo.new();
      return (() => {
        t0[_domainsToOrder][$addAll](this[_domainsToOrder]);
        t0[_index] = this[_index];
        t0[_domainList][$addAll](this[_domainList]);
        return t0;
      })();
    }
    add(domain) {
      if (!dart.test(this[_domainsToOrder][$containsKey](domain))) {
        this[_domainsToOrder][$_set](domain, this[_index]);
        this[_index] = dart.notNull(this[_index]) + 1;
        this[_domainList][$add](domain);
      }
    }
    indexOf(domain) {
      return this[_domainsToOrder][$_get](domain);
    }
    getDomainAtIndex(index) {
      if (!(dart.notNull(index) >= 0)) dart.assertFailed(null, I[6], 53, 12, "index >= 0");
      if (!(dart.notNull(index) < dart.notNull(this[_index]))) dart.assertFailed(null, I[6], 54, 12, "index < _index");
      return this[_domainList][$_get](index);
    }
    get domains() {
      return this[_domainList];
    }
    get first() {
      return dart.test(this[_domainList][$isEmpty]) ? null : this[_domainList][$first];
    }
    get last() {
      return dart.test(this[_domainList][$isEmpty]) ? null : this[_domainList][$last];
    }
    get isEmpty() {
      return this[_index] === 0;
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    get extent() {
      return ordinal_extents.OrdinalExtents.all(this[_domainList]);
    }
    get size() {
      return this[_index];
    }
    clear() {
      this[_domainsToOrder][$clear]();
      this[_domainList][$clear]();
      this[_index] = 0;
    }
  };
  (ordinal_scale_domain_info.OrdinalScaleDomainInfo.new = function() {
    this[_index] = 0;
    this[_domainsToOrder] = new (T$.IdentityMapOfStringL$intL()).new();
    this[_domainList] = T$.JSArrayOfStringL().of([]);
    ;
  }).prototype = ordinal_scale_domain_info.OrdinalScaleDomainInfo.prototype;
  dart.addTypeTests(ordinal_scale_domain_info.OrdinalScaleDomainInfo);
  dart.addTypeCaches(ordinal_scale_domain_info.OrdinalScaleDomainInfo);
  dart.setMethodSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getMethods(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    copy: dart.fnType(dart.legacy(ordinal_scale_domain_info.OrdinalScaleDomainInfo), []),
    add: dart.fnType(dart.void, [dart.legacy(core.String)]),
    indexOf: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)]),
    getDomainAtIndex: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getGetters(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    domains: dart.legacy(core.List$(dart.legacy(core.String))),
    first: dart.legacy(core.String),
    last: dart.legacy(core.String),
    isEmpty: dart.legacy(core.bool),
    isNotEmpty: dart.legacy(core.bool),
    extent: dart.legacy(ordinal_extents.OrdinalExtents),
    size: dart.legacy(core.int)
  }));
  dart.setLibraryUri(ordinal_scale_domain_info.OrdinalScaleDomainInfo, I[7]);
  dart.setFieldSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getFields(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    [_index]: dart.fieldType(dart.legacy(core.int)),
    [_domainsToOrder]: dart.finalFieldType(dart.legacy(collection.HashMap$(dart.legacy(core.String), dart.legacy(core.int)))),
    [_domainList]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  const _is_Scale_default = Symbol('_is_Scale_default');
  scale.Scale$ = dart.generic(D => {
    class Scale extends core.Object {}
    (Scale.new = function() {
      ;
    }).prototype = Scale.prototype;
    dart.addTypeTests(Scale);
    Scale.prototype[_is_Scale_default] = true;
    dart.addTypeCaches(Scale);
    dart.setLibraryUri(Scale, I[4]);
    return Scale;
  });
  scale.Scale = scale.Scale$();
  dart.addTypeTests(scale.Scale, _is_Scale_default);
  const _is_MutableScale_default = Symbol('_is_MutableScale_default');
  scale.MutableScale$ = dart.generic(D => {
    class MutableScale extends scale.Scale$(dart.legacy(D)) {}
    (MutableScale.new = function() {
      ;
    }).prototype = MutableScale.prototype;
    dart.addTypeTests(MutableScale);
    MutableScale.prototype[_is_MutableScale_default] = true;
    dart.addTypeCaches(MutableScale);
    dart.setLibraryUri(MutableScale, I[4]);
    return MutableScale;
  });
  scale.MutableScale = scale.MutableScale$();
  dart.addTypeTests(scale.MutableScale, _is_MutableScale_default);
  ordinal_scale.OrdinalScale = class OrdinalScale extends scale.MutableScale$(dart.legacy(core.String)) {};
  (ordinal_scale.OrdinalScale.new = function() {
    ;
  }).prototype = ordinal_scale.OrdinalScale.prototype;
  dart.addTypeTests(ordinal_scale.OrdinalScale);
  dart.addTypeCaches(ordinal_scale.OrdinalScale);
  dart.setLibraryUri(ordinal_scale.OrdinalScale, I[8]);
  var zeroBound = dart.privateName(numeric_tick_provider, "NumericTickProvider.zeroBound");
  var dataIsInWholeNumbers = dart.privateName(numeric_tick_provider, "NumericTickProvider.dataIsInWholeNumbers");
  var dataToAxisUnitConverter = dart.privateName(numeric_tick_provider, "NumericTickProvider.dataToAxisUnitConverter");
  var _desiredMaxTickCount = dart.privateName(numeric_tick_provider, "_desiredMaxTickCount");
  var _desiredMinTickCount = dart.privateName(numeric_tick_provider, "_desiredMinTickCount");
  var _allowedSteps = dart.privateName(numeric_tick_provider, "_allowedSteps");
  var _low = dart.privateName(numeric_tick_provider, "_low");
  var _high = dart.privateName(numeric_tick_provider, "_high");
  var _rangeWidth = dart.privateName(numeric_tick_provider, "_rangeWidth");
  var _minTickCount = dart.privateName(numeric_tick_provider, "_minTickCount");
  var _maxTickCount = dart.privateName(numeric_tick_provider, "_maxTickCount");
  var _prevLow = dart.privateName(numeric_tick_provider, "_prevLow");
  var _prevHigh = dart.privateName(numeric_tick_provider, "_prevHigh");
  var _prevRangeWidth = dart.privateName(numeric_tick_provider, "_prevRangeWidth");
  var _prevMinTickCount = dart.privateName(numeric_tick_provider, "_prevMinTickCount");
  var _prevMaxTickCount = dart.privateName(numeric_tick_provider, "_prevMaxTickCount");
  var _prevDataIsInWholeNumbers = dart.privateName(numeric_tick_provider, "_prevDataIsInWholeNumbers");
  var _getTickValues = dart.privateName(numeric_tick_provider, "_getTickValues");
  var _getTicksFromHint = dart.privateName(numeric_tick_provider, "_getTicksFromHint");
  var _updateDomainExtents = dart.privateName(numeric_tick_provider, "_updateDomainExtents");
  var _hasTickParametersChanged = dart.privateName(numeric_tick_provider, "_hasTickParametersChanged");
  var _updateTickCounts = dart.privateName(numeric_tick_provider, "_updateTickCounts");
  var _getStepsForTickCount = dart.privateName(numeric_tick_provider, "_getStepsForTickCount");
  var _setPreviousTickCalculationParameters = dart.privateName(numeric_tick_provider, "_setPreviousTickCalculationParameters");
  numeric_tick_provider.NumericTickProvider = class NumericTickProvider extends tick_provider.BaseTickProvider$(dart.legacy(core.num)) {
    get zeroBound() {
      return this[zeroBound];
    }
    set zeroBound(value) {
      this[zeroBound] = value;
    }
    get dataIsInWholeNumbers() {
      return this[dataIsInWholeNumbers];
    }
    set dataIsInWholeNumbers(value) {
      this[dataIsInWholeNumbers] = value;
    }
    get dataToAxisUnitConverter() {
      return this[dataToAxisUnitConverter];
    }
    set dataToAxisUnitConverter(value) {
      this[dataToAxisUnitConverter] = value;
    }
    setFixedTickCount(tickCount) {
      this[_desiredMinTickCount] = tickCount != null && dart.notNull(tickCount) > 1 ? tickCount : null;
      this[_desiredMaxTickCount] = this[_desiredMinTickCount];
    }
    setTickCount(maxTickCount, minTickCount) {
      if (maxTickCount != null && dart.notNull(maxTickCount) > 1) {
        this[_desiredMaxTickCount] = maxTickCount;
        if (minTickCount != null && dart.notNull(minTickCount) > 1 && dart.notNull(minTickCount) <= dart.notNull(this[_desiredMaxTickCount])) {
          this[_desiredMinTickCount] = minTickCount;
        } else {
          this[_desiredMinTickCount] = 2;
        }
      } else {
        this[_desiredMaxTickCount] = null;
        this[_desiredMinTickCount] = null;
      }
    }
    set allowedSteps(steps) {
      if (!(steps != null && dart.test(steps[$isNotEmpty]))) dart.assertFailed(null, I[9], 187, 12, "steps != null && steps.isNotEmpty");
      steps[$sort]();
      let stepSet = collection.LinkedHashSet.from(steps);
      this[_allowedSteps] = T$.ListOfdoubleL().filled(dart.notNull(stepSet[$length]) * 3, 0.0);
      let stepIndex = 0;
      for (let t0 of stepSet) {
        let step = T$.doubleL().as(t0);
        if (!(1.0 <= dart.notNull(step) && dart.notNull(step) < 10.0)) dart.assertFailed(null, I[9], 194, 14, "1.0 <= step && step < 10.0");
        this[_allowedSteps][$_set](stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) / 100));
        this[_allowedSteps][$_set](dart.notNull(stepSet[$length]) + stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) / 10)[$toDouble]());
        this[_allowedSteps][$_set](2 * dart.notNull(stepSet[$length]) + stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(step));
        stepIndex = stepIndex + 1;
      }
    }
    [_getTicksFromHint](opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      let stepSize = (dart.notNull(tickHint.end) - dart.notNull(tickHint.start)) / (dart.notNull(tickHint.tickCount) - 1);
      let tickZeroShift = dart.notNull(tickHint.start) - stepSize * (dart.notNull(tickHint.start) >= 0 ? (dart.notNull(tickHint.start) / stepSize)[$floor]() : (dart.notNull(tickHint.start) / stepSize)[$ceil]());
      let tickStart = (dart.notNull(scale.viewportDomain.min) / stepSize)[$ceil]() * stepSize + tickZeroShift;
      let stepInfo = new numeric_tick_provider._TickStepInfo.new(stepSize[$abs](), tickStart);
      let tickValues = this[_getTickValues](stepInfo, tickHint.tickCount);
      return this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: stepInfo.stepSize});
    }
    getTicks(opts) {
      let t1, t1$;
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      T$.NumericScaleL().as(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      T$.TickFormatterLOfnumL().as(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      T$.MapLOfnumL$StringL().as(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      T$.TickHintLOfnumL().as(tickHint);
      let ticks = null;
      this[_rangeWidth] = scale.rangeWidth;
      this[_updateDomainExtents](scale.viewportDomain);
      if (tickHint != null) {
        return this[_getTicksFromHint]({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, tickHint: tickHint});
      }
      if (dart.test(this[_hasTickParametersChanged]()) || ticks == null) {
        let selectedTicksRange = 1.7976931348623157e+308;
        let foundPreferredTicks = false;
        let viewportDomain = scale.viewportDomain;
        let axisUnitsHigh = this.dataToAxisUnitConverter.convert(this[_high]);
        let axisUnitsLow = this.dataToAxisUnitConverter.convert(this[_low]);
        this[_updateTickCounts](axisUnitsHigh, axisUnitsLow);
        let mutableScale = T$.NumericScaleL().as(dart.test(viewportExtensionEnabled) ? scale.copy() : null);
        for (let tickCount = this[_maxTickCount]; dart.notNull(tickCount) >= dart.notNull(this[_minTickCount]); tickCount = dart.notNull(tickCount) - 1) {
          let stepInfo = this[_getStepsForTickCount](tickCount, axisUnitsHigh, axisUnitsLow);
          if (stepInfo == null) {
            continue;
          }
          let firstTick = this.dataToAxisUnitConverter.invert(stepInfo.tickStart);
          let lastTick = this.dataToAxisUnitConverter.invert(dart.notNull(stepInfo.tickStart) + dart.notNull(stepInfo.stepSize) * (dart.notNull(tickCount) - 1));
          let range = dart.notNull(lastTick) - dart.notNull(firstTick);
          if (range < selectedTicksRange || !foundPreferredTicks) {
            let tickValues = this[_getTickValues](stepInfo, tickCount);
            if (dart.test(viewportExtensionEnabled)) {
              mutableScale.viewportDomain = new numeric_extents.NumericExtents.new(firstTick, lastTick);
            }
            let preferredTicks = this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: dart.test(viewportExtensionEnabled) ? mutableScale : scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: stepInfo.stepSize});
            let collisionReport = tickDrawStrategy.collides(preferredTicks, orientation);
            if (dart.test(collisionReport.ticksCollide) && dart.notNull(tickCount) > dart.notNull(this[_minTickCount])) {
              continue;
            }
            if (foundPreferredTicks && dart.test(collisionReport.alternateTicksUsed)) {
              continue;
            }
            ticks = T$.ListLOfTickLOfnumL().as(dart.test(collisionReport.alternateTicksUsed) ? collisionReport.ticks : preferredTicks);
            foundPreferredTicks = !dart.test(collisionReport.alternateTicksUsed);
            selectedTicksRange = range;
            viewportDomain = (t1$ = (t1 = mutableScale, t1 == null ? null : t1.viewportDomain), t1$ == null ? scale.viewportDomain : t1$);
          }
        }
        this[_setPreviousTickCalculationParameters]();
        if (dart.test(viewportExtensionEnabled) && !dart.equals(scale.viewportDomain, viewportDomain)) {
          scale.viewportDomain = viewportDomain;
        }
      }
      return ticks;
    }
    [_hasTickParametersChanged]() {
      return this[_low] != this[_prevLow] || this[_high] != this[_prevHigh] || this[_rangeWidth] != this[_prevRangeWidth] || this[_minTickCount] != this[_prevMinTickCount] || this[_maxTickCount] != this[_prevMaxTickCount] || this.dataIsInWholeNumbers != this[_prevDataIsInWholeNumbers];
    }
    [_setPreviousTickCalculationParameters]() {
      this[_prevLow] = this[_low];
      this[_prevHigh] = this[_high];
      this[_prevRangeWidth] = this[_rangeWidth];
      this[_prevMinTickCount] = this[_minTickCount];
      this[_prevMaxTickCount] = this[_maxTickCount];
      this[_prevDataIsInWholeNumbers] = this.dataIsInWholeNumbers;
    }
    [_updateDomainExtents](axisExtents) {
      this[_low] = axisExtents.min;
      this[_high] = axisExtents.max;
      if (dart.test(this.zeroBound)) {
        this[_low] = dart.notNull(this[_low]) > 0.0 ? 0.0 : this[_low];
        this[_high] = dart.notNull(this[_high]) < 0.0 ? 0.0 : this[_high];
      }
      if (this[_high] == this[_low]) {
        if (this[_high] === 0.0) {
          this[_high] = 1.0;
        } else {
          if (dart.notNull(this[_high]) > 0.0) {
            this[_high] = dart.notNull(this[_high]) * 1.05;
            this[_low] = dart.notNull(this[_low]) * 0.95;
          } else {
            this[_high] = dart.notNull(this[_high]) * 0.95;
            this[_low] = dart.notNull(this[_low]) * 1.05;
          }
        }
      }
    }
    [_getStepsForTickCount](tickCount, high, low) {
      let regionCount = dart.notNull(tickCount) - 1;
      if (dart.notNull(high) >= 0 && dart.notNull(low) <= 0) {
        let posRegionRatio = dart.notNull(high) > 0 ? math.min(T$.doubleL(), 1.0, dart.notNull(high) / (dart.notNull(high) - dart.notNull(low))) : 0.0;
        let positiveRegionCount = (regionCount * posRegionRatio)[$ceil]();
        let negativeRegionCount = regionCount - positiveRegionCount;
        if (negativeRegionCount === 0 && dart.notNull(low) < 0 && regionCount > 1) {
          positiveRegionCount = positiveRegionCount - 1;
          negativeRegionCount = negativeRegionCount + 1;
        }
        if (!!(dart.notNull(low) < 0 && dart.notNull(high) > 0 && (negativeRegionCount === 0 || positiveRegionCount === 0))) dart.assertFailed("Numeric tick provider cannot generate " + dart.str(tickCount) + " " + "ticks when the axis range contains both positive and negative " + "values. A minimum of three ticks are required to include zero.", I[9], 433, 11, "!(low < 0 &&\n              high > 0 &&\n              (negativeRegionCount == 0 || positiveRegionCount == 0))");
        let favorPositive = (dart.notNull(high) > 0 ? dart.notNull(high) / positiveRegionCount : 0)[$abs]() > (dart.notNull(low) < 0 ? dart.notNull(low) / negativeRegionCount : 0)[$abs]();
        let favoredNum = (favorPositive ? high : low)[$abs]();
        let favoredRegionCount = favorPositive ? positiveRegionCount : negativeRegionCount;
        let favoredTensBase = numeric_tick_provider.NumericTickProvider._getEnclosingPowerOfTen(favoredNum)[$abs]();
        for (let step of this[_allowedSteps]) {
          let tmpStepSize = numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) * favoredTensBase);
          if (dart.test(this.dataIsInWholeNumbers) && tmpStepSize[$round]() !== tmpStepSize) {
            continue;
          }
          if (dart.notNull(tmpStepSize) * favoredRegionCount >= favoredNum) {
            let stepStart = negativeRegionCount > 0 ? -1 * dart.notNull(tmpStepSize) * negativeRegionCount : 0.0;
            return new numeric_tick_provider._TickStepInfo.new(tmpStepSize, stepStart);
          }
        }
      } else {
        let diffTensBase = numeric_tick_provider.NumericTickProvider._getEnclosingPowerOfTen(dart.notNull(high) - dart.notNull(low));
        for (let step of this[_allowedSteps]) {
          let tmpStepSize = numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) * dart.notNull(diffTensBase));
          if (dart.test(this.dataIsInWholeNumbers) && tmpStepSize[$round]() !== tmpStepSize) {
            continue;
          }
          let tmpStepStart = numeric_tick_provider.NumericTickProvider._getStepLessThan(low, tmpStepSize);
          if (dart.notNull(tmpStepStart) + dart.notNull(tmpStepSize) * regionCount >= dart.notNull(high)) {
            return new numeric_tick_provider._TickStepInfo.new(tmpStepSize, tmpStepStart);
          }
        }
      }
      return new numeric_tick_provider._TickStepInfo.new(1.0, low[$floorToDouble]());
    }
    [_getTickValues](steps, tickCount) {
      return (() => {
        let t1 = T$.JSArrayOfdoubleL().of([]);
        for (let i = 0; i < dart.notNull(tickCount); i = i + 1)
          t1[$add](this.dataToAxisUnitConverter.invert(numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(steps.tickStart) + i * dart.notNull(steps.stepSize))));
        return t1;
      })();
    }
    [_updateTickCounts](high, low) {
      let tmpMaxNumMajorTicks = null;
      let tmpMinNumMajorTicks = null;
      let absoluteMinTicks = dart.notNull(low) < 0 && 0 < dart.notNull(high) ? 3 : 2;
      if (this[_desiredMaxTickCount] != null) {
        tmpMinNumMajorTicks = math.max(T$.intL(), this[_desiredMinTickCount], absoluteMinTicks);
        tmpMaxNumMajorTicks = math.max(T$.intL(), this[_desiredMaxTickCount], tmpMinNumMajorTicks);
      } else {
        let minPixelsPerTick = (25)[$toDouble]();
        tmpMinNumMajorTicks = absoluteMinTicks;
        tmpMaxNumMajorTicks = math.max(T$.intL(), absoluteMinTicks, (dart.notNull(this[_rangeWidth]) / minPixelsPerTick)[$floor]());
      }
      if (tmpMaxNumMajorTicks != this[_maxTickCount] || tmpMinNumMajorTicks != this[_minTickCount]) {
        this[_maxTickCount] = tmpMaxNumMajorTicks;
        this[_minTickCount] = tmpMinNumMajorTicks;
      }
    }
    static _getEnclosingPowerOfTen(number) {
      if (number === 0) {
        return 1.0;
      }
      return math.pow(10, (0.4342944819032518 * math.log(number[$abs]()))[$ceil]()) * (dart.notNull(number) < 0.0 ? -1.0 : 1.0);
    }
    static _getStepLessThan(number, stepSize) {
      if (number === 0.0 || stepSize === 0.0) {
        return 0.0;
      }
      return (dart.notNull(stepSize) > 0.0 ? (dart.notNull(number) / dart.notNull(stepSize))[$floor]() : (dart.notNull(number) / dart.notNull(stepSize))[$ceil]()) * dart.notNull(stepSize);
    }
    static _removeRoundingErrors(number) {
      return dart.notNull(number) > 100.0 ? number[$roundToDouble]() : (dart.notNull(number) * 1000000000)[$roundToDouble]() / 1000000000;
    }
  };
  (numeric_tick_provider.NumericTickProvider.new = function() {
    this[zeroBound] = true;
    this[dataIsInWholeNumbers] = true;
    this[_desiredMaxTickCount] = null;
    this[_desiredMinTickCount] = null;
    this[_allowedSteps] = numeric_tick_provider.NumericTickProvider.DEFAULT_STEPS;
    this[dataToAxisUnitConverter] = C[6] || CT.C6;
    this[_low] = null;
    this[_high] = null;
    this[_rangeWidth] = null;
    this[_minTickCount] = null;
    this[_maxTickCount] = null;
    this[_prevLow] = null;
    this[_prevHigh] = null;
    this[_prevRangeWidth] = null;
    this[_prevMinTickCount] = null;
    this[_prevMaxTickCount] = null;
    this[_prevDataIsInWholeNumbers] = null;
    numeric_tick_provider.NumericTickProvider.__proto__.new.call(this);
    ;
  }).prototype = numeric_tick_provider.NumericTickProvider.prototype;
  dart.addTypeTests(numeric_tick_provider.NumericTickProvider);
  dart.addTypeCaches(numeric_tick_provider.NumericTickProvider);
  dart.setMethodSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getMethods(numeric_tick_provider.NumericTickProvider.__proto__),
    setFixedTickCount: dart.fnType(dart.void, [dart.legacy(core.int)]),
    setTickCount: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    [_getTicksFromHint]: dart.fnType(dart.legacy(core.List$(dart.legacy(tick.Tick$(dart.legacy(core.num))))), [], {context: dart.legacy(chart_context.ChartContext), formatter: dart.legacy(tick_formatter.TickFormatter$(dart.legacy(core.num))), formatterValueCache: dart.legacy(core.Map$(dart.legacy(core.num), dart.legacy(core.String))), graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory), scale: dart.legacy(numeric_scale.NumericScale), tickDrawStrategy: dart.legacy(tick_draw_strategy.TickDrawStrategy), tickHint: dart.legacy(tick_provider.TickHint$(dart.legacy(core.num)))}, {}),
    getTicks: dart.fnType(dart.legacy(core.List$(dart.legacy(tick.Tick$(dart.legacy(core.num))))), [], {context: dart.legacy(chart_context.ChartContext), formatter: dart.legacy(core.Object), formatterValueCache: dart.legacy(core.Object), graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory), orientation: dart.legacy(axis.AxisOrientation), scale: dart.legacy(core.Object), tickDrawStrategy: dart.legacy(tick_draw_strategy.TickDrawStrategy), tickHint: dart.legacy(core.Object), viewportExtensionEnabled: dart.legacy(core.bool)}, {}),
    [_hasTickParametersChanged]: dart.fnType(dart.legacy(core.bool), []),
    [_setPreviousTickCalculationParameters]: dart.fnType(dart.void, []),
    [_updateDomainExtents]: dart.fnType(dart.void, [dart.legacy(numeric_extents.NumericExtents)]),
    [_getStepsForTickCount]: dart.fnType(dart.legacy(numeric_tick_provider._TickStepInfo), [dart.legacy(core.int), dart.legacy(core.num), dart.legacy(core.num)]),
    [_getTickValues]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.double))), [dart.legacy(numeric_tick_provider._TickStepInfo), dart.legacy(core.int)]),
    [_updateTickCounts]: dart.fnType(dart.void, [dart.legacy(core.num), dart.legacy(core.num)])
  }));
  dart.setSetterSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getSetters(numeric_tick_provider.NumericTickProvider.__proto__),
    allowedSteps: dart.legacy(core.List$(dart.legacy(core.double)))
  }));
  dart.setLibraryUri(numeric_tick_provider.NumericTickProvider, I[10]);
  dart.setFieldSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getFields(numeric_tick_provider.NumericTickProvider.__proto__),
    zeroBound: dart.fieldType(dart.legacy(core.bool)),
    dataIsInWholeNumbers: dart.fieldType(dart.legacy(core.bool)),
    [_desiredMaxTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_desiredMinTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_allowedSteps]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    dataToAxisUnitConverter: dart.fieldType(dart.legacy(unit_converter.UnitConverter$(dart.legacy(core.num), dart.legacy(core.num)))),
    [_low]: dart.fieldType(dart.legacy(core.num)),
    [_high]: dart.fieldType(dart.legacy(core.num)),
    [_rangeWidth]: dart.fieldType(dart.legacy(core.int)),
    [_minTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_maxTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_prevLow]: dart.fieldType(dart.legacy(core.num)),
    [_prevHigh]: dart.fieldType(dart.legacy(core.num)),
    [_prevRangeWidth]: dart.fieldType(dart.legacy(core.int)),
    [_prevMinTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_prevMaxTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_prevDataIsInWholeNumbers]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(numeric_tick_provider.NumericTickProvider, {
    /*numeric_tick_provider.NumericTickProvider.MIN_DIPS_BETWEEN_TICKS*/get MIN_DIPS_BETWEEN_TICKS() {
      return 25;
    },
    /*numeric_tick_provider.NumericTickProvider.DEFAULT_STEPS*/get DEFAULT_STEPS() {
      return C[7] || CT.C7;
    }
  }, true);
  numeric_tick_provider._TickStepInfo = class _TickStepInfo extends core.Object {};
  (numeric_tick_provider._TickStepInfo.new = function(stepSize, tickStart) {
    this.stepSize = stepSize;
    this.tickStart = tickStart;
    ;
  }).prototype = numeric_tick_provider._TickStepInfo.prototype;
  dart.addTypeTests(numeric_tick_provider._TickStepInfo);
  dart.addTypeCaches(numeric_tick_provider._TickStepInfo);
  dart.setLibraryUri(numeric_tick_provider._TickStepInfo, I[10]);
  dart.setFieldSignature(numeric_tick_provider._TickStepInfo, () => ({
    __proto__: dart.getFields(numeric_tick_provider._TickStepInfo.__proto__),
    stepSize: dart.fieldType(dart.legacy(core.double)),
    tickStart: dart.fieldType(dart.legacy(core.double))
  }));
  var range = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.range");
  var keepViewportWithinData = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.keepViewportWithinData");
  var scalingFactor = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.scalingFactor");
  var translatePx = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.translatePx");
  var _domainExtent = dart.privateName(linear_scale_viewport, "_domainExtent");
  var _manualDomainExtent = dart.privateName(linear_scale_viewport, "_manualDomainExtent");
  linear_scale_viewport.LinearScaleViewportSettings = class LinearScaleViewportSettings extends core.Object {
    get range() {
      return this[range];
    }
    set range(value) {
      this[range] = value;
    }
    get keepViewportWithinData() {
      return this[keepViewportWithinData];
    }
    set keepViewportWithinData(value) {
      this[keepViewportWithinData] = value;
    }
    get scalingFactor() {
      return this[scalingFactor];
    }
    set scalingFactor(value) {
      this[scalingFactor] = value;
    }
    get translatePx() {
      return this[translatePx];
    }
    set translatePx(value) {
      this[translatePx] = value;
    }
    set domainExtent(extent) {
      this[_domainExtent] = extent;
      this[_manualDomainExtent] = extent != null;
    }
    get domainExtent() {
      return this[_domainExtent];
    }
    reset() {
      this.scalingFactor = 1.0;
      this.translatePx = 0.0;
      this.domainExtent = null;
    }
    get rangeWidth() {
      return this.range.diff[$abs]()[$toInt]();
    }
    isRangeValueWithinViewport(rangeValue) {
      return this.range.containsValue(rangeValue);
    }
    updateViewportScaleFactor(domainInfo) {
      let t2, t2$, t2$0, t2$1;
      if (dart.test(this[_manualDomainExtent])) {
        let viewportDomainDiff = (t2$ = (t2 = this[_domainExtent], t2 == null ? null : t2.width), t2$ == null ? null : t2$[$toDouble]());
        if (domainInfo.domainDiff !== 0.0) {
          this.scalingFactor = dart.notNull(domainInfo.domainDiff) / dart.notNull(viewportDomainDiff);
        } else {
          this.scalingFactor = 1.0;
          domainInfo.extendDomain((t2$0 = this[_domainExtent], t2$0 == null ? null : t2$0.min));
          domainInfo.extendDomain((t2$1 = this[_domainExtent], t2$1 == null ? null : t2$1.max));
        }
      }
      if (!dart.test(this.keepViewportWithinData)) {
        this.scalingFactor = math.max(T$.doubleL(), 1.0, this.scalingFactor);
      }
    }
    updateViewportTranslatePx(domainInfo, scaleScalingFactor) {
      if (dart.test(this[_manualDomainExtent])) {
        this.translatePx = -dart.notNull(scaleScalingFactor) * (dart.notNull(this[_domainExtent].min) - dart.notNull(domainInfo.extent.min));
      }
      if (!dart.test(this.keepViewportWithinData)) {
        let rangeDiff = this.range.diff[$toInt]();
        this.translatePx = math.min(T$.doubleL(), 0.0, this.translatePx);
        this.translatePx = math.max(T$.doubleL(), rangeDiff * (1.0 - dart.notNull(this.scalingFactor)), this.translatePx);
      }
    }
    updateViewportDomainExtent(domainInfo, scaleScalingFactor) {
      if (!dart.test(this[_manualDomainExtent])) {
        let viewportDomainDiff = dart.notNull(domainInfo.domainDiff) / dart.notNull(this.scalingFactor);
        let viewportStart = -dart.notNull(this.translatePx) / dart.notNull(scaleScalingFactor) + dart.notNull(domainInfo.extent.min);
        this[_domainExtent] = new numeric_extents.NumericExtents.new(viewportStart, viewportStart + viewportDomainDiff);
      }
    }
  };
  (linear_scale_viewport.LinearScaleViewportSettings.new = function() {
    this[range] = null;
    this[keepViewportWithinData] = true;
    this[scalingFactor] = 1.0;
    this[translatePx] = 0.0;
    this[_domainExtent] = null;
    this[_manualDomainExtent] = false;
    ;
  }).prototype = linear_scale_viewport.LinearScaleViewportSettings.prototype;
  (linear_scale_viewport.LinearScaleViewportSettings.copy = function(other) {
    this[range] = null;
    this[keepViewportWithinData] = true;
    this[scalingFactor] = 1.0;
    this[translatePx] = 0.0;
    this[_domainExtent] = null;
    this[_manualDomainExtent] = false;
    this.range = other.range;
    this.keepViewportWithinData = other.keepViewportWithinData;
    this.scalingFactor = other.scalingFactor;
    this.translatePx = other.translatePx;
    this[_manualDomainExtent] = other[_manualDomainExtent];
    this[_domainExtent] = other[_domainExtent];
  }).prototype = linear_scale_viewport.LinearScaleViewportSettings.prototype;
  dart.addTypeTests(linear_scale_viewport.LinearScaleViewportSettings);
  dart.addTypeCaches(linear_scale_viewport.LinearScaleViewportSettings);
  dart.setMethodSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getMethods(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    reset: dart.fnType(dart.void, []),
    isRangeValueWithinViewport: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    updateViewportScaleFactor: dart.fnType(dart.void, [dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo)]),
    updateViewportTranslatePx: dart.fnType(dart.void, [dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(core.double)]),
    updateViewportDomainExtent: dart.fnType(dart.void, [dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getGetters(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    domainExtent: dart.legacy(numeric_extents.NumericExtents),
    rangeWidth: dart.legacy(core.int)
  }));
  dart.setSetterSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getSetters(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    domainExtent: dart.legacy(numeric_extents.NumericExtents)
  }));
  dart.setLibraryUri(linear_scale_viewport.LinearScaleViewportSettings, I[11]);
  dart.setFieldSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getFields(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    range: dart.fieldType(dart.legacy(scale.ScaleOutputExtent)),
    keepViewportWithinData: dart.fieldType(dart.legacy(core.bool)),
    scalingFactor: dart.fieldType(dart.legacy(core.double)),
    translatePx: dart.fieldType(dart.legacy(core.double)),
    [_domainExtent]: dart.fieldType(dart.legacy(numeric_extents.NumericExtents)),
    [_manualDomainExtent]: dart.fieldType(dart.legacy(core.bool))
  }));
  var rangeBandPixels = dart.privateName(linear_scale_function, "LinearScaleFunction.rangeBandPixels");
  var domainTranslate = dart.privateName(linear_scale_function, "LinearScaleFunction.domainTranslate");
  var scalingFactor$ = dart.privateName(linear_scale_function, "LinearScaleFunction.scalingFactor");
  var rangeTranslate = dart.privateName(linear_scale_function, "LinearScaleFunction.rangeTranslate");
  var stepSizePixels = dart.privateName(linear_scale_function, "LinearScaleFunction.stepSizePixels");
  var _updateStepSizeAndScaleFactor = dart.privateName(linear_scale_function, "_updateStepSizeAndScaleFactor");
  var _calculateRangeBandSize = dart.privateName(linear_scale_function, "_calculateRangeBandSize");
  linear_scale_function.LinearScaleFunction = class LinearScaleFunction extends core.Object {
    get rangeBandPixels() {
      return this[rangeBandPixels];
    }
    set rangeBandPixels(value) {
      this[rangeBandPixels] = value;
    }
    get domainTranslate() {
      return this[domainTranslate];
    }
    set domainTranslate(value) {
      this[domainTranslate] = value;
    }
    get scalingFactor() {
      return this[scalingFactor$];
    }
    set scalingFactor(value) {
      this[scalingFactor$] = value;
    }
    get rangeTranslate() {
      return this[rangeTranslate];
    }
    set rangeTranslate(value) {
      this[rangeTranslate] = value;
    }
    get stepSizePixels() {
      return this[stepSizePixels];
    }
    set stepSizePixels(value) {
      this[stepSizePixels] = value;
    }
    _get(domainValue) {
      return ((dart.notNull(domainValue) + dart.notNull(this.domainTranslate)) * dart.notNull(this.scalingFactor) + dart.notNull(this.rangeTranslate))[$toDouble]();
    }
    reverse(viewPixels) {
      return (dart.notNull(viewPixels) - dart.notNull(this.rangeTranslate)) / dart.notNull(this.scalingFactor) - dart.notNull(this.domainTranslate);
    }
    updateScaleFactor(viewportSettings, domainInfo, rangeBandConfig, stepSizeConfig) {
      let rangeDiff = viewportSettings.range.diff[$toDouble]();
      let hasHalfStepAtStart = domainInfo.extent.min == domainInfo.dataDomainStart;
      let hasHalfStepAtEnd = domainInfo.extent.max == domainInfo.dataDomainEnd;
      let reservedRangePercentOfStep = this.getStepReservationPercent(hasHalfStepAtStart, hasHalfStepAtEnd);
      this[_updateStepSizeAndScaleFactor](viewportSettings, domainInfo, rangeDiff, reservedRangePercentOfStep, rangeBandConfig, stepSizeConfig);
    }
    getStepReservationPercent(hasHalfStepAtStart, hasHalfStepAtEnd) {
      if (!dart.test(hasHalfStepAtStart) && !dart.test(hasHalfStepAtEnd)) {
        return 0.0;
      }
      if (dart.test(hasHalfStepAtStart) && dart.test(hasHalfStepAtEnd)) {
        return 1.0;
      }
      return 0.5;
    }
    updateTranslateAndRangeBand(viewportSettings, domainInfo, rangeBandConfig) {
      if (domainInfo.domainDiff === 0) {
        this.rangeTranslate = dart.notNull(viewportSettings.range.start) + dart.notNull(viewportSettings.range.diff) / 2;
      } else {
        let hasHalfStepAtStart = domainInfo.extent.min == domainInfo.dataDomainStart;
        let reservedRangePixelShift = hasHalfStepAtStart ? dart.notNull(this.stepSizePixels) / 2.0 : 0.0;
        this.rangeTranslate = dart.notNull(viewportSettings.range.start) + dart.notNull(viewportSettings.translatePx) + reservedRangePixelShift;
      }
      this.domainTranslate = -1 * dart.notNull(domainInfo.extent.min);
      this.rangeBandPixels = this[_calculateRangeBandSize](rangeBandConfig);
    }
    [_calculateRangeBandSize](rangeBandConfig) {
      switch (rangeBandConfig.type) {
        case C[4] || CT.C4:
        {
          return dart.notNull(rangeBandConfig.size) * dart.notNull(this.scalingFactor);
        }
        case C[0] || CT.C0:
        {
          return rangeBandConfig.size;
        }
        case C[1] || CT.C1:
        {
          return dart.notNull(this.stepSizePixels) - dart.notNull(rangeBandConfig.size);
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          return dart.notNull(this.stepSizePixels) * dart.notNull(rangeBandConfig.size);
        }
        case C[5] || CT.C5:
        {
          return 0.0;
        }
      }
      return 0.0;
    }
    [_updateStepSizeAndScaleFactor](viewportSettings, domainInfo, rangeDiff, reservedRangePercentOfStep, rangeBandConfig, stepSizeConfig) {
      let domainDiff = domainInfo.domainDiff;
      if (rangeBandConfig.type != scale.RangeBandType.none) {
        switch (stepSizeConfig.type) {
          case C[8] || CT.C8:
          {
            let minimumDetectedDomainStep = domainInfo.minimumDetectedDomainStep[$toDouble]();
            if (minimumDetectedDomainStep !== null && minimumDetectedDomainStep[$isFinite]) {
              this.scalingFactor = dart.notNull(viewportSettings.scalingFactor) * (dart.notNull(rangeDiff) / (dart.notNull(domainDiff) + minimumDetectedDomainStep * dart.notNull(reservedRangePercentOfStep)));
              this.stepSizePixels = minimumDetectedDomainStep * dart.notNull(this.scalingFactor);
            } else {
              this.stepSizePixels = rangeDiff[$abs]();
              this.scalingFactor = 1.0;
            }
            return;
          }
          case C[9] || CT.C9:
          {
            this.stepSizePixels = stepSizeConfig.size;
            let reservedRangeForStepPixels = dart.notNull(this.stepSizePixels) * dart.notNull(reservedRangePercentOfStep);
            this.scalingFactor = domainDiff === 0 ? 1.0 : dart.notNull(viewportSettings.scalingFactor) * (dart.notNull(rangeDiff) - reservedRangeForStepPixels) / dart.notNull(domainDiff);
            return;
          }
          case C[10] || CT.C10:
          {
            let domainStepWidth = stepSizeConfig.size;
            let totalDomainDiff = dart.notNull(domainDiff) + dart.notNull(domainStepWidth) * dart.notNull(reservedRangePercentOfStep);
            this.scalingFactor = totalDomainDiff === 0 ? 1.0 : dart.notNull(viewportSettings.scalingFactor) * (dart.notNull(rangeDiff) / totalDomainDiff);
            this.stepSizePixels = dart.notNull(domainStepWidth) * dart.notNull(this.scalingFactor);
            return;
          }
        }
      }
      this.stepSizePixels = 0.0;
      this.scalingFactor = domainDiff === 0 ? 1.0 : dart.notNull(viewportSettings.scalingFactor) * dart.notNull(rangeDiff) / dart.notNull(domainDiff);
    }
  };
  (linear_scale_function.LinearScaleFunction.new = function() {
    this[rangeBandPixels] = 0.0;
    this[domainTranslate] = 0.0;
    this[scalingFactor$] = 1.0;
    this[rangeTranslate] = 0.0;
    this[stepSizePixels] = 0.0;
    ;
  }).prototype = linear_scale_function.LinearScaleFunction.prototype;
  dart.addTypeTests(linear_scale_function.LinearScaleFunction);
  dart.addTypeCaches(linear_scale_function.LinearScaleFunction);
  dart.setMethodSignature(linear_scale_function.LinearScaleFunction, () => ({
    __proto__: dart.getMethods(linear_scale_function.LinearScaleFunction.__proto__),
    _get: dart.fnType(dart.legacy(core.double), [dart.legacy(core.num)]),
    reverse: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    updateScaleFactor: dart.fnType(dart.void, [dart.legacy(linear_scale_viewport.LinearScaleViewportSettings), dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(scale.RangeBandConfig), dart.legacy(scale.StepSizeConfig)]),
    getStepReservationPercent: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool), dart.legacy(core.bool)]),
    updateTranslateAndRangeBand: dart.fnType(dart.void, [dart.legacy(linear_scale_viewport.LinearScaleViewportSettings), dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(scale.RangeBandConfig)]),
    [_calculateRangeBandSize]: dart.fnType(dart.legacy(core.double), [dart.legacy(scale.RangeBandConfig)]),
    [_updateStepSizeAndScaleFactor]: dart.fnType(dart.void, [dart.legacy(linear_scale_viewport.LinearScaleViewportSettings), dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(scale.RangeBandConfig), dart.legacy(scale.StepSizeConfig)])
  }));
  dart.setLibraryUri(linear_scale_function.LinearScaleFunction, I[12]);
  dart.setFieldSignature(linear_scale_function.LinearScaleFunction, () => ({
    __proto__: dart.getFields(linear_scale_function.LinearScaleFunction.__proto__),
    rangeBandPixels: dart.fieldType(dart.legacy(core.double)),
    domainTranslate: dart.fieldType(dart.legacy(core.num)),
    scalingFactor: dart.fieldType(dart.legacy(core.double)),
    rangeTranslate: dart.fieldType(dart.legacy(core.double)),
    stepSizePixels: dart.fieldType(dart.legacy(core.double))
  }));
  var domainOverride = dart.privateName(linear_scale_domain_info, "LinearScaleDomainInfo.domainOverride");
  var _dataDomainStart = dart.privateName(linear_scale_domain_info, "_dataDomainStart");
  var _dataDomainEnd = dart.privateName(linear_scale_domain_info, "_dataDomainEnd");
  var _previouslyAddedDomain = dart.privateName(linear_scale_domain_info, "_previouslyAddedDomain");
  var _minimumDetectedDomainStep = dart.privateName(linear_scale_domain_info, "_minimumDetectedDomainStep");
  linear_scale_domain_info.LinearScaleDomainInfo = class LinearScaleDomainInfo extends core.Object {
    get domainOverride() {
      return this[domainOverride];
    }
    set domainOverride(value) {
      this[domainOverride] = value;
    }
    get dataDomainStart() {
      return this[_dataDomainStart];
    }
    get dataDomainEnd() {
      return this[_dataDomainEnd];
    }
    get minimumDetectedDomainStep() {
      return this[_minimumDetectedDomainStep];
    }
    get domainDiff() {
      return this.extent.width;
    }
    reset() {
      this[_previouslyAddedDomain] = null;
      this[_dataDomainStart] = 1 / 0;
      this[_dataDomainEnd] = -1 / 0;
      this[_minimumDetectedDomainStep] = 1 / 0;
    }
    addDomainValue(domainValue) {
      if (domainValue == null || !domainValue[$isFinite]) {
        return;
      }
      this.extendDomain(domainValue);
      if (this[_previouslyAddedDomain] != null) {
        let domainStep = (dart.notNull(domainValue) - dart.notNull(this[_previouslyAddedDomain]))[$abs]();
        if (domainStep !== 0.0 && domainStep < dart.notNull(this.minimumDetectedDomainStep)) {
          this[_minimumDetectedDomainStep] = domainStep;
        }
      }
      this[_previouslyAddedDomain] = domainValue;
    }
    extendDomain(domainValue) {
      if (domainValue == null || !domainValue[$isFinite]) {
        return false;
      }
      let domainExtended = false;
      if (dart.notNull(domainValue) < dart.notNull(this[_dataDomainStart])) {
        this[_dataDomainStart] = domainValue;
        domainExtended = true;
      }
      if (dart.notNull(domainValue) > dart.notNull(this[_dataDomainEnd])) {
        this[_dataDomainEnd] = domainValue;
        domainExtended = true;
      }
      return domainExtended;
    }
    get extent() {
      let tmpDomainStart = null;
      let tmpDomainEnd = null;
      if (this.domainOverride != null) {
        tmpDomainStart = this.domainOverride.min;
        tmpDomainEnd = this.domainOverride.max;
      } else {
        tmpDomainStart = this[_dataDomainStart][$isFinite] ? this[_dataDomainStart] : 0.0;
        tmpDomainEnd = this[_dataDomainEnd][$isFinite] ? this[_dataDomainEnd] : 1.0;
      }
      return new numeric_extents.NumericExtents.new(tmpDomainStart, tmpDomainEnd);
    }
  };
  (linear_scale_domain_info.LinearScaleDomainInfo.new = function() {
    this[domainOverride] = null;
    this[_dataDomainStart] = 1 / 0;
    this[_dataDomainEnd] = -1 / 0;
    this[_previouslyAddedDomain] = null;
    this[_minimumDetectedDomainStep] = 1 / 0;
    ;
  }).prototype = linear_scale_domain_info.LinearScaleDomainInfo.prototype;
  (linear_scale_domain_info.LinearScaleDomainInfo.copy = function(other) {
    this[domainOverride] = null;
    this[_dataDomainStart] = 1 / 0;
    this[_dataDomainEnd] = -1 / 0;
    this[_previouslyAddedDomain] = null;
    this[_minimumDetectedDomainStep] = 1 / 0;
    if (other.domainOverride != null) {
      this.domainOverride = other.domainOverride;
    }
    this[_dataDomainStart] = other[_dataDomainStart];
    this[_dataDomainEnd] = other[_dataDomainEnd];
    this[_previouslyAddedDomain] = other[_previouslyAddedDomain];
    this[_minimumDetectedDomainStep] = other[_minimumDetectedDomainStep];
  }).prototype = linear_scale_domain_info.LinearScaleDomainInfo.prototype;
  dart.addTypeTests(linear_scale_domain_info.LinearScaleDomainInfo);
  dart.addTypeCaches(linear_scale_domain_info.LinearScaleDomainInfo);
  dart.setMethodSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getMethods(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    reset: dart.fnType(dart.void, []),
    addDomainValue: dart.fnType(dart.void, [dart.legacy(core.num)]),
    extendDomain: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.num)])
  }));
  dart.setGetterSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getGetters(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    dataDomainStart: dart.legacy(core.num),
    dataDomainEnd: dart.legacy(core.num),
    minimumDetectedDomainStep: dart.legacy(core.num),
    domainDiff: dart.legacy(core.num),
    extent: dart.legacy(numeric_extents.NumericExtents)
  }));
  dart.setLibraryUri(linear_scale_domain_info.LinearScaleDomainInfo, I[13]);
  dart.setFieldSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getFields(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    domainOverride: dart.fieldType(dart.legacy(numeric_extents.NumericExtents)),
    [_dataDomainStart]: dart.fieldType(dart.legacy(core.num)),
    [_dataDomainEnd]: dart.fieldType(dart.legacy(core.num)),
    [_previouslyAddedDomain]: dart.fieldType(dart.legacy(core.num)),
    [_minimumDetectedDomainStep]: dart.fieldType(dart.legacy(core.num))
  }));
  numeric_scale.NumericScale = class NumericScale extends scale.MutableScale$(dart.legacy(core.num)) {};
  (numeric_scale.NumericScale.new = function() {
    ;
  }).prototype = numeric_scale.NumericScale.prototype;
  dart.addTypeTests(numeric_scale.NumericScale);
  dart.addTypeCaches(numeric_scale.NumericScale);
  dart.setLibraryUri(numeric_scale.NumericScale, I[14]);
  var min$ = dart.privateName(numeric_extents, "NumericExtents.min");
  var max$ = dart.privateName(numeric_extents, "NumericExtents.max");
  var _containsValue = dart.privateName(numeric_extents, "_containsValue");
  numeric_extents.NumericExtents = class NumericExtents extends core.Object {
    get min() {
      return this[min$];
    }
    set min(value) {
      super.min = value;
    }
    get max() {
      return this[max$];
    }
    set max(value) {
      super.max = value;
    }
    static fromValues(values) {
      if (dart.test(values[$isEmpty])) {
        return numeric_extents.NumericExtents.empty;
      }
      let min = values[$first];
      let max = values[$first];
      for (let value of values) {
        if (dart.notNull(value) < dart.notNull(min)) {
          min = value;
        } else if (dart.notNull(max) < dart.notNull(value)) {
          max = value;
        }
      }
      return new numeric_extents.NumericExtents.new(min, max);
    }
    plus(other) {
      if (dart.notNull(this.min) <= dart.notNull(other.min)) {
        if (dart.notNull(this.max) >= dart.notNull(other.max)) {
          return this;
        } else {
          return new numeric_extents.NumericExtents.new(this.min, other.max);
        }
      } else {
        if (dart.notNull(other.max) >= dart.notNull(this.max)) {
          return other;
        } else {
          return new numeric_extents.NumericExtents.new(other.min, this.max);
        }
      }
    }
    compareValue(value) {
      if (dart.notNull(value) < dart.notNull(this.min)) {
        return -1;
      }
      if (dart.notNull(value) > dart.notNull(this.max)) {
        return 1;
      }
      return 0;
    }
    [_containsValue](value) {
      return this.compareValue(value) === 0;
    }
    overlaps(other) {
      return dart.test(this[_containsValue](other.min)) || dart.test(this[_containsValue](other.max)) || dart.test(other[_containsValue](this.min)) || dart.test(other[_containsValue](this.max));
    }
    _equals(other) {
      if (other == null) return false;
      return T$.NumericExtentsL().is(other) && this.min == other.min && this.max == other.max;
    }
    get hashCode() {
      return dart.hashCode(this.min) + dart.hashCode(this.max) * 31;
    }
    get width() {
      return dart.notNull(this.max) - dart.notNull(this.min);
    }
    toString() {
      return "Extent(" + dart.str(this.min) + ", " + dart.str(this.max) + ")";
    }
  };
  (numeric_extents.NumericExtents.new = function(min, max) {
    this[min$] = min;
    this[max$] = max;
    ;
  }).prototype = numeric_extents.NumericExtents.prototype;
  dart.addTypeTests(numeric_extents.NumericExtents);
  dart.addTypeCaches(numeric_extents.NumericExtents);
  numeric_extents.NumericExtents[dart.implements] = () => [scale.Extents$(dart.legacy(core.num))];
  dart.setMethodSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getMethods(numeric_extents.NumericExtents.__proto__),
    plus: dart.fnType(dart.legacy(numeric_extents.NumericExtents), [dart.legacy(numeric_extents.NumericExtents)]),
    compareValue: dart.fnType(dart.legacy(core.int), [dart.legacy(core.num)]),
    [_containsValue]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    overlaps: dart.fnType(dart.legacy(core.bool), [dart.legacy(numeric_extents.NumericExtents)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getGetters(numeric_extents.NumericExtents.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int),
    width: dart.legacy(core.num)
  }));
  dart.setLibraryUri(numeric_extents.NumericExtents, I[15]);
  dart.setFieldSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getFields(numeric_extents.NumericExtents.__proto__),
    min: dart.finalFieldType(dart.legacy(core.num)),
    max: dart.finalFieldType(dart.legacy(core.num))
  }));
  dart.defineExtensionMethods(numeric_extents.NumericExtents, ['_equals', 'toString']);
  dart.defineExtensionAccessors(numeric_extents.NumericExtents, ['hashCode']);
  dart.defineLazy(numeric_extents.NumericExtents, {
    /*numeric_extents.NumericExtents.unbounded*/get unbounded() {
      return C[11] || CT.C11;
    },
    /*numeric_extents.NumericExtents.empty*/get empty() {
      return C[12] || CT.C12;
    }
  }, true);
  var rangeBandConfig = dart.privateName(linear_scale, "LinearScale.rangeBandConfig");
  var stepSizeConfig = dart.privateName(linear_scale, "LinearScale.stepSizeConfig");
  var _scaleFunction = dart.privateName(linear_scale, "_scaleFunction");
  var RangeBandConfig_size = dart.privateName(scale, "RangeBandConfig.size");
  var RangeBandConfig_type = dart.privateName(scale, "RangeBandConfig.type");
  var StepSizeConfig_size = dart.privateName(scale, "StepSizeConfig.size");
  var StepSizeConfig_type = dart.privateName(scale, "StepSizeConfig.type");
  var _scaleReady = dart.privateName(linear_scale, "_scaleReady");
  var _domainInfo = dart.privateName(linear_scale, "_domainInfo");
  var _viewportSettings = dart.privateName(linear_scale, "_viewportSettings");
  var _configureScale = dart.privateName(linear_scale, "_configureScale");
  linear_scale.LinearScale = class LinearScale extends core.Object {
    get rangeBandConfig() {
      return this[rangeBandConfig];
    }
    set rangeBandConfig(value) {
      this[rangeBandConfig] = value;
    }
    get stepSizeConfig() {
      return this[stepSizeConfig];
    }
    set stepSizeConfig(value) {
      this[stepSizeConfig] = value;
    }
    copy() {
      return new linear_scale.LinearScale._copy(this);
    }
    addDomain(domainValue) {
      T$.numL().as(domainValue);
      this[_domainInfo].addDomainValue(domainValue);
    }
    resetDomain() {
      this[_scaleReady] = false;
      this[_domainInfo].reset();
    }
    resetViewportSettings() {
      this[_viewportSettings].reset();
    }
    get dataExtent() {
      return new numeric_extents.NumericExtents.new(this[_domainInfo].dataDomainStart, this[_domainInfo].dataDomainEnd);
    }
    get minimumDomainStep() {
      return this[_domainInfo].minimumDetectedDomainStep;
    }
    canTranslate(_) {
      T$.numL().as(_);
      return true;
    }
    set domainOverride(domainMaxExtent) {
      this[_domainInfo].domainOverride = domainMaxExtent;
    }
    get domainOverride() {
      return this[_domainInfo].domainOverride;
    }
    compareDomainValueToViewport(domainValue) {
      let t2;
      T$.numL().as(domainValue);
      let dataExtent = (t2 = this[_viewportSettings].domainExtent, t2 == null ? this[_domainInfo].extent : t2);
      return dataExtent.compareValue(domainValue);
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      let t2;
      t2 = this[_viewportSettings];
      (() => {
        t2.scalingFactor = viewportScale;
        t2.translatePx = viewportTranslatePx;
        t2.domainExtent = null;
        return t2;
      })();
      this[_scaleReady] = false;
    }
    get viewportScalingFactor() {
      return this[_viewportSettings].scalingFactor;
    }
    get viewportTranslatePx() {
      return this[_viewportSettings].translatePx;
    }
    set viewportDomain(extent) {
      this[_scaleReady] = false;
      this[_viewportSettings].domainExtent = extent;
    }
    get viewportDomain() {
      this[_configureScale]();
      return this[_viewportSettings].domainExtent;
    }
    set keepViewportWithinData(autoAdjustViewportToNiceValues) {
      this[_scaleReady] = false;
      this[_viewportSettings].keepViewportWithinData = true;
    }
    get keepViewportWithinData() {
      return this[_viewportSettings].keepViewportWithinData;
    }
    computeViewportScaleFactor(domainWindow) {
      return dart.notNull(this[_domainInfo].domainDiff) / dart.notNull(domainWindow);
    }
    set range(extent) {
      this[_viewportSettings].range = extent;
      this[_scaleReady] = false;
    }
    get range() {
      return this[_viewportSettings].range;
    }
    _get(domainValue) {
      T$.numL().as(domainValue);
      this[_configureScale]();
      return this[_scaleFunction]._get(domainValue);
    }
    reverse(viewPixels) {
      this[_configureScale]();
      let domain = this[_scaleFunction].reverse(viewPixels);
      return domain;
    }
    get rangeBand() {
      this[_configureScale]();
      return this[_scaleFunction].rangeBandPixels;
    }
    get stepSize() {
      this[_configureScale]();
      return this[_scaleFunction].stepSizePixels;
    }
    get domainStepSize() {
      return this[_domainInfo].minimumDetectedDomainStep[$toDouble]();
    }
    get rangeWidth() {
      return (dart.notNull(this.range.end) - dart.notNull(this.range.start))[$abs]()[$toInt]();
    }
    isRangeValueWithinViewport(rangeValue) {
      return this.range.containsValue(rangeValue);
    }
    [_configureScale]() {
      if (dart.test(this[_scaleReady])) return;
      if (!(this[_viewportSettings].range != null)) dart.assertFailed(null, I[16], 220, 12, "_viewportSettings.range != null");
      this[_viewportSettings].updateViewportScaleFactor(this[_domainInfo]);
      this[_scaleFunction].updateScaleFactor(this[_viewportSettings], this[_domainInfo], this.rangeBandConfig, this.stepSizeConfig);
      this[_viewportSettings].updateViewportTranslatePx(this[_domainInfo], this[_scaleFunction].scalingFactor);
      this[_scaleFunction].updateTranslateAndRangeBand(this[_viewportSettings], this[_domainInfo], this.rangeBandConfig);
      this[_viewportSettings].updateViewportDomainExtent(this[_domainInfo], this[_scaleFunction].scalingFactor);
      this[_scaleReady] = true;
    }
  };
  (linear_scale.LinearScale.new = function() {
    this[_scaleFunction] = new linear_scale_function.LinearScaleFunction.new();
    this[rangeBandConfig] = C[13] || CT.C13;
    this[stepSizeConfig] = C[14] || CT.C14;
    this[_scaleReady] = false;
    this[_domainInfo] = new linear_scale_domain_info.LinearScaleDomainInfo.new();
    this[_viewportSettings] = new linear_scale_viewport.LinearScaleViewportSettings.new();
    ;
  }).prototype = linear_scale.LinearScale.prototype;
  (linear_scale.LinearScale._copy = function(other) {
    this[_scaleFunction] = new linear_scale_function.LinearScaleFunction.new();
    this[_scaleReady] = false;
    this[_domainInfo] = new linear_scale_domain_info.LinearScaleDomainInfo.copy(other[_domainInfo]);
    this[_viewportSettings] = new linear_scale_viewport.LinearScaleViewportSettings.copy(other[_viewportSettings]);
    this[rangeBandConfig] = other.rangeBandConfig;
    this[stepSizeConfig] = other.stepSizeConfig;
    ;
  }).prototype = linear_scale.LinearScale.prototype;
  dart.addTypeTests(linear_scale.LinearScale);
  dart.addTypeCaches(linear_scale.LinearScale);
  linear_scale.LinearScale[dart.implements] = () => [numeric_scale.NumericScale];
  dart.setMethodSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getMethods(linear_scale.LinearScale.__proto__),
    copy: dart.fnType(dart.legacy(linear_scale.LinearScale), []),
    addDomain: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    resetDomain: dart.fnType(dart.void, []),
    resetViewportSettings: dart.fnType(dart.void, []),
    canTranslate: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    compareDomainValueToViewport: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    setViewportSettings: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    computeViewportScaleFactor: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    _get: dart.fnType(dart.legacy(core.num), [dart.legacy(core.Object)]),
    reverse: dart.fnType(dart.legacy(core.num), [dart.legacy(core.double)]),
    isRangeValueWithinViewport: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    [_configureScale]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getGetters(linear_scale.LinearScale.__proto__),
    dataExtent: dart.legacy(numeric_extents.NumericExtents),
    minimumDomainStep: dart.legacy(core.num),
    domainOverride: dart.legacy(numeric_extents.NumericExtents),
    viewportScalingFactor: dart.legacy(core.double),
    viewportTranslatePx: dart.legacy(core.double),
    viewportDomain: dart.legacy(numeric_extents.NumericExtents),
    keepViewportWithinData: dart.legacy(core.bool),
    range: dart.legacy(scale.ScaleOutputExtent),
    rangeBand: dart.legacy(core.double),
    stepSize: dart.legacy(core.double),
    domainStepSize: dart.legacy(core.double),
    rangeWidth: dart.legacy(core.int)
  }));
  dart.setSetterSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getSetters(linear_scale.LinearScale.__proto__),
    domainOverride: dart.legacy(numeric_extents.NumericExtents),
    viewportDomain: dart.legacy(numeric_extents.NumericExtents),
    keepViewportWithinData: dart.legacy(core.bool),
    range: dart.legacy(scale.ScaleOutputExtent)
  }));
  dart.setLibraryUri(linear_scale.LinearScale, I[17]);
  dart.setFieldSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getFields(linear_scale.LinearScale.__proto__),
    [_domainInfo]: dart.finalFieldType(dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo)),
    [_viewportSettings]: dart.finalFieldType(dart.legacy(linear_scale_viewport.LinearScaleViewportSettings)),
    [_scaleFunction]: dart.finalFieldType(dart.legacy(linear_scale_function.LinearScaleFunction)),
    rangeBandConfig: dart.fieldType(dart.legacy(scale.RangeBandConfig)),
    stepSizeConfig: dart.fieldType(dart.legacy(scale.StepSizeConfig)),
    [_scaleReady]: dart.fieldType(dart.legacy(core.bool))
  }));
  var labelStyle$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelStyle");
  var labelAnchor$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelAnchor");
  var labelJustification$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelJustification");
  var labelOffsetFromAxisPx$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromAxisPx");
  var labelOffsetFromTickPx$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromTickPx");
  var minimumPaddingBetweenLabelsPx$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.minimumPaddingBetweenLabelsPx");
  var labelRotation$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelRotation");
  var axisLineStyle$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.axisLineStyle");
  const _is_BaseRenderSpec_default = Symbol('_is_BaseRenderSpec_default');
  base_tick_draw_strategy.BaseRenderSpec$ = dart.generic(D => {
    class BaseRenderSpec extends core.Object {
      get labelStyle() {
        return this[labelStyle$];
      }
      set labelStyle(value) {
        super.labelStyle = value;
      }
      get labelAnchor() {
        return this[labelAnchor$];
      }
      set labelAnchor(value) {
        super.labelAnchor = value;
      }
      get labelJustification() {
        return this[labelJustification$];
      }
      set labelJustification(value) {
        super.labelJustification = value;
      }
      get labelOffsetFromAxisPx() {
        return this[labelOffsetFromAxisPx$];
      }
      set labelOffsetFromAxisPx(value) {
        super.labelOffsetFromAxisPx = value;
      }
      get labelOffsetFromTickPx() {
        return this[labelOffsetFromTickPx$];
      }
      set labelOffsetFromTickPx(value) {
        super.labelOffsetFromTickPx = value;
      }
      get minimumPaddingBetweenLabelsPx() {
        return this[minimumPaddingBetweenLabelsPx$];
      }
      set minimumPaddingBetweenLabelsPx(value) {
        super.minimumPaddingBetweenLabelsPx = value;
      }
      get labelRotation() {
        return this[labelRotation$];
      }
      set labelRotation(value) {
        super.labelRotation = value;
      }
      get axisLineStyle() {
        return this[axisLineStyle$];
      }
      set axisLineStyle(value) {
        super.axisLineStyle = value;
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || T$.BaseRenderSpecL().is(other) && dart.equals(this.labelStyle, other.labelStyle) && this.labelAnchor == other.labelAnchor && this.labelJustification == other.labelJustification && this.labelOffsetFromTickPx == other.labelOffsetFromTickPx && this.labelOffsetFromAxisPx == other.labelOffsetFromAxisPx && this.minimumPaddingBetweenLabelsPx == other.minimumPaddingBetweenLabelsPx && this.labelRotation == other.labelRotation && dart.equals(this.axisLineStyle, other.axisLineStyle);
      }
      get hashCode() {
        let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10, t2$11, t2$12, t2$13;
        let hashcode = (t2$ = (t2 = this.labelStyle, t2 == null ? null : dart.hashCode(t2)), t2$ == null ? 0 : t2$);
        hashcode = (t2$1 = dart.notNull(hashcode) * 37 + dart.notNull((t2$0 = this.labelAnchor, t2$0 == null ? null : dart.hashCode(t2$0))), t2$1 === null ? 0 : t2$1);
        hashcode = (t2$3 = dart.notNull(hashcode) * 37 + dart.notNull((t2$2 = this.labelJustification, t2$2 == null ? null : dart.hashCode(t2$2))), t2$3 === null ? 0 : t2$3);
        hashcode = (t2$5 = dart.notNull(hashcode) * 37 + dart.notNull((t2$4 = this.labelOffsetFromTickPx, t2$4 == null ? null : dart.hashCode(t2$4))), t2$5 === null ? 0 : t2$5);
        hashcode = (t2$7 = dart.notNull(hashcode) * 37 + dart.notNull((t2$6 = this.labelOffsetFromAxisPx, t2$6 == null ? null : dart.hashCode(t2$6))), t2$7 === null ? 0 : t2$7);
        hashcode = (t2$9 = dart.notNull(hashcode) * 37 + dart.notNull((t2$8 = this.minimumPaddingBetweenLabelsPx, t2$8 == null ? null : dart.hashCode(t2$8))), t2$9 === null ? 0 : t2$9);
        hashcode = (t2$11 = dart.notNull(hashcode) * 37 + dart.notNull((t2$10 = this.labelRotation, t2$10 == null ? null : dart.hashCode(t2$10))), t2$11 === null ? 0 : t2$11);
        hashcode = (t2$13 = dart.notNull(hashcode) * 37 + dart.notNull((t2$12 = this.axisLineStyle, t2$12 == null ? null : dart.hashCode(t2$12))), t2$13 === null ? 0 : t2$13);
        return hashcode;
      }
    }
    (BaseRenderSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      this[labelStyle$] = labelStyle;
      this[labelAnchor$] = labelAnchor;
      this[labelJustification$] = labelJustification;
      this[labelOffsetFromAxisPx$] = labelOffsetFromAxisPx;
      this[labelOffsetFromTickPx$] = labelOffsetFromTickPx;
      this[minimumPaddingBetweenLabelsPx$] = minimumPaddingBetweenLabelsPx;
      this[labelRotation$] = labelRotation;
      this[axisLineStyle$] = axisLineStyle;
      ;
    }).prototype = BaseRenderSpec.prototype;
    dart.addTypeTests(BaseRenderSpec);
    BaseRenderSpec.prototype[_is_BaseRenderSpec_default] = true;
    dart.addTypeCaches(BaseRenderSpec);
    BaseRenderSpec[dart.implements] = () => [axis_spec.RenderSpec$(dart.legacy(D))];
    dart.setMethodSignature(BaseRenderSpec, () => ({
      __proto__: dart.getMethods(BaseRenderSpec.__proto__),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(BaseRenderSpec, () => ({
      __proto__: dart.getGetters(BaseRenderSpec.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(BaseRenderSpec, I[18]);
    dart.setFieldSignature(BaseRenderSpec, () => ({
      __proto__: dart.getFields(BaseRenderSpec.__proto__),
      labelStyle: dart.finalFieldType(dart.legacy(axis_spec.TextStyleSpec)),
      labelAnchor: dart.finalFieldType(dart.legacy(axis_spec.TickLabelAnchor)),
      labelJustification: dart.finalFieldType(dart.legacy(axis_spec.TickLabelJustification)),
      labelOffsetFromAxisPx: dart.finalFieldType(dart.legacy(core.int)),
      labelOffsetFromTickPx: dart.finalFieldType(dart.legacy(core.int)),
      minimumPaddingBetweenLabelsPx: dart.finalFieldType(dart.legacy(core.int)),
      labelRotation: dart.finalFieldType(dart.legacy(core.int)),
      axisLineStyle: dart.finalFieldType(dart.legacy(axis_spec.LineStyleSpec))
    }));
    dart.defineExtensionMethods(BaseRenderSpec, ['_equals']);
    dart.defineExtensionAccessors(BaseRenderSpec, ['hashCode']);
    return BaseRenderSpec;
  });
  base_tick_draw_strategy.BaseRenderSpec = base_tick_draw_strategy.BaseRenderSpec$();
  dart.addTypeTests(base_tick_draw_strategy.BaseRenderSpec, _is_BaseRenderSpec_default);
  var chartContext$ = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.chartContext");
  var graphicsFactory$ = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.graphicsFactory");
  var axisLineStyle = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.axisLineStyle");
  var labelStyle = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelStyle");
  var tickLabelAnchor = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.tickLabelAnchor");
  var tickLabelJustification = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.tickLabelJustification");
  var labelOffsetFromAxisPx$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelOffsetFromAxisPx");
  var labelOffsetFromTickPx$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelOffsetFromTickPx");
  var minimumPaddingBetweenLabelsPx$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.minimumPaddingBetweenLabelsPx");
  var labelRotation$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelRotation");
  var _normalizeHorizontalAnchor = dart.privateName(base_tick_draw_strategy, "_normalizeHorizontalAnchor");
  var _name = dart.privateName(text_element, "_name");
  var _name$0 = dart.privateName(axis, "_name");
  var _name$1 = dart.privateName(base_tick_draw_strategy, "_name");
  var _normalizeVerticalAnchor = dart.privateName(base_tick_draw_strategy, "_normalizeVerticalAnchor");
  var _name$2 = dart.privateName(axis_spec, "_name");
  const _is_BaseTickDrawStrategy_default = Symbol('_is_BaseTickDrawStrategy_default');
  base_tick_draw_strategy.BaseTickDrawStrategy$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var TickOfDL = () => (TickOfDL = dart.constFn(tick.Tick$(DL())))();
    var TickLOfDL = () => (TickLOfDL = dart.constFn(dart.legacy(TickOfDL())))();
    var ListOfTickLOfDL = () => (ListOfTickLOfDL = dart.constFn(core.List$(TickLOfDL())))();
    var ListLOfTickLOfDL = () => (ListLOfTickLOfDL = dart.constFn(dart.legacy(ListOfTickLOfDL())))();
    var TickLOfDLAndTickLOfDLTointL = () => (TickLOfDLAndTickLOfDLTointL = dart.constFn(dart.fnType(T$.intL(), [TickLOfDL(), TickLOfDL()])))();
    var doubleLAndTickLOfDLTodoubleL = () => (doubleLAndTickLOfDLTodoubleL = dart.constFn(dart.fnType(T$.doubleL(), [T$.doubleL(), TickLOfDL()])))();
    class BaseTickDrawStrategy extends core.Object {
      get chartContext() {
        return this[chartContext$];
      }
      set chartContext(value) {
        super.chartContext = value;
      }
      get graphicsFactory() {
        return this[graphicsFactory$];
      }
      set graphicsFactory(value) {
        super.graphicsFactory = value;
      }
      get axisLineStyle() {
        return this[axisLineStyle];
      }
      set axisLineStyle(value) {
        this[axisLineStyle] = value;
      }
      get labelStyle() {
        return this[labelStyle];
      }
      set labelStyle(value) {
        this[labelStyle] = value;
      }
      get tickLabelAnchor() {
        return this[tickLabelAnchor];
      }
      set tickLabelAnchor(value) {
        this[tickLabelAnchor] = value;
      }
      get tickLabelJustification() {
        return this[tickLabelJustification];
      }
      set tickLabelJustification(value) {
        this[tickLabelJustification] = value;
      }
      get labelOffsetFromAxisPx() {
        return this[labelOffsetFromAxisPx$0];
      }
      set labelOffsetFromAxisPx(value) {
        this[labelOffsetFromAxisPx$0] = value;
      }
      get labelOffsetFromTickPx() {
        return this[labelOffsetFromTickPx$0];
      }
      set labelOffsetFromTickPx(value) {
        this[labelOffsetFromTickPx$0] = value;
      }
      get minimumPaddingBetweenLabelsPx() {
        return this[minimumPaddingBetweenLabelsPx$0];
      }
      set minimumPaddingBetweenLabelsPx(value) {
        this[minimumPaddingBetweenLabelsPx$0] = value;
      }
      get labelRotation() {
        return this[labelRotation$0];
      }
      set labelRotation(value) {
        this[labelRotation$0] = value;
      }
      static _degToRad(deg) {
        return dart.notNull(deg) * (3.141592653589793 / 180.0);
      }
      decorateTicks(ticks) {
        let t2, t2$, t2$0, t2$1;
        ListLOfTickLOfDL().as(ticks);
        for (let tick of ticks) {
          if (tick.textElement.textStyle == null) {
            tick.textElement.textStyle = this.labelStyle;
          } else {
            t2 = tick.textElement.textStyle;
            t2.color == null ? t2.color = this.labelStyle.color : null;
            t2$ = tick.textElement.textStyle;
            t2$.fontFamily == null ? t2$.fontFamily = this.labelStyle.fontFamily : null;
            t2$0 = tick.textElement.textStyle;
            t2$0.fontSize == null ? t2$0.fontSize = this.labelStyle.fontSize : null;
            t2$1 = tick.textElement.textStyle;
            t2$1.lineHeight == null ? t2$1.lineHeight = this.labelStyle.lineHeight : null;
          }
        }
      }
      collides(ticks, orientation) {
        ListLOfTickLOfDL().as(ticks);
        if (ticks == null) {
          return new collision_report.CollisionReport.new({ticksCollide: false, ticks: ticks, alternateTicksUsed: false});
        }
        let vertical = orientation == axis.AxisOrientation.left || orientation == axis.AxisOrientation.right;
        ticks[$sort](dart.fn((a, b) => {
          if (dart.notNull(a.locationPx) < dart.notNull(b.locationPx)) {
            return -1;
          } else if (dart.notNull(a.locationPx) > dart.notNull(b.locationPx)) {
            return 1;
          } else {
            return 0;
          }
        }, TickLOfDLAndTickLOfDLTointL()));
        let previousEnd = -1 / 0;
        let collides = false;
        for (let tick of ticks) {
          let tickSize = tick.textElement.measurement;
          if (vertical) {
            let adjustedHeight = dart.notNull(tickSize.verticalSliceWidth) + dart.notNull(this.minimumPaddingBetweenLabelsPx);
            if (this.tickLabelAnchor == axis_spec.TickLabelAnchor.inside) {
              if (tick == ticks[$first]) {
                collides = false;
                previousEnd = dart.notNull(tick.locationPx) + adjustedHeight;
              } else if (tick == ticks[$last]) {
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - adjustedHeight;
                previousEnd = tick.locationPx;
              } else {
                let halfHeight = adjustedHeight / 2;
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - halfHeight;
                previousEnd = dart.notNull(tick.locationPx) + halfHeight;
              }
            } else {
              collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx);
              previousEnd = dart.notNull(tick.locationPx) + adjustedHeight;
            }
          } else {
            let textDirection = this[_normalizeHorizontalAnchor](this.tickLabelAnchor, this.chartContext.isRtl, tick == ticks[$first], tick == ticks[$last]);
            let adjustedWidth = dart.notNull(tickSize.horizontalSliceWidth) + dart.notNull(this.minimumPaddingBetweenLabelsPx);
            switch (textDirection) {
              case C[15] || CT.C15:
              {
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx);
                previousEnd = dart.notNull(tick.locationPx) + adjustedWidth;
                break;
              }
              case C[16] || CT.C16:
              {
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - adjustedWidth;
                previousEnd = tick.locationPx;
                break;
              }
              case C[17] || CT.C17:
              {
                let halfWidth = adjustedWidth / 2;
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - halfWidth;
                previousEnd = dart.notNull(tick.locationPx) + halfWidth;
                break;
              }
            }
          }
          if (collides) {
            return new collision_report.CollisionReport.new({ticksCollide: true, ticks: ticks, alternateTicksUsed: false});
          }
        }
        return new collision_report.CollisionReport.new({ticksCollide: false, ticks: ticks, alternateTicksUsed: false});
      }
      measureVerticallyDrawnTicks(ticks, maxWidth, maxHeight) {
        ListLOfTickLOfDL().as(ticks);
        let maxHorizontalSliceWidth = ticks[$fold](T$.doubleL(), 0.0, dart.fn((prevMax, tick) => {
          let labelElements = this.splitLabel(tick.textElement);
          return math.max(T$.doubleL(), prevMax, dart.notNull(this.calculateWidthForRotatedLabel(this.labelRotation, this.getLabelHeight(labelElements), this.getLabelWidth(labelElements))) + dart.notNull(this.labelOffsetFromAxisPx));
        }, doubleLAndTickLOfDLTodoubleL()))[$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxHorizontalSliceWidth, preferredHeight: maxHeight});
      }
      measureHorizontallyDrawnTicks(ticks, maxWidth, maxHeight) {
        ListLOfTickLOfDL().as(ticks);
        let maxVerticalSliceWidth = ticks[$fold](T$.doubleL(), 0.0, dart.fn((prevMax, tick) => {
          let labelElements = this.splitLabel(tick.textElement);
          return math.max(T$.doubleL(), prevMax, this.calculateHeightForRotatedLabel(this.labelRotation, this.getLabelHeight(labelElements), this.getLabelWidth(labelElements)));
        }, doubleLAndTickLOfDLTodoubleL()))[$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxWidth, preferredHeight: maxVerticalSliceWidth + dart.notNull(this.labelOffsetFromAxisPx)});
      }
      drawAxisLine(canvas, orientation, axisBounds) {
        let start = null;
        let end = null;
        switch (orientation) {
          case C[18] || CT.C18:
          {
            start = axisBounds[$bottomLeft];
            end = axisBounds[$bottomRight];
            break;
          }
          case C[19] || CT.C19:
          {
            start = axisBounds[$topLeft];
            end = axisBounds[$topRight];
            break;
          }
          case C[20] || CT.C20:
          {
            start = axisBounds[$topLeft];
            end = axisBounds[$bottomLeft];
            break;
          }
          case C[21] || CT.C21:
          {
            start = axisBounds[$topRight];
            end = axisBounds[$bottomRight];
            break;
          }
        }
        canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([start, end]), fill: this.axisLineStyle.color, stroke: this.axisLineStyle.color, strokeWidthPx: this.axisLineStyle.strokeWidth[$toDouble](), dashPattern: this.axisLineStyle.dashPattern});
      }
      drawLabel(canvas, tick, opts) {
        let t2;
        TickLOfDL().as(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let locationPx = tick.locationPx;
        let labelOffsetPx = (t2 = tick.labelOffsetPx, t2 == null ? 0.0 : t2);
        let isRtl = this.chartContext.isRtl;
        let labelElements = this.splitLabel(tick.textElement);
        let labelHeight = this.getLabelHeight(labelElements);
        let multiLineLabelOffset = 0;
        for (let line of labelElements) {
          let x = 0;
          let y = 0;
          if (orientation == axis.AxisOrientation.bottom || orientation == axis.AxisOrientation.top) {
            y = orientation == axis.AxisOrientation.bottom ? dart.notNull(axisBounds[$top]) + dart.notNull(this.labelOffsetFromAxisPx) : dart.notNull(axisBounds[$bottom]) - (labelHeight[$toInt]() - multiLineLabelOffset) - dart.notNull(this.labelOffsetFromAxisPx);
            let direction = this[_normalizeHorizontalAnchor](this.tickLabelAnchor, isRtl, isFirst, isLast);
            line.textDirection = direction;
            switch (direction) {
              case C[16] || CT.C16:
              {
                x = (dart.notNull(locationPx) + dart.notNull(this.labelOffsetFromTickPx) + dart.notNull(labelOffsetPx))[$toInt]();
                break;
              }
              case C[15] || CT.C15:
              {
                x = (dart.notNull(locationPx) - dart.notNull(this.labelOffsetFromTickPx) - dart.notNull(labelOffsetPx))[$toInt]();
                break;
              }
              case C[17] || CT.C17:
              default:
              {
                x = (dart.notNull(locationPx) - dart.notNull(labelOffsetPx))[$toInt]();
                break;
              }
            }
          } else {
            if (orientation == axis.AxisOrientation.left) {
              if (this.tickLabelJustification == axis_spec.TickLabelJustification.inside) {
                x = dart.notNull(axisBounds[$right]) - dart.notNull(this.labelOffsetFromAxisPx);
                line.textDirection = text_element.TextDirection.rtl;
              } else {
                x = axisBounds[$left];
                line.textDirection = text_element.TextDirection.ltr;
              }
            } else {
              if (this.tickLabelJustification == axis_spec.TickLabelJustification.inside) {
                x = dart.notNull(axisBounds[$left]) + dart.notNull(this.labelOffsetFromAxisPx);
                line.textDirection = text_element.TextDirection.ltr;
              } else {
                x = axisBounds[$right];
                line.textDirection = text_element.TextDirection.rtl;
              }
            }
            switch (this[_normalizeVerticalAnchor](this.tickLabelAnchor, isFirst, isLast)) {
              case C[22] || CT.C22:
              {
                y = (dart.notNull(locationPx) - (dart.notNull(labelHeight) - multiLineLabelOffset) - dart.notNull(this.labelOffsetFromTickPx) - dart.notNull(labelOffsetPx))[$toInt]();
                break;
              }
              case C[23] || CT.C23:
              {
                y = (dart.notNull(locationPx) + dart.notNull(this.labelOffsetFromTickPx) + dart.notNull(labelOffsetPx))[$toInt]();
                break;
              }
              case C[24] || CT.C24:
              default:
              {
                y = (dart.notNull(locationPx) - dart.notNull(labelHeight) / 2 + dart.notNull(labelOffsetPx))[$toInt]();
                break;
              }
            }
          }
          canvas.drawText(line, x, y + multiLineLabelOffset, {rotation: base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(this.labelRotation)});
          multiLineLabelOffset = multiLineLabelOffset + (dart.notNull(base_tick_draw_strategy.BaseTickDrawStrategy.multiLineLabelPadding) + line.measurement.verticalSliceWidth[$round]());
        }
      }
      [_normalizeHorizontalAnchor](anchor, isRtl, isFirst, isLast) {
        switch (anchor) {
          case C[25] || CT.C25:
          {
            return dart.test(isRtl) ? text_element.TextDirection.ltr : text_element.TextDirection.rtl;
          }
          case C[26] || CT.C26:
          {
            return dart.test(isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
          }
          case C[27] || CT.C27:
          {
            if (dart.test(isFirst)) {
              return text_element.TextDirection.ltr;
            }
            if (dart.test(isLast)) {
              return text_element.TextDirection.rtl;
            }
            return text_element.TextDirection.center;
          }
          case C[28] || CT.C28:
          default:
          {
            return text_element.TextDirection.center;
          }
        }
      }
      [_normalizeVerticalAnchor](anchor, isFirst, isLast) {
        switch (anchor) {
          case C[25] || CT.C25:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.under;
          }
          case C[26] || CT.C26:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.over;
          }
          case C[27] || CT.C27:
          {
            if (dart.test(isFirst)) {
              return base_tick_draw_strategy._PixelVerticalDirection.over;
            }
            if (dart.test(isLast)) {
              return base_tick_draw_strategy._PixelVerticalDirection.under;
            }
            return base_tick_draw_strategy._PixelVerticalDirection.center;
          }
          case C[28] || CT.C28:
          default:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.center;
          }
        }
      }
      calculateWidthForRotatedLabel(rotation, labelHeight, labelLength) {
        if (rotation === 0) return labelLength;
        let rotationRadian = base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(rotation);
        labelLength = dart.notNull(labelLength) + dart.notNull(labelHeight) / 2.0 * math.tan(rotationRadian);
        return dart.notNull(labelLength) * math.cos(rotationRadian);
      }
      calculateHeightForRotatedLabel(rotation, labelHeight, labelLength) {
        if (rotation === 0) return labelHeight;
        let rotationRadian = base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(rotation);
        labelLength = dart.notNull(labelLength) + dart.notNull(labelHeight) / 2.0 * math.tan(rotationRadian);
        let angle = 3.141592653589793 / 2.0 - rotationRadian[$abs]();
        return dart.notNull(labelLength) * math.cos(angle);
      }
      splitLabel(wholeLabel) {
        return wholeLabel.text[$split](base_tick_draw_strategy.BaseTickDrawStrategy._labelSplitPattern)[$map](T$.TextElementL(), dart.fn(line => {
          let t2;
          t2 = this.graphicsFactory.createTextElement(line[$trim]());
          return (() => {
            t2.textStyle = wholeLabel.textStyle;
            return t2;
          })();
        }, T$.StringLToTextElementL()))[$toList]();
      }
      getLabelWidth(labelElements) {
        return labelElements[$map](T$.doubleL(), dart.fn(line => line.measurement.horizontalSliceWidth, T$.TextElementLTodoubleL()))[$reduce](dart.gbind(C[29] || CT.C29, T$.doubleL()));
      }
      getLabelHeight(labelElements) {
        if (dart.test(labelElements[$isEmpty])) return 0.0;
        let textHeight = labelElements[$first].measurement.verticalSliceWidth;
        let numLines = labelElements[$length];
        return dart.notNull(textHeight) * dart.notNull(numLines) + dart.notNull(base_tick_draw_strategy.BaseTickDrawStrategy.multiLineLabelPadding) * (dart.notNull(numLines) - 1);
      }
    }
    (BaseTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t3, t3$, t3$0, t3$1, t3$2, t3$3, t2, t3$4, t3$5, t3$6, t3$7, t3$8, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[axisLineStyle] = null;
      this[labelStyle] = null;
      this[tickLabelAnchor] = null;
      this[tickLabelJustification] = null;
      this[labelOffsetFromAxisPx$0] = null;
      this[labelOffsetFromTickPx$0] = null;
      this[minimumPaddingBetweenLabelsPx$0] = null;
      this[labelRotation$0] = null;
      this[chartContext$] = chartContext;
      this[graphicsFactory$] = graphicsFactory;
      this.labelStyle = (t2 = this.graphicsFactory.createTextPaint(), (() => {
        t2.color = (t3$ = (t3 = labelStyleSpec, t3 == null ? null : t3.color), t3$ == null ? style_factory.StyleFactory.style.tickColor : t3$);
        t2.fontFamily = (t3$0 = labelStyleSpec, t3$0 == null ? null : t3$0.fontFamily);
        t2.fontSize = (t3$2 = (t3$1 = labelStyleSpec, t3$1 == null ? null : t3$1.fontSize), t3$2 == null ? 12 : t3$2);
        t2.lineHeight = (t3$3 = labelStyleSpec, t3$3 == null ? null : t3$3.lineHeight);
        return t2;
      })());
      this.axisLineStyle = (t2$ = this.graphicsFactory.createLinePaint(), (() => {
        t2$.color = (t3$5 = (t3$4 = axisLineStyleSpec, t3$4 == null ? null : t3$4.color), t3$5 == null ? this.labelStyle.color : t3$5);
        t2$.dashPattern = (t3$6 = axisLineStyleSpec, t3$6 == null ? null : t3$6.dashPattern);
        t2$.strokeWidth = (t3$8 = (t3$7 = axisLineStyleSpec, t3$7 == null ? null : t3$7.thickness), t3$8 == null ? 1 : t3$8);
        return t2$;
      })());
      this.tickLabelAnchor = (t2$0 = labelAnchor, t2$0 == null ? axis_spec.TickLabelAnchor.centered : t2$0);
      this.tickLabelJustification = (t2$1 = labelJustification, t2$1 == null ? axis_spec.TickLabelJustification.inside : t2$1);
      this.labelOffsetFromAxisPx = (t2$2 = labelOffsetFromAxisPx, t2$2 == null ? 5 : t2$2);
      this.labelOffsetFromTickPx = (t2$3 = labelOffsetFromTickPx, t2$3 == null ? 5 : t2$3);
      this.minimumPaddingBetweenLabelsPx = (t2$4 = minimumPaddingBetweenLabelsPx, t2$4 == null ? 50 : t2$4);
      this.labelRotation = (t2$5 = labelRotation, t2$5 == null ? 0 : t2$5);
    }).prototype = BaseTickDrawStrategy.prototype;
    dart.addTypeTests(BaseTickDrawStrategy);
    BaseTickDrawStrategy.prototype[_is_BaseTickDrawStrategy_default] = true;
    dart.addTypeCaches(BaseTickDrawStrategy);
    BaseTickDrawStrategy[dart.implements] = () => [tick_draw_strategy.TickDrawStrategy$(dart.legacy(D))];
    dart.setMethodSignature(BaseTickDrawStrategy, () => ({
      __proto__: dart.getMethods(BaseTickDrawStrategy.__proto__),
      decorateTicks: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      collides: dart.fnType(dart.legacy(collision_report.CollisionReport), [dart.legacy(core.Object), dart.legacy(axis.AxisOrientation)]),
      measureVerticallyDrawnTicks: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.Object), dart.legacy(core.int), dart.legacy(core.int)]),
      measureHorizontallyDrawnTicks: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.Object), dart.legacy(core.int), dart.legacy(core.int)]),
      drawAxisLine: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(axis.AxisOrientation), dart.legacy(math.Rectangle$(dart.legacy(core.int)))]),
      drawLabel: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(core.Object)], {axisBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))), drawAreaBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))), isFirst: dart.legacy(core.bool), isLast: dart.legacy(core.bool), orientation: dart.legacy(axis.AxisOrientation)}, {}),
      [_normalizeHorizontalAnchor]: dart.fnType(dart.legacy(text_element.TextDirection), [dart.legacy(axis_spec.TickLabelAnchor), dart.legacy(core.bool), dart.legacy(core.bool), dart.legacy(core.bool)]),
      [_normalizeVerticalAnchor]: dart.fnType(dart.legacy(base_tick_draw_strategy._PixelVerticalDirection), [dart.legacy(axis_spec.TickLabelAnchor), dart.legacy(core.bool), dart.legacy(core.bool)]),
      calculateWidthForRotatedLabel: dart.fnType(dart.legacy(core.double), [dart.legacy(core.int), dart.legacy(core.double), dart.legacy(core.double)]),
      calculateHeightForRotatedLabel: dart.fnType(dart.legacy(core.double), [dart.legacy(core.int), dart.legacy(core.double), dart.legacy(core.double)]),
      splitLabel: dart.fnType(dart.legacy(core.List$(dart.legacy(text_element.TextElement))), [dart.legacy(text_element.TextElement)]),
      getLabelWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Iterable$(dart.legacy(text_element.TextElement)))]),
      getLabelHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Iterable$(dart.legacy(text_element.TextElement)))])
    }));
    dart.setLibraryUri(BaseTickDrawStrategy, I[18]);
    dart.setFieldSignature(BaseTickDrawStrategy, () => ({
      __proto__: dart.getFields(BaseTickDrawStrategy.__proto__),
      chartContext: dart.finalFieldType(dart.legacy(chart_context.ChartContext)),
      graphicsFactory: dart.finalFieldType(dart.legacy(graphics_factory.GraphicsFactory)),
      axisLineStyle: dart.fieldType(dart.legacy(line_style.LineStyle)),
      labelStyle: dart.fieldType(dart.legacy(text_style.TextStyle)),
      tickLabelAnchor: dart.fieldType(dart.legacy(axis_spec.TickLabelAnchor)),
      tickLabelJustification: dart.fieldType(dart.legacy(axis_spec.TickLabelJustification)),
      labelOffsetFromAxisPx: dart.fieldType(dart.legacy(core.int)),
      labelOffsetFromTickPx: dart.fieldType(dart.legacy(core.int)),
      minimumPaddingBetweenLabelsPx: dart.fieldType(dart.legacy(core.int)),
      labelRotation: dart.fieldType(dart.legacy(core.int))
    }));
    return BaseTickDrawStrategy;
  });
  base_tick_draw_strategy.BaseTickDrawStrategy = base_tick_draw_strategy.BaseTickDrawStrategy$();
  dart.defineLazy(base_tick_draw_strategy.BaseTickDrawStrategy, {
    /*base_tick_draw_strategy.BaseTickDrawStrategy._labelSplitPattern*/get _labelSplitPattern() {
      return "\n";
    },
    /*base_tick_draw_strategy.BaseTickDrawStrategy.multiLineLabelPadding*/get multiLineLabelPadding() {
      return 2;
    }
  }, true);
  dart.addTypeTests(base_tick_draw_strategy.BaseTickDrawStrategy, _is_BaseTickDrawStrategy_default);
  base_tick_draw_strategy._PixelVerticalDirection = class _PixelVerticalDirection extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (base_tick_draw_strategy._PixelVerticalDirection.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = base_tick_draw_strategy._PixelVerticalDirection.prototype;
  dart.addTypeTests(base_tick_draw_strategy._PixelVerticalDirection);
  dart.addTypeCaches(base_tick_draw_strategy._PixelVerticalDirection);
  dart.setMethodSignature(base_tick_draw_strategy._PixelVerticalDirection, () => ({
    __proto__: dart.getMethods(base_tick_draw_strategy._PixelVerticalDirection.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(base_tick_draw_strategy._PixelVerticalDirection, I[18]);
  dart.setFieldSignature(base_tick_draw_strategy._PixelVerticalDirection, () => ({
    __proto__: dart.getFields(base_tick_draw_strategy._PixelVerticalDirection.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$1]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(base_tick_draw_strategy._PixelVerticalDirection, ['toString']);
  base_tick_draw_strategy._PixelVerticalDirection.over = C[22] || CT.C22;
  base_tick_draw_strategy._PixelVerticalDirection.center = C[24] || CT.C24;
  base_tick_draw_strategy._PixelVerticalDirection.under = C[23] || CT.C23;
  base_tick_draw_strategy._PixelVerticalDirection.values = C[30] || CT.C30;
  var lineStyle$ = dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.lineStyle");
  var tickLengthPx$ = dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.tickLengthPx");
  const _is_SmallTickRendererSpec_default = Symbol('_is_SmallTickRendererSpec_default');
  small_tick_draw_strategy.SmallTickRendererSpec$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var SmallTickDrawStrategyOfDL = () => (SmallTickDrawStrategyOfDL = dart.constFn(small_tick_draw_strategy.SmallTickDrawStrategy$(DL())))();
    class SmallTickRendererSpec extends base_tick_draw_strategy.BaseRenderSpec$(dart.legacy(D)) {
      get lineStyle() {
        return this[lineStyle$];
      }
      set lineStyle(value) {
        super.lineStyle = value;
      }
      get tickLengthPx() {
        return this[tickLengthPx$];
      }
      set tickLengthPx(value) {
        super.tickLengthPx = value;
      }
      createDrawStrategy(context, graphicsFactory) {
        return new (SmallTickDrawStrategyOfDL()).new(context, graphicsFactory, {tickLengthPx: this.tickLengthPx, lineStyleSpec: this.lineStyle, labelStyleSpec: this.labelStyle, axisLineStyleSpec: this.axisLineStyle, labelAnchor: this.labelAnchor, labelJustification: this.labelJustification, labelOffsetFromAxisPx: this.labelOffsetFromAxisPx, labelOffsetFromTickPx: this.labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: this.minimumPaddingBetweenLabelsPx, labelRotation: this.labelRotation});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || T$.SmallTickRendererSpecL().is(other) && dart.equals(this.lineStyle, other.lineStyle) && this.tickLengthPx == other.tickLengthPx && super._equals(other);
      }
      get hashCode() {
        let t2, t2$, t2$0, t2$1;
        let hashcode = (t2$ = (t2 = this.lineStyle, t2 == null ? null : dart.hashCode(t2)), t2$ == null ? 0 : t2$);
        hashcode = (t2$1 = dart.notNull(hashcode) * 37 + dart.notNull((t2$0 = this.tickLengthPx, t2$0 == null ? null : dart.hashCode(t2$0))), t2$1 === null ? 0 : t2$1);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(super.hashCode);
        return hashcode;
      }
    }
    (SmallTickRendererSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let lineStyle = opts && 'lineStyle' in opts ? opts.lineStyle : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[lineStyle$] = lineStyle;
      this[tickLengthPx$] = tickLengthPx;
      SmallTickRendererSpec.__proto__.new.call(this, {labelStyle: labelStyle, labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, axisLineStyle: axisLineStyle});
      ;
    }).prototype = SmallTickRendererSpec.prototype;
    dart.addTypeTests(SmallTickRendererSpec);
    SmallTickRendererSpec.prototype[_is_SmallTickRendererSpec_default] = true;
    dart.addTypeCaches(SmallTickRendererSpec);
    dart.setMethodSignature(SmallTickRendererSpec, () => ({
      __proto__: dart.getMethods(SmallTickRendererSpec.__proto__),
      createDrawStrategy: dart.fnType(dart.legacy(tick_draw_strategy.TickDrawStrategy$(dart.legacy(D))), [dart.legacy(chart_context.ChartContext), dart.legacy(graphics_factory.GraphicsFactory)])
    }));
    dart.setLibraryUri(SmallTickRendererSpec, I[19]);
    dart.setFieldSignature(SmallTickRendererSpec, () => ({
      __proto__: dart.getFields(SmallTickRendererSpec.__proto__),
      lineStyle: dart.finalFieldType(dart.legacy(axis_spec.LineStyleSpec)),
      tickLengthPx: dart.finalFieldType(dart.legacy(core.int))
    }));
    dart.defineExtensionMethods(SmallTickRendererSpec, ['_equals']);
    dart.defineExtensionAccessors(SmallTickRendererSpec, ['hashCode']);
    return SmallTickRendererSpec;
  });
  small_tick_draw_strategy.SmallTickRendererSpec = small_tick_draw_strategy.SmallTickRendererSpec$();
  dart.addTypeTests(small_tick_draw_strategy.SmallTickRendererSpec, _is_SmallTickRendererSpec_default);
  var tickLength = dart.privateName(small_tick_draw_strategy, "SmallTickDrawStrategy.tickLength");
  var lineStyle = dart.privateName(small_tick_draw_strategy, "SmallTickDrawStrategy.lineStyle");
  const _is_SmallTickDrawStrategy_default = Symbol('_is_SmallTickDrawStrategy_default');
  small_tick_draw_strategy.SmallTickDrawStrategy$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var TickOfDL = () => (TickOfDL = dart.constFn(tick.Tick$(DL())))();
    var TickLOfDL = () => (TickLOfDL = dart.constFn(dart.legacy(TickOfDL())))();
    class SmallTickDrawStrategy extends base_tick_draw_strategy.BaseTickDrawStrategy$(dart.legacy(D)) {
      get tickLength() {
        return this[tickLength];
      }
      set tickLength(value) {
        this[tickLength] = value;
      }
      get lineStyle() {
        return this[lineStyle];
      }
      set lineStyle(value) {
        this[lineStyle] = value;
      }
      draw(canvas, tick, opts) {
        TickLOfDL().as(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let tickPositions = this.calculateTickPositions(tick, orientation, axisBounds, drawAreaBounds, this.tickLength);
        let tickStart = tickPositions[$first];
        let tickEnd = tickPositions[$last];
        canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([tickStart, tickEnd]), dashPattern: this.lineStyle.dashPattern, fill: this.lineStyle.color, stroke: this.lineStyle.color, strokeWidthPx: this.lineStyle.strokeWidth[$toDouble]()});
        this.drawLabel(canvas, tick, {orientation: orientation, axisBounds: axisBounds, drawAreaBounds: drawAreaBounds, isFirst: isFirst, isLast: isLast});
      }
      calculateTickPositions(tick, orientation, axisBounds, drawAreaBounds, tickLength) {
        TickLOfDL().as(tick);
        let tickStart = null;
        let tickEnd = null;
        switch (orientation) {
          case C[18] || CT.C18:
          {
            let x = tick.locationPx;
            tickStart = new (T$.PointOfnumL()).new(x, dart.notNull(axisBounds[$bottom]) - dart.notNull(tickLength));
            tickEnd = new (T$.PointOfnumL()).new(x, axisBounds[$bottom]);
            break;
          }
          case C[19] || CT.C19:
          {
            let x = tick.locationPx;
            tickStart = new (T$.PointOfnumL()).new(x, axisBounds[$top]);
            tickEnd = new (T$.PointOfnumL()).new(x, dart.notNull(axisBounds[$top]) + dart.notNull(tickLength));
            break;
          }
          case C[20] || CT.C20:
          {
            let y = tick.locationPx;
            tickStart = new (T$.PointOfnumL()).new(axisBounds[$left], y);
            tickEnd = new (T$.PointOfnumL()).new(dart.notNull(axisBounds[$left]) + dart.notNull(tickLength), y);
            break;
          }
          case C[21] || CT.C21:
          {
            let y = tick.locationPx;
            tickStart = new (T$.PointOfnumL()).new(dart.notNull(axisBounds[$right]) - dart.notNull(tickLength), y);
            tickEnd = new (T$.PointOfnumL()).new(axisBounds[$right], y);
            break;
          }
        }
        return T$.JSArrayOfPointLOfnumL().of([tickStart, tickEnd]);
      }
    }
    (SmallTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t2, t2$;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let lineStyleSpec = opts && 'lineStyleSpec' in opts ? opts.lineStyleSpec : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[tickLength] = null;
      this[lineStyle] = null;
      SmallTickDrawStrategy.__proto__.new.call(this, chartContext, graphicsFactory, {labelStyleSpec: labelStyleSpec, axisLineStyleSpec: (t2 = axisLineStyleSpec, t2 == null ? lineStyleSpec : t2), labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation});
      this.tickLength = (t2$ = tickLengthPx, t2$ == null ? style_factory.StyleFactory.style.tickLength : t2$);
      this.lineStyle = style_factory.StyleFactory.style.createTickLineStyle(graphicsFactory, lineStyleSpec);
    }).prototype = SmallTickDrawStrategy.prototype;
    dart.addTypeTests(SmallTickDrawStrategy);
    SmallTickDrawStrategy.prototype[_is_SmallTickDrawStrategy_default] = true;
    dart.addTypeCaches(SmallTickDrawStrategy);
    dart.setMethodSignature(SmallTickDrawStrategy, () => ({
      __proto__: dart.getMethods(SmallTickDrawStrategy.__proto__),
      draw: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(core.Object)], {axisBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))), drawAreaBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))), isFirst: dart.legacy(core.bool), isLast: dart.legacy(core.bool), orientation: dart.legacy(axis.AxisOrientation)}, {}),
      calculateTickPositions: dart.fnType(dart.legacy(core.List$(dart.legacy(math.Point$(dart.legacy(core.num))))), [dart.legacy(core.Object), dart.legacy(axis.AxisOrientation), dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(core.int)])
    }));
    dart.setLibraryUri(SmallTickDrawStrategy, I[19]);
    dart.setFieldSignature(SmallTickDrawStrategy, () => ({
      __proto__: dart.getFields(SmallTickDrawStrategy.__proto__),
      tickLength: dart.fieldType(dart.legacy(core.int)),
      lineStyle: dart.fieldType(dart.legacy(line_style.LineStyle))
    }));
    return SmallTickDrawStrategy;
  });
  small_tick_draw_strategy.SmallTickDrawStrategy = small_tick_draw_strategy.SmallTickDrawStrategy$();
  dart.addTypeTests(small_tick_draw_strategy.SmallTickDrawStrategy, _is_SmallTickDrawStrategy_default);
  const _is_TickProvider_default = Symbol('_is_TickProvider_default');
  tick_provider.TickProvider$ = dart.generic(D => {
    class TickProvider extends core.Object {}
    (TickProvider.new = function() {
      ;
    }).prototype = TickProvider.prototype;
    dart.addTypeTests(TickProvider);
    TickProvider.prototype[_is_TickProvider_default] = true;
    dart.addTypeCaches(TickProvider);
    dart.setLibraryUri(TickProvider, I[1]);
    return TickProvider;
  });
  tick_provider.TickProvider = tick_provider.TickProvider$();
  dart.addTypeTests(tick_provider.TickProvider, _is_TickProvider_default);
  var start$ = dart.privateName(tick_provider, "TickHint.start");
  var end$ = dart.privateName(tick_provider, "TickHint.end");
  var tickCount$ = dart.privateName(tick_provider, "TickHint.tickCount");
  const _is_TickHint_default = Symbol('_is_TickHint_default');
  tick_provider.TickHint$ = dart.generic(D => {
    class TickHint extends core.Object {
      get start() {
        return this[start$];
      }
      set start(value) {
        super.start = value;
      }
      get end() {
        return this[end$];
      }
      set end(value) {
        super.end = value;
      }
      get tickCount() {
        return this[tickCount$];
      }
      set tickCount(value) {
        super.tickCount = value;
      }
    }
    (TickHint.new = function(start, end, opts) {
      let tickCount = opts && 'tickCount' in opts ? opts.tickCount : null;
      this[start$] = start;
      this[end$] = end;
      this[tickCount$] = tickCount;
      ;
    }).prototype = TickHint.prototype;
    dart.addTypeTests(TickHint);
    TickHint.prototype[_is_TickHint_default] = true;
    dart.addTypeCaches(TickHint);
    dart.setLibraryUri(TickHint, I[1]);
    dart.setFieldSignature(TickHint, () => ({
      __proto__: dart.getFields(TickHint.__proto__),
      start: dart.finalFieldType(dart.legacy(D)),
      end: dart.finalFieldType(dart.legacy(D)),
      tickCount: dart.finalFieldType(dart.legacy(core.int))
    }));
    return TickHint;
  });
  tick_provider.TickHint = tick_provider.TickHint$();
  dart.addTypeTests(tick_provider.TickHint, _is_TickHint_default);
  const _is_TickFormatter_default = Symbol('_is_TickFormatter_default');
  tick_formatter.TickFormatter$ = dart.generic(D => {
    class TickFormatter extends core.Object {}
    (TickFormatter.new = function() {
      ;
    }).prototype = TickFormatter.prototype;
    dart.addTypeTests(TickFormatter);
    TickFormatter.prototype[_is_TickFormatter_default] = true;
    dart.addTypeCaches(TickFormatter);
    dart.setLibraryUri(TickFormatter, I[20]);
    return TickFormatter;
  });
  tick_formatter.TickFormatter = tick_formatter.TickFormatter$();
  dart.addTypeTests(tick_formatter.TickFormatter, _is_TickFormatter_default);
  const _is_SimpleTickFormatterBase_default = Symbol('_is_SimpleTickFormatterBase_default');
  tick_formatter.SimpleTickFormatterBase$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var ListOfDL = () => (ListOfDL = dart.constFn(core.List$(DL())))();
    var ListLOfDL = () => (ListLOfDL = dart.constFn(dart.legacy(ListOfDL())))();
    var MapOfDL$StringL = () => (MapOfDL$StringL = dart.constFn(core.Map$(DL(), T$.StringL())))();
    var MapLOfDL$StringL = () => (MapLOfDL$StringL = dart.constFn(dart.legacy(MapOfDL$StringL())))();
    var DLToStringL = () => (DLToStringL = dart.constFn(dart.fnType(T$.StringL(), [DL()])))();
    class SimpleTickFormatterBase extends core.Object {
      format(tickValues, cache, opts) {
        ListLOfDL().as(tickValues);
        MapLOfDL$StringL().as(cache);
        let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
        return tickValues[$map](T$.StringL(), dart.fn(value => {
          let formattedString = cache[$_get](value);
          if (formattedString == null) {
            formattedString = this.formatValue(value);
            cache[$_set](value, formattedString);
          }
          return formattedString;
        }, DLToStringL()))[$toList]();
      }
    }
    (SimpleTickFormatterBase.new = function() {
      ;
    }).prototype = SimpleTickFormatterBase.prototype;
    dart.addTypeTests(SimpleTickFormatterBase);
    SimpleTickFormatterBase.prototype[_is_SimpleTickFormatterBase_default] = true;
    dart.addTypeCaches(SimpleTickFormatterBase);
    SimpleTickFormatterBase[dart.implements] = () => [tick_formatter.TickFormatter$(dart.legacy(D))];
    dart.setMethodSignature(SimpleTickFormatterBase, () => ({
      __proto__: dart.getMethods(SimpleTickFormatterBase.__proto__),
      format: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(core.Object), dart.legacy(core.Object)], {stepSize: dart.legacy(core.num)}, {})
    }));
    dart.setLibraryUri(SimpleTickFormatterBase, I[20]);
    return SimpleTickFormatterBase;
  });
  tick_formatter.SimpleTickFormatterBase = tick_formatter.SimpleTickFormatterBase$();
  dart.addTypeTests(tick_formatter.SimpleTickFormatterBase, _is_SimpleTickFormatterBase_default);
  tick_formatter.OrdinalTickFormatter = class OrdinalTickFormatter extends tick_formatter.SimpleTickFormatterBase$(dart.legacy(core.String)) {
    formatValue(value) {
      T$.StringL().as(value);
      return value;
    }
    _equals(other) {
      if (other == null) return false;
      return T$.OrdinalTickFormatterL().is(other);
    }
    get hashCode() {
      return 31;
    }
  };
  (tick_formatter.OrdinalTickFormatter.new = function() {
    tick_formatter.OrdinalTickFormatter.__proto__.new.call(this);
    ;
  }).prototype = tick_formatter.OrdinalTickFormatter.prototype;
  dart.addTypeTests(tick_formatter.OrdinalTickFormatter);
  dart.addTypeCaches(tick_formatter.OrdinalTickFormatter);
  dart.setMethodSignature(tick_formatter.OrdinalTickFormatter, () => ({
    __proto__: dart.getMethods(tick_formatter.OrdinalTickFormatter.__proto__),
    formatValue: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Object)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(tick_formatter.OrdinalTickFormatter, () => ({
    __proto__: dart.getGetters(tick_formatter.OrdinalTickFormatter.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(tick_formatter.OrdinalTickFormatter, I[20]);
  dart.defineExtensionMethods(tick_formatter.OrdinalTickFormatter, ['_equals']);
  dart.defineExtensionAccessors(tick_formatter.OrdinalTickFormatter, ['hashCode']);
  var formatter$ = dart.privateName(tick_formatter, "NumericTickFormatter.formatter");
  tick_formatter.NumericTickFormatter = class NumericTickFormatter extends tick_formatter.SimpleTickFormatterBase$(dart.legacy(core.num)) {
    get formatter() {
      return this[formatter$];
    }
    set formatter(value) {
      super.formatter = value;
    }
    static new(opts) {
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      formatter == null ? formatter = tick_formatter.NumericTickFormatter._getFormatter(number_format.NumberFormat.decimalPattern()) : null;
      return new tick_formatter.NumericTickFormatter._internal(formatter);
    }
    static fromNumberFormat(numberFormat) {
      return new tick_formatter.NumericTickFormatter._internal(tick_formatter.NumericTickFormatter._getFormatter(numberFormat));
    }
    static compactSimpleCurrency() {
      return new tick_formatter.NumericTickFormatter._internal(tick_formatter.NumericTickFormatter._getFormatter(number_format.NumberFormat.compactCurrency()));
    }
    static _getFormatter(numberFormat) {
      return dart.fn(value => numberFormat.format(value), T$.numLToStringL());
    }
    formatValue(value) {
      let t2;
      T$.numL().as(value);
      t2 = value;
      return this.formatter(t2);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.NumericTickFormatterL().is(other) && dart.equals(this.formatter, other.formatter);
    }
    get hashCode() {
      return dart.hashCode(this.formatter);
    }
  };
  (tick_formatter.NumericTickFormatter._internal = function(formatter) {
    this[formatter$] = formatter;
    tick_formatter.NumericTickFormatter.__proto__.new.call(this);
    ;
  }).prototype = tick_formatter.NumericTickFormatter.prototype;
  dart.addTypeTests(tick_formatter.NumericTickFormatter);
  dart.addTypeCaches(tick_formatter.NumericTickFormatter);
  dart.setMethodSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getMethods(tick_formatter.NumericTickFormatter.__proto__),
    formatValue: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Object)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getGetters(tick_formatter.NumericTickFormatter.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(tick_formatter.NumericTickFormatter, I[20]);
  dart.setFieldSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getFields(tick_formatter.NumericTickFormatter.__proto__),
    formatter: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)])))
  }));
  dart.defineExtensionMethods(tick_formatter.NumericTickFormatter, ['_equals']);
  dart.defineExtensionAccessors(tick_formatter.NumericTickFormatter, ['hashCode']);
  layout_view.LayoutView = class LayoutView extends core.Object {};
  (layout_view.LayoutView.new = function() {
    ;
  }).prototype = layout_view.LayoutView.prototype;
  dart.addTypeTests(layout_view.LayoutView);
  dart.addTypeCaches(layout_view.LayoutView);
  dart.setLibraryUri(layout_view.LayoutView, I[21]);
  const _is_SeriesRenderer_default = Symbol('_is_SeriesRenderer_default');
  series_renderer.SeriesRenderer$ = dart.generic(D => {
    class SeriesRenderer extends layout_view.LayoutView {}
    (SeriesRenderer.new = function() {
      ;
    }).prototype = SeriesRenderer.prototype;
    dart.addTypeTests(SeriesRenderer);
    SeriesRenderer.prototype[_is_SeriesRenderer_default] = true;
    dart.addTypeCaches(SeriesRenderer);
    dart.setLibraryUri(SeriesRenderer, I[22]);
    return SeriesRenderer;
  });
  series_renderer.SeriesRenderer = series_renderer.SeriesRenderer$();
  dart.defineLazy(series_renderer.SeriesRenderer, {
    /*series_renderer.SeriesRenderer.defaultRendererId*/get defaultRendererId() {
      return "default";
    }
  }, true);
  dart.addTypeTests(series_renderer.SeriesRenderer, _is_SeriesRenderer_default);
  var layoutConfig = dart.privateName(series_renderer, "BaseSeriesRenderer.layoutConfig");
  var rendererId$ = dart.privateName(series_renderer, "BaseSeriesRenderer.rendererId");
  var symbolRenderer$ = dart.privateName(series_renderer, "BaseSeriesRenderer.symbolRenderer");
  var graphicsFactory = dart.privateName(series_renderer, "BaseSeriesRenderer.graphicsFactory");
  var _drawAreaBounds = dart.privateName(series_renderer, "_drawAreaBounds");
  const _is_BaseSeriesRenderer_default = Symbol('_is_BaseSeriesRenderer_default');
  series_renderer.BaseSeriesRenderer$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var BaseChartOfDL = () => (BaseChartOfDL = dart.constFn(base_chart.BaseChart$(DL())))();
    var BaseChartLOfDL = () => (BaseChartLOfDL = dart.constFn(dart.legacy(BaseChartOfDL())))();
    var MutableSeriesOfDL = () => (MutableSeriesOfDL = dart.constFn(processed_series.MutableSeries$(DL())))();
    var MutableSeriesLOfDL = () => (MutableSeriesLOfDL = dart.constFn(dart.legacy(MutableSeriesOfDL())))();
    var IterableOfMutableSeriesLOfDL = () => (IterableOfMutableSeriesLOfDL = dart.constFn(core.Iterable$(MutableSeriesLOfDL())))();
    var IterableLOfMutableSeriesLOfDL = () => (IterableLOfMutableSeriesLOfDL = dart.constFn(dart.legacy(IterableOfMutableSeriesLOfDL())))();
    var MutableSeriesLOfDLToNull = () => (MutableSeriesLOfDLToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesLOfDL()])))();
    var ListOfMutableSeriesLOfDL = () => (ListOfMutableSeriesLOfDL = dart.constFn(core.List$(MutableSeriesLOfDL())))();
    var ListLOfMutableSeriesLOfDL = () => (ListLOfMutableSeriesLOfDL = dart.constFn(dart.legacy(ListOfMutableSeriesLOfDL())))();
    var SeriesDatumOfDL = () => (SeriesDatumOfDL = dart.constFn(series_datum.SeriesDatum$(DL())))();
    var SeriesDatumLOfDL = () => (SeriesDatumLOfDL = dart.constFn(dart.legacy(SeriesDatumOfDL())))();
    var DatumDetailsOfDL = () => (DatumDetailsOfDL = dart.constFn(datum_details.DatumDetails$(DL())))();
    class BaseSeriesRenderer extends core.Object {
      get layoutConfig() {
        return this[layoutConfig];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get rendererId() {
        return this[rendererId$];
      }
      set rendererId(value) {
        this[rendererId$] = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$];
      }
      set symbolRenderer(value) {
        this[symbolRenderer$] = value;
      }
      get graphicsFactory() {
        return this[graphicsFactory];
      }
      set graphicsFactory(value) {
        this[graphicsFactory] = value;
      }
      get drawBounds() {
        return this[_drawAreaBounds];
      }
      onAttach(chart) {
        BaseChartLOfDL().as(chart);
      }
      onDetach(chart) {
        BaseChartLOfDL().as(chart);
      }
      assignMissingColors(seriesList, opts) {
        IterableLOfMutableSeriesLOfDL().as(seriesList);
        let emptyCategoryUsesSinglePalette = opts && 'emptyCategoryUsesSinglePalette' in opts ? opts.emptyCategoryUsesSinglePalette : null;
        let missingColorCountPerCategory = new (T$.IdentityMapOfStringL$intL()).new();
        let maxMissing = 0;
        let hasSpecifiedCategory = false;
        seriesList[$forEach](dart.fn(series => {
          let t2;
          if (series.colorFn == null && series.seriesColor != null) {
            series.colorFn = dart.fn(_ => series.seriesColor, T$.intLToColorL());
          }
          if (series.colorFn == null) {
            let category = series.seriesCategory;
            if (category == null) {
              category = "__default__";
            } else {
              hasSpecifiedCategory = true;
            }
            let missingCnt = dart.notNull((t2 = missingColorCountPerCategory[$_get](category), t2 == null ? 0 : t2)) + 1;
            missingColorCountPerCategory[$_set](category, missingCnt);
            maxMissing = math.max(T$.intL(), maxMissing, missingCnt);
          }
        }, MutableSeriesLOfDLToNull()));
        if (maxMissing > 0) {
          if (!dart.test(emptyCategoryUsesSinglePalette) && !hasSpecifiedCategory) {
            let palettes = style_factory.StyleFactory.style.getOrderedPalettes(maxMissing);
            let index = 0;
            seriesList[$forEach](dart.fn(series => {
              let t2, t3, t2$;
              if (series.colorFn == null) {
                let color = palettes[$_get](index[$modulo](palettes[$length])).shadeDefault;
                index = index + 1;
                series.colorFn = dart.fn(_ => color, T$.intLToColorL());
                t2 = series;
                t2.seriesColor == null ? t2.seriesColor = color : null;
              } else {
                if (series.seriesColor == null) {
                  try {
                    series.seriesColor = (t2$ = series, t3 = 0, t2$.colorFn(t3));
                  } catch (e) {
                    let exception = dart.getThrown(e);
                    series.seriesColor = style_factory.StyleFactory.style.defaultSeriesColor;
                  }
                }
              }
            }, T$.MutableSeriesLToNull()));
            return;
          }
          let colorPalettes = style_factory.StyleFactory.style.getOrderedPalettes(missingColorCountPerCategory[$length]);
          let colorsByCategory = new (T$.IdentityMapOfStringL$ListLOfColorL()).new();
          let index = 0;
          missingColorCountPerCategory[$keys][$forEach](dart.fn(category => {
            colorsByCategory[$_set](category, colorPalettes[$_get](index[$modulo](colorPalettes[$length])).makeShades(maxMissing));
            index = index + 1;
            missingColorCountPerCategory[$_set](category, 0);
          }, T$.StringLToNull()));
          seriesList[$forEach](dart.fn(series => {
            let t3, t3$;
            if (series.colorFn == null) {
              let category = (t3 = series.seriesCategory, t3 == null ? "__default__" : t3);
              let colorIndex = missingColorCountPerCategory[$_get](category);
              missingColorCountPerCategory[$_set](category, dart.notNull(colorIndex) + 1);
              let color = colorsByCategory[$_get](category)[$_get](colorIndex);
              series.colorFn = dart.fn(_ => color, T$.intLToColorL());
            }
            t3$ = series;
            t3$.fillColorFn == null ? t3$.fillColorFn = dart.fn(index => {
              let t5, t4;
              t4 = series;
              t5 = index;
              return t4.colorFn(t5);
            }, T$.intLToColorL()) : null;
          }, T$.MutableSeriesLToNull()));
        } else {
          seriesList[$forEach](dart.fn(series => {
            let t3;
            t3 = series;
            t3.fillColorFn == null ? t3.fillColorFn = dart.fn(index => {
              let t5, t4;
              t4 = series;
              t5 = index;
              return t4.colorFn(t5);
            }, T$.intLToColorL()) : null;
          }, T$.MutableSeriesLToNull()));
        }
        seriesList[$forEach](dart.fn(series => {
          let t4, t3;
          if (series.seriesColor == null) {
            try {
              series.seriesColor = (t3 = series, t4 = 0, t3.colorFn(t4));
            } catch (e) {
              let exception = dart.getThrown(e);
              series.seriesColor = style_factory.StyleFactory.style.defaultSeriesColor;
            }
          }
        }, T$.MutableSeriesLToNull()));
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[_drawAreaBounds] = drawAreaBounds;
      }
      get componentBounds() {
        return this[_drawAreaBounds];
      }
      get isSeriesRenderer() {
        return true;
      }
      configureSeries(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
      }
      preprocessSeries(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
      }
      configureDomainAxes(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
      }
      configureMeasureAxes(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
      }
      getDetailsForSeriesDatum(seriesDatum) {
        let t4, t4$, t4$0, t4$1;
        SeriesDatumLOfDL().as(seriesDatum);
        let series = seriesDatum.series;
        let index = seriesDatum.index;
        let domainFn = series.domainFn;
        let domainLowerBoundFn = series.domainLowerBoundFn;
        let domainUpperBoundFn = series.domainUpperBoundFn;
        let measureFn = series.measureFn;
        let measureLowerBoundFn = series.measureLowerBoundFn;
        let measureUpperBoundFn = series.measureUpperBoundFn;
        let measureOffsetFn = series.measureOffsetFn;
        let rawMeasureFn = series.rawMeasureFn;
        let rawMeasureLowerBoundFn = series.rawMeasureLowerBoundFn;
        let rawMeasureUpperBoundFn = series.rawMeasureUpperBoundFn;
        let colorFn = series.colorFn;
        let areaColorFn = (t4 = series.areaColorFn, t4 == null ? colorFn : t4);
        let fillColorFn = (t4$ = series.fillColorFn, t4$ == null ? colorFn : t4$);
        let radiusPxFn = series.radiusPxFn;
        let strokeWidthPxFn = series.strokeWidthPxFn;
        let domainValue = domainFn(index);
        let domainLowerBoundValue = domainLowerBoundFn != null ? domainLowerBoundFn(index) : null;
        let domainUpperBoundValue = domainUpperBoundFn != null ? domainUpperBoundFn(index) : null;
        let measureValue = measureFn(index);
        let measureLowerBoundValue = measureLowerBoundFn != null ? measureLowerBoundFn(index) : null;
        let measureUpperBoundValue = measureUpperBoundFn != null ? measureUpperBoundFn(index) : null;
        let measureOffsetValue = measureOffsetFn != null ? measureOffsetFn(index) : null;
        let rawMeasureValue = rawMeasureFn(index);
        let rawMeasureLowerBoundValue = rawMeasureLowerBoundFn != null ? rawMeasureLowerBoundFn(index) : null;
        let rawMeasureUpperBoundValue = rawMeasureUpperBoundFn != null ? rawMeasureUpperBoundFn(index) : null;
        let color = colorFn(index);
        let fillColor = fillColorFn(index);
        fillColor == null ? fillColor = color : null;
        let areaColor = areaColorFn(index);
        let radiusPx = radiusPxFn != null ? radiusPxFn(index) : null;
        radiusPx = (t4$0 = radiusPx, t4$0 == null ? null : t4$0[$toDouble]());
        let strokeWidthPx = strokeWidthPxFn != null ? strokeWidthPxFn(index) : null;
        strokeWidthPx = (t4$1 = strokeWidthPx, t4$1 == null ? null : t4$1[$toDouble]());
        let details = new (DatumDetailsOfDL()).new({datum: seriesDatum.datum, index: seriesDatum.index, domain: domainValue, domainLowerBound: domainLowerBoundValue, domainUpperBound: domainUpperBoundValue, measure: measureValue, measureLowerBound: measureLowerBoundValue, measureUpperBound: measureUpperBoundValue, measureOffset: measureOffsetValue, rawMeasure: rawMeasureValue, rawMeasureLowerBound: rawMeasureLowerBoundValue, rawMeasureUpperBound: rawMeasureUpperBoundValue, series: series, color: color, fillColor: fillColor, areaColor: areaColor, radiusPx: radiusPx, strokeWidthPx: strokeWidthPx});
        return this.addPositionToDetailsForSeriesDatum(details, seriesDatum);
      }
      isPointWithinBounds(chartPoint, bounds) {
        if (bounds != null) {
          if (!dart.test(bounds[$containsPoint](chartPoint))) {
            return false;
          }
        } else if (this.componentBounds == null || !dart.test(this.componentBounds[$containsPoint](chartPoint))) {
          return false;
        }
        return true;
      }
    }
    (BaseSeriesRenderer.new = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[_drawAreaBounds] = null;
      this[graphicsFactory] = null;
      this[rendererId$] = rendererId;
      this[symbolRenderer$] = symbolRenderer;
      this[layoutConfig] = new layout_view.LayoutViewConfig.new({paintOrder: layoutPaintOrder, position: layout_view.LayoutPosition.DrawArea, positionOrder: 0});
      ;
    }).prototype = BaseSeriesRenderer.prototype;
    dart.addTypeTests(BaseSeriesRenderer);
    BaseSeriesRenderer.prototype[_is_BaseSeriesRenderer_default] = true;
    dart.addTypeCaches(BaseSeriesRenderer);
    BaseSeriesRenderer[dart.implements] = () => [series_renderer.SeriesRenderer$(dart.legacy(D))];
    dart.setMethodSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getMethods(BaseSeriesRenderer.__proto__),
      onAttach: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onDetach: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      assignMissingColors: dart.fnType(dart.void, [dart.legacy(core.Object)], {emptyCategoryUsesSinglePalette: dart.legacy(core.bool)}, {}),
      measure: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.int), dart.legacy(core.int)]),
      layout: dart.fnType(dart.void, [dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(math.Rectangle$(dart.legacy(core.int)))]),
      configureSeries: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      preprocessSeries: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      configureDomainAxes: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      configureMeasureAxes: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      getDetailsForSeriesDatum: dart.fnType(dart.legacy(datum_details.DatumDetails$(dart.legacy(D))), [dart.legacy(core.Object)]),
      isPointWithinBounds: dart.fnType(dart.legacy(core.bool), [dart.legacy(math.Point$(dart.legacy(core.double))), dart.legacy(math.Rectangle$(dart.legacy(core.int)))])
    }));
    dart.setGetterSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getGetters(BaseSeriesRenderer.__proto__),
      drawBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
      componentBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
      isSeriesRenderer: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(BaseSeriesRenderer, I[22]);
    dart.setFieldSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getFields(BaseSeriesRenderer.__proto__),
      layoutConfig: dart.finalFieldType(dart.legacy(layout_view.LayoutViewConfig)),
      rendererId: dart.fieldType(dart.legacy(core.String)),
      symbolRenderer: dart.fieldType(dart.legacy(symbol_renderer.SymbolRenderer)),
      [_drawAreaBounds]: dart.fieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int)))),
      graphicsFactory: dart.fieldType(dart.legacy(graphics_factory.GraphicsFactory))
    }));
    return BaseSeriesRenderer;
  });
  series_renderer.BaseSeriesRenderer = series_renderer.BaseSeriesRenderer$();
  dart.addTypeTests(series_renderer.BaseSeriesRenderer, _is_BaseSeriesRenderer_default);
  var TypedKey_uniqueKey = dart.privateName(typed_registry, "TypedKey.uniqueKey");
  dart.defineLazy(series_renderer, {
    /*series_renderer.rendererIdKey*/get rendererIdKey() {
      return C[31] || CT.C31;
    },
    /*series_renderer.rendererKey*/get rendererKey() {
      return C[32] || CT.C32;
    }
  }, true);
  var series$0 = dart.privateName(series_datum, "SeriesDatum.series");
  var datum$ = dart.privateName(series_datum, "SeriesDatum.datum");
  var _index$ = dart.privateName(series_datum, "_index");
  const _is_SeriesDatum_default = Symbol('_is_SeriesDatum_default');
  series_datum.SeriesDatum$ = dart.generic(D => {
    class SeriesDatum extends core.Object {
      get series() {
        return this[series$0];
      }
      set series(value) {
        super.series = value;
      }
      get datum() {
        return this[datum$];
      }
      set datum(value) {
        super.datum = value;
      }
      get index() {
        if (this.datum == null) return null;
        this[_index$] == null ? this[_index$] = this.series.data[$indexOf](this.datum) : null;
        return this[_index$];
      }
      _equals(other) {
        if (other == null) return false;
        return T$.SeriesDatumL().is(other) && dart.equals(other.series, this.series) && dart.equals(other.datum, this.datum);
      }
      get hashCode() {
        return dart.notNull(dart.hashCode(this.series)) * 31 + dart.notNull(dart.hashCode(this.datum));
      }
    }
    (SeriesDatum.new = function(series, datum) {
      this[_index$] = null;
      this[series$0] = series;
      this[datum$] = datum;
      ;
    }).prototype = SeriesDatum.prototype;
    dart.addTypeTests(SeriesDatum);
    SeriesDatum.prototype[_is_SeriesDatum_default] = true;
    dart.addTypeCaches(SeriesDatum);
    dart.setMethodSignature(SeriesDatum, () => ({
      __proto__: dart.getMethods(SeriesDatum.__proto__),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(SeriesDatum, () => ({
      __proto__: dart.getGetters(SeriesDatum.__proto__),
      index: dart.legacy(core.int),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(SeriesDatum, I[23]);
    dart.setFieldSignature(SeriesDatum, () => ({
      __proto__: dart.getFields(SeriesDatum.__proto__),
      series: dart.finalFieldType(dart.legacy(processed_series.ImmutableSeries$(dart.legacy(D)))),
      datum: dart.finalFieldType(dart.dynamic),
      [_index$]: dart.fieldType(dart.legacy(core.int))
    }));
    dart.defineExtensionMethods(SeriesDatum, ['_equals']);
    dart.defineExtensionAccessors(SeriesDatum, ['hashCode']);
    return SeriesDatum;
  });
  series_datum.SeriesDatum = series_datum.SeriesDatum$();
  dart.addTypeTests(series_datum.SeriesDatum, _is_SeriesDatum_default);
  var seriesId$ = dart.privateName(series_datum, "SeriesDatumConfig.seriesId");
  var domainValue$ = dart.privateName(series_datum, "SeriesDatumConfig.domainValue");
  const _is_SeriesDatumConfig_default = Symbol('_is_SeriesDatumConfig_default');
  series_datum.SeriesDatumConfig$ = dart.generic(D => {
    class SeriesDatumConfig extends core.Object {
      get seriesId() {
        return this[seriesId$];
      }
      set seriesId(value) {
        super.seriesId = value;
      }
      get domainValue() {
        return this[domainValue$];
      }
      set domainValue(value) {
        super.domainValue = value;
      }
      _equals(other) {
        if (other == null) return false;
        return T$.SeriesDatumConfigL().is(other) && this.seriesId == other.seriesId && dart.equals(this.domainValue, other.domainValue);
      }
      get hashCode() {
        let hashcode = dart.hashCode(this.seriesId);
        hashcode = hashcode * 37 + dart.notNull(dart.hashCode(this.domainValue));
        return hashcode;
      }
    }
    (SeriesDatumConfig.new = function(seriesId, domainValue) {
      this[seriesId$] = seriesId;
      this[domainValue$] = domainValue;
      ;
    }).prototype = SeriesDatumConfig.prototype;
    dart.addTypeTests(SeriesDatumConfig);
    SeriesDatumConfig.prototype[_is_SeriesDatumConfig_default] = true;
    dart.addTypeCaches(SeriesDatumConfig);
    dart.setMethodSignature(SeriesDatumConfig, () => ({
      __proto__: dart.getMethods(SeriesDatumConfig.__proto__),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(SeriesDatumConfig, () => ({
      __proto__: dart.getGetters(SeriesDatumConfig.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(SeriesDatumConfig, I[23]);
    dart.setFieldSignature(SeriesDatumConfig, () => ({
      __proto__: dart.getFields(SeriesDatumConfig.__proto__),
      seriesId: dart.finalFieldType(dart.legacy(core.String)),
      domainValue: dart.finalFieldType(dart.legacy(D))
    }));
    dart.defineExtensionMethods(SeriesDatumConfig, ['_equals']);
    dart.defineExtensionAccessors(SeriesDatumConfig, ['hashCode']);
    return SeriesDatumConfig;
  });
  series_datum.SeriesDatumConfig = series_datum.SeriesDatumConfig$();
  dart.addTypeTests(series_datum.SeriesDatumConfig, _is_SeriesDatumConfig_default);
  var _selectedDatum = dart.privateName(selection_model, "_selectedDatum");
  var _selectedSeries = dart.privateName(selection_model, "_selectedSeries");
  const _is_SelectionModel_default = Symbol('_is_SelectionModel_default');
  selection_model.SelectionModel$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var SeriesDatumOfDL = () => (SeriesDatumOfDL = dart.constFn(series_datum.SeriesDatum$(DL())))();
    var SeriesDatumLOfDL = () => (SeriesDatumLOfDL = dart.constFn(dart.legacy(SeriesDatumOfDL())))();
    var JSArrayOfSeriesDatumLOfDL = () => (JSArrayOfSeriesDatumLOfDL = dart.constFn(_interceptors.JSArray$(SeriesDatumLOfDL())))();
    var ImmutableSeriesOfDL = () => (ImmutableSeriesOfDL = dart.constFn(processed_series.ImmutableSeries$(DL())))();
    var ImmutableSeriesLOfDL = () => (ImmutableSeriesLOfDL = dart.constFn(dart.legacy(ImmutableSeriesOfDL())))();
    var JSArrayOfImmutableSeriesLOfDL = () => (JSArrayOfImmutableSeriesLOfDL = dart.constFn(_interceptors.JSArray$(ImmutableSeriesLOfDL())))();
    var ListOfSeriesDatumLOfDL = () => (ListOfSeriesDatumLOfDL = dart.constFn(core.List$(SeriesDatumLOfDL())))();
    var ListOfImmutableSeriesLOfDL = () => (ListOfImmutableSeriesLOfDL = dart.constFn(core.List$(ImmutableSeriesLOfDL())))();
    var ListOfDL = () => (ListOfDL = dart.constFn(core.List$(DL())))();
    var ListLOfDL = () => (ListLOfDL = dart.constFn(dart.legacy(ListOfDL())))();
    var IdentityMapOfStringL$ListLOfDL = () => (IdentityMapOfStringL$ListLOfDL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), ListLOfDL())))();
    var JSArrayOfDL = () => (JSArrayOfDL = dart.constFn(_interceptors.JSArray$(DL())))();
    var ImmutableSeriesLOfDLToboolL = () => (ImmutableSeriesLOfDLToboolL = dart.constFn(dart.fnType(T$.boolL(), [ImmutableSeriesLOfDL()])))();
    class SelectionModel extends core.Object {
      get hasDatumSelection() {
        return this[_selectedDatum][$isNotEmpty];
      }
      isDatumSelected(series, index) {
        ImmutableSeriesLOfDL().as(series);
        let datum = index == null ? null : series.data[$_get](index);
        return this[_selectedDatum][$contains](new (SeriesDatumOfDL()).new(series, datum));
      }
      get selectedDatum() {
        return ListOfSeriesDatumLOfDL().unmodifiable(this[_selectedDatum]);
      }
      get hasSeriesSelection() {
        return this[_selectedSeries][$isNotEmpty];
      }
      get selectedSeries() {
        return ListOfImmutableSeriesLOfDL().unmodifiable(this[_selectedSeries]);
      }
      get hasAnySelection() {
        return dart.test(this[_selectedDatum][$isNotEmpty]) || dart.test(this.selectedSeries[$isNotEmpty]);
      }
      _equals(other) {
        if (other == null) return false;
        return T$.SelectionModelL().is(other) && dart.test(new equality.ListEquality.new().equals(this[_selectedDatum], other.selectedDatum)) && dart.test(new equality.ListEquality.new().equals(this[_selectedSeries], other.selectedSeries));
      }
      get hashCode() {
        let hashcode = new equality.ListEquality.new().hash(this[_selectedDatum]);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(new equality.ListEquality.new().hash(this[_selectedSeries]));
        return hashcode;
      }
    }
    (SelectionModel.new = function(opts) {
      let selectedData = opts && 'selectedData' in opts ? opts.selectedData : null;
      let selectedSeries = opts && 'selectedSeries' in opts ? opts.selectedSeries : null;
      this[_selectedDatum] = JSArrayOfSeriesDatumLOfDL().of([]);
      this[_selectedSeries] = JSArrayOfImmutableSeriesLOfDL().of([]);
      if (selectedData != null) {
        this[_selectedDatum] = selectedData;
      }
      if (selectedSeries != null) {
        this[_selectedSeries] = selectedSeries;
      }
    }).prototype = SelectionModel.prototype;
    (SelectionModel.fromOther = function(other) {
      this[_selectedDatum] = JSArrayOfSeriesDatumLOfDL().of([]);
      this[_selectedSeries] = JSArrayOfImmutableSeriesLOfDL().of([]);
      this[_selectedDatum] = ListOfSeriesDatumLOfDL().from(other[_selectedDatum]);
      this[_selectedSeries] = ListOfImmutableSeriesLOfDL().from(other[_selectedSeries]);
    }).prototype = SelectionModel.prototype;
    (SelectionModel.fromConfig = function(selectedDataConfig, selectedSeriesConfig, seriesList) {
      let t4;
      this[_selectedDatum] = JSArrayOfSeriesDatumLOfDL().of([]);
      this[_selectedSeries] = JSArrayOfImmutableSeriesLOfDL().of([]);
      let selectedDataMap = new (IdentityMapOfStringL$ListLOfDL()).new();
      if (selectedDataConfig != null) {
        for (let config of selectedDataConfig) {
          t4 = config.seriesId;
          selectedDataMap[$_get](t4) == null ? selectedDataMap[$_set](t4, JSArrayOfDL().of([])) : null;
          selectedDataMap[$_get](config.seriesId)[$add](DL().as(config.domainValue));
        }
        this[_selectedSeries][$addAll](seriesList[$where](dart.fn(series => selectedDataMap[$keys][$contains](series.id), ImmutableSeriesLOfDLToboolL())));
        for (let series of seriesList) {
          if (dart.test(selectedDataMap[$containsKey](series.id))) {
            let domainFn = series.domainFn;
            for (let i = 0; i < dart.notNull(series.data[$length]); i = i + 1) {
              let datum = series.data[$_get](i);
              if (dart.test(selectedDataMap[$_get](series.id)[$contains](domainFn(i)))) {
                this[_selectedDatum][$add](new (SeriesDatumOfDL()).new(series, datum));
              }
            }
          }
        }
      }
      if (selectedSeriesConfig != null) {
        let remainingSeriesToAdd = selectedSeriesConfig[$where](dart.fn(seriesId => !dart.test(this.selectedSeries[$contains](seriesId)), T$.StringLToboolL()))[$toList]();
        this[_selectedSeries][$addAll](seriesList[$where](dart.fn(series => remainingSeriesToAdd[$contains](series.id), ImmutableSeriesLOfDLToboolL())));
      }
    }).prototype = SelectionModel.prototype;
    dart.addTypeTests(SelectionModel);
    SelectionModel.prototype[_is_SelectionModel_default] = true;
    dart.addTypeCaches(SelectionModel);
    dart.setMethodSignature(SelectionModel, () => ({
      __proto__: dart.getMethods(SelectionModel.__proto__),
      isDatumSelected: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.int)]),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(SelectionModel, () => ({
      __proto__: dart.getGetters(SelectionModel.__proto__),
      hasDatumSelection: dart.legacy(core.bool),
      selectedDatum: dart.legacy(core.List$(dart.legacy(series_datum.SeriesDatum$(dart.legacy(D))))),
      hasSeriesSelection: dart.legacy(core.bool),
      selectedSeries: dart.legacy(core.List$(dart.legacy(processed_series.ImmutableSeries$(dart.legacy(D))))),
      hasAnySelection: dart.legacy(core.bool),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(SelectionModel, I[24]);
    dart.setFieldSignature(SelectionModel, () => ({
      __proto__: dart.getFields(SelectionModel.__proto__),
      [_selectedDatum]: dart.fieldType(dart.legacy(core.List$(dart.legacy(series_datum.SeriesDatum$(dart.legacy(D)))))),
      [_selectedSeries]: dart.fieldType(dart.legacy(core.List$(dart.legacy(processed_series.ImmutableSeries$(dart.legacy(D))))))
    }));
    dart.defineExtensionMethods(SelectionModel, ['_equals']);
    dart.defineExtensionAccessors(SelectionModel, ['hashCode']);
    return SelectionModel;
  });
  selection_model.SelectionModel = selection_model.SelectionModel$();
  dart.addTypeTests(selection_model.SelectionModel, _is_SelectionModel_default);
  var _changedListeners = dart.privateName(selection_model, "_changedListeners");
  var _updatedListeners = dart.privateName(selection_model, "_updatedListeners");
  var _lockChangedListeners = dart.privateName(selection_model, "_lockChangedListeners");
  var _locked = dart.privateName(selection_model, "_locked");
  const _is_MutableSelectionModel_default = Symbol('_is_MutableSelectionModel_default');
  selection_model.MutableSelectionModel$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var SelectionModelOfDL = () => (SelectionModelOfDL = dart.constFn(selection_model.SelectionModel$(DL())))();
    var SelectionModelLOfDL = () => (SelectionModelLOfDL = dart.constFn(dart.legacy(SelectionModelOfDL())))();
    var SelectionModelLOfDLTovoid = () => (SelectionModelLOfDLTovoid = dart.constFn(dart.fnType(dart.void, [SelectionModelLOfDL()])))();
    var SelectionModelLOfDLToLvoid = () => (SelectionModelLOfDLToLvoid = dart.constFn(dart.legacy(SelectionModelLOfDLTovoid())))();
    var JSArrayOfSelectionModelLOfDLToLvoid = () => (JSArrayOfSelectionModelLOfDLToLvoid = dart.constFn(_interceptors.JSArray$(SelectionModelLOfDLToLvoid())))();
    var FnTovoid = () => (FnTovoid = dart.constFn(dart.fnType(dart.void, [SelectionModelLOfDLToLvoid()])))();
    var SeriesDatumOfDL = () => (SeriesDatumOfDL = dart.constFn(series_datum.SeriesDatum$(DL())))();
    var SeriesDatumLOfDL = () => (SeriesDatumLOfDL = dart.constFn(dart.legacy(SeriesDatumOfDL())))();
    var JSArrayOfSeriesDatumLOfDL = () => (JSArrayOfSeriesDatumLOfDL = dart.constFn(_interceptors.JSArray$(SeriesDatumLOfDL())))();
    var ImmutableSeriesOfDL = () => (ImmutableSeriesOfDL = dart.constFn(processed_series.ImmutableSeries$(DL())))();
    var ImmutableSeriesLOfDL = () => (ImmutableSeriesLOfDL = dart.constFn(dart.legacy(ImmutableSeriesOfDL())))();
    var JSArrayOfImmutableSeriesLOfDL = () => (JSArrayOfImmutableSeriesLOfDL = dart.constFn(_interceptors.JSArray$(ImmutableSeriesLOfDL())))();
    var ListOfSeriesDatumLOfDL = () => (ListOfSeriesDatumLOfDL = dart.constFn(core.List$(SeriesDatumLOfDL())))();
    var ListLOfSeriesDatumLOfDL = () => (ListLOfSeriesDatumLOfDL = dart.constFn(dart.legacy(ListOfSeriesDatumLOfDL())))();
    var ListOfImmutableSeriesLOfDL = () => (ListOfImmutableSeriesLOfDL = dart.constFn(core.List$(ImmutableSeriesLOfDL())))();
    var ListLOfImmutableSeriesLOfDL = () => (ListLOfImmutableSeriesLOfDL = dart.constFn(dart.legacy(ListOfImmutableSeriesLOfDL())))();
    class MutableSelectionModel extends selection_model.SelectionModel$(dart.legacy(D)) {
      set locked(locked) {
        this[_locked] = locked;
        this[_lockChangedListeners][$forEach](dart.fn(listener => listener(new (SelectionModelOfDL()).fromOther(this)), FnTovoid()));
      }
      get locked() {
        return this[_locked];
      }
      clearSelection(opts) {
        let notifyListeners = opts && 'notifyListeners' in opts ? opts.notifyListeners : true;
        return this.updateSelection(JSArrayOfSeriesDatumLOfDL().of([]), JSArrayOfImmutableSeriesLOfDL().of([]), {notifyListeners: notifyListeners});
      }
      updateSelection(datumSelection, seriesList, opts) {
        ListLOfSeriesDatumLOfDL().as(datumSelection);
        ListLOfImmutableSeriesLOfDL().as(seriesList);
        let notifyListeners = opts && 'notifyListeners' in opts ? opts.notifyListeners : true;
        if (dart.test(this[_locked])) return false;
        let origSelectedDatum = this[_selectedDatum];
        let origSelectedSeries = this[_selectedSeries];
        this[_selectedDatum] = datumSelection;
        this[_selectedSeries] = seriesList;
        let copyOfSelectionModel = new (SelectionModelOfDL()).fromOther(this);
        this[_updatedListeners][$forEach](dart.fn(listener => listener(copyOfSelectionModel), FnTovoid()));
        let changed = !dart.test(new equality.ListEquality.new().equals(origSelectedDatum, this[_selectedDatum])) || !dart.test(new equality.ListEquality.new().equals(origSelectedSeries, this[_selectedSeries]));
        if (dart.test(notifyListeners) && changed) {
          this[_changedListeners][$forEach](dart.fn(listener => listener(copyOfSelectionModel), FnTovoid()));
        }
        return changed;
      }
      addSelectionChangedListener(listener) {
        this[_changedListeners][$add](listener);
      }
      removeSelectionChangedListener(listener) {
        this[_changedListeners][$remove](listener);
      }
      addSelectionUpdatedListener(listener) {
        this[_updatedListeners][$add](listener);
      }
      removeSelectionUpdatedListener(listener) {
        this[_updatedListeners][$remove](listener);
      }
      addSelectionLockChangedListener(listener) {
        this[_lockChangedListeners][$add](listener);
      }
      removeSelectionLockChangedListener(listener) {
        this[_lockChangedListeners][$remove](listener);
      }
      clearAllListeners() {
        this[_changedListeners][$clear]();
        this[_updatedListeners][$clear]();
        this[_lockChangedListeners][$clear]();
      }
    }
    (MutableSelectionModel.new = function() {
      this[_changedListeners] = JSArrayOfSelectionModelLOfDLToLvoid().of([]);
      this[_updatedListeners] = JSArrayOfSelectionModelLOfDLToLvoid().of([]);
      this[_lockChangedListeners] = JSArrayOfSelectionModelLOfDLToLvoid().of([]);
      this[_locked] = false;
      MutableSelectionModel.__proto__.new.call(this);
      ;
    }).prototype = MutableSelectionModel.prototype;
    dart.addTypeTests(MutableSelectionModel);
    MutableSelectionModel.prototype[_is_MutableSelectionModel_default] = true;
    dart.addTypeCaches(MutableSelectionModel);
    dart.setMethodSignature(MutableSelectionModel, () => ({
      __proto__: dart.getMethods(MutableSelectionModel.__proto__),
      clearSelection: dart.fnType(dart.legacy(core.bool), [], {notifyListeners: dart.legacy(core.bool)}, {}),
      updateSelection: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)], {notifyListeners: dart.legacy(core.bool)}, {}),
      addSelectionChangedListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel$(dart.legacy(D)))]))]),
      removeSelectionChangedListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel$(dart.legacy(D)))]))]),
      addSelectionUpdatedListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel$(dart.legacy(D)))]))]),
      removeSelectionUpdatedListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel$(dart.legacy(D)))]))]),
      addSelectionLockChangedListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel$(dart.legacy(D)))]))]),
      removeSelectionLockChangedListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel$(dart.legacy(D)))]))]),
      clearAllListeners: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(MutableSelectionModel, () => ({
      __proto__: dart.getGetters(MutableSelectionModel.__proto__),
      locked: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(MutableSelectionModel, () => ({
      __proto__: dart.getSetters(MutableSelectionModel.__proto__),
      locked: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(MutableSelectionModel, I[24]);
    dart.setFieldSignature(MutableSelectionModel, () => ({
      __proto__: dart.getFields(MutableSelectionModel.__proto__),
      [_changedListeners]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel$(dart.legacy(D)))]))))),
      [_updatedListeners]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel$(dart.legacy(D)))]))))),
      [_lockChangedListeners]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel$(dart.legacy(D)))]))))),
      [_locked]: dart.fieldType(dart.legacy(core.bool))
    }));
    return MutableSelectionModel;
  });
  selection_model.MutableSelectionModel = selection_model.MutableSelectionModel$();
  dart.addTypeTests(selection_model.MutableSelectionModel, _is_MutableSelectionModel_default);
  var _name$3 = dart.privateName(selection_model, "_name");
  selection_model.SelectionModelType = class SelectionModelType extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (selection_model.SelectionModelType.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = selection_model.SelectionModelType.prototype;
  dart.addTypeTests(selection_model.SelectionModelType);
  dart.addTypeCaches(selection_model.SelectionModelType);
  dart.setMethodSignature(selection_model.SelectionModelType, () => ({
    __proto__: dart.getMethods(selection_model.SelectionModelType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(selection_model.SelectionModelType, I[24]);
  dart.setFieldSignature(selection_model.SelectionModelType, () => ({
    __proto__: dart.getFields(selection_model.SelectionModelType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$3]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(selection_model.SelectionModelType, ['toString']);
  selection_model.SelectionModelType.info = C[33] || CT.C33;
  selection_model.SelectionModelType.action = C[34] || CT.C34;
  selection_model.SelectionModelType.values = C[35] || CT.C35;
  var id = dart.privateName(processed_series, "MutableSeries.id");
  var displayName = dart.privateName(processed_series, "MutableSeries.displayName");
  var overlaySeries = dart.privateName(processed_series, "MutableSeries.overlaySeries");
  var seriesCategory = dart.privateName(processed_series, "MutableSeries.seriesCategory");
  var seriesColor = dart.privateName(processed_series, "MutableSeries.seriesColor");
  var seriesIndex = dart.privateName(processed_series, "MutableSeries.seriesIndex");
  var seriesMeasureTotal = dart.privateName(processed_series, "MutableSeries.seriesMeasureTotal");
  var data = dart.privateName(processed_series, "MutableSeries.data");
  var keyFn = dart.privateName(processed_series, "MutableSeries.keyFn");
  var domainFn = dart.privateName(processed_series, "MutableSeries.domainFn");
  var domainFormatterFn = dart.privateName(processed_series, "MutableSeries.domainFormatterFn");
  var domainLowerBoundFn = dart.privateName(processed_series, "MutableSeries.domainLowerBoundFn");
  var domainUpperBoundFn = dart.privateName(processed_series, "MutableSeries.domainUpperBoundFn");
  var measureFn = dart.privateName(processed_series, "MutableSeries.measureFn");
  var measureFormatterFn = dart.privateName(processed_series, "MutableSeries.measureFormatterFn");
  var measureLowerBoundFn = dart.privateName(processed_series, "MutableSeries.measureLowerBoundFn");
  var measureUpperBoundFn = dart.privateName(processed_series, "MutableSeries.measureUpperBoundFn");
  var measureOffsetFn = dart.privateName(processed_series, "MutableSeries.measureOffsetFn");
  var rawMeasureFn = dart.privateName(processed_series, "MutableSeries.rawMeasureFn");
  var rawMeasureLowerBoundFn = dart.privateName(processed_series, "MutableSeries.rawMeasureLowerBoundFn");
  var rawMeasureUpperBoundFn = dart.privateName(processed_series, "MutableSeries.rawMeasureUpperBoundFn");
  var areaColorFn = dart.privateName(processed_series, "MutableSeries.areaColorFn");
  var colorFn = dart.privateName(processed_series, "MutableSeries.colorFn");
  var dashPatternFn = dart.privateName(processed_series, "MutableSeries.dashPatternFn");
  var fillColorFn = dart.privateName(processed_series, "MutableSeries.fillColorFn");
  var fillPatternFn = dart.privateName(processed_series, "MutableSeries.fillPatternFn");
  var patternColorFn = dart.privateName(processed_series, "MutableSeries.patternColorFn");
  var radiusPxFn = dart.privateName(processed_series, "MutableSeries.radiusPxFn");
  var strokeWidthPxFn = dart.privateName(processed_series, "MutableSeries.strokeWidthPxFn");
  var labelAccessorFn = dart.privateName(processed_series, "MutableSeries.labelAccessorFn");
  var insideLabelStyleAccessorFn = dart.privateName(processed_series, "MutableSeries.insideLabelStyleAccessorFn");
  var outsideLabelStyleAccessorFn = dart.privateName(processed_series, "MutableSeries.outsideLabelStyleAccessorFn");
  var measureAxis = dart.privateName(processed_series, "MutableSeries.measureAxis");
  var domainAxis = dart.privateName(processed_series, "MutableSeries.domainAxis");
  var _attrs = dart.privateName(processed_series, "_attrs");
  var keyFn$ = dart.privateName(processed_series, "ImmutableSeries.keyFn");
  var insideLabelStyleAccessorFn$ = dart.privateName(processed_series, "ImmutableSeries.insideLabelStyleAccessorFn");
  var outsideLabelStyleAccessorFn$ = dart.privateName(processed_series, "ImmutableSeries.outsideLabelStyleAccessorFn");
  const _is_ImmutableSeries_default = Symbol('_is_ImmutableSeries_default');
  processed_series.ImmutableSeries$ = dart.generic(D => {
    class ImmutableSeries extends core.Object {
      get keyFn() {
        return this[keyFn$];
      }
      set keyFn(value) {
        this[keyFn$] = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[insideLabelStyleAccessorFn$];
      }
      set insideLabelStyleAccessorFn(value) {
        this[insideLabelStyleAccessorFn$] = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[outsideLabelStyleAccessorFn$];
      }
      set outsideLabelStyleAccessorFn(value) {
        this[outsideLabelStyleAccessorFn$] = value;
      }
    }
    (ImmutableSeries.new = function() {
      this[keyFn$] = null;
      this[insideLabelStyleAccessorFn$] = null;
      this[outsideLabelStyleAccessorFn$] = null;
      ;
    }).prototype = ImmutableSeries.prototype;
    dart.addTypeTests(ImmutableSeries);
    ImmutableSeries.prototype[_is_ImmutableSeries_default] = true;
    dart.addTypeCaches(ImmutableSeries);
    dart.setLibraryUri(ImmutableSeries, I[25]);
    dart.setFieldSignature(ImmutableSeries, () => ({
      __proto__: dart.getFields(ImmutableSeries.__proto__),
      keyFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      insideLabelStyleAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      outsideLabelStyleAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)])))
    }));
    return ImmutableSeries;
  });
  processed_series.ImmutableSeries = processed_series.ImmutableSeries$();
  dart.addTypeTests(processed_series.ImmutableSeries, _is_ImmutableSeries_default);
  const _is_MutableSeries_default = Symbol('_is_MutableSeries_default');
  processed_series.MutableSeries$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var DLToStringL = () => (DLToStringL = dart.constFn(dart.fnType(T$.StringL(), [DL()])))();
    var DLToLStringL = () => (DLToLStringL = dart.constFn(dart.legacy(DLToStringL())))();
    var intLToFn = () => (intLToFn = dart.constFn(dart.fnType(DLToLStringL(), [T$.intL()])))();
    var intLToLFn = () => (intLToLFn = dart.constFn(dart.legacy(intLToFn())))();
    var intLToDL = () => (intLToDL = dart.constFn(dart.fnType(DL(), [T$.intL()])))();
    var intLToLDL = () => (intLToLDL = dart.constFn(dart.legacy(intLToDL())))();
    class MutableSeries extends processed_series.ImmutableSeries$(dart.legacy(D)) {
      get id() {
        return this[id];
      }
      set id(value) {
        super.id = value;
      }
      get displayName() {
        return this[displayName];
      }
      set displayName(value) {
        this[displayName] = value;
      }
      get overlaySeries() {
        return this[overlaySeries];
      }
      set overlaySeries(value) {
        this[overlaySeries] = value;
      }
      get seriesCategory() {
        return this[seriesCategory];
      }
      set seriesCategory(value) {
        this[seriesCategory] = value;
      }
      get seriesColor() {
        return this[seriesColor];
      }
      set seriesColor(value) {
        this[seriesColor] = value;
      }
      get seriesIndex() {
        return this[seriesIndex];
      }
      set seriesIndex(value) {
        this[seriesIndex] = value;
      }
      get seriesMeasureTotal() {
        return this[seriesMeasureTotal];
      }
      set seriesMeasureTotal(value) {
        this[seriesMeasureTotal] = value;
      }
      get data() {
        return this[data];
      }
      set data(value) {
        this[data] = value;
      }
      get keyFn() {
        return this[keyFn];
      }
      set keyFn(value) {
        this[keyFn] = value;
      }
      get domainFn() {
        return this[domainFn];
      }
      set domainFn(value) {
        this[domainFn] = intLToLDL().as(value);
      }
      get domainFormatterFn() {
        return this[domainFormatterFn];
      }
      set domainFormatterFn(value) {
        this[domainFormatterFn] = value;
      }
      get domainLowerBoundFn() {
        return this[domainLowerBoundFn];
      }
      set domainLowerBoundFn(value) {
        this[domainLowerBoundFn] = intLToLDL().as(value);
      }
      get domainUpperBoundFn() {
        return this[domainUpperBoundFn];
      }
      set domainUpperBoundFn(value) {
        this[domainUpperBoundFn] = intLToLDL().as(value);
      }
      get measureFn() {
        return this[measureFn];
      }
      set measureFn(value) {
        this[measureFn] = value;
      }
      get measureFormatterFn() {
        return this[measureFormatterFn];
      }
      set measureFormatterFn(value) {
        this[measureFormatterFn] = value;
      }
      get measureLowerBoundFn() {
        return this[measureLowerBoundFn];
      }
      set measureLowerBoundFn(value) {
        this[measureLowerBoundFn] = value;
      }
      get measureUpperBoundFn() {
        return this[measureUpperBoundFn];
      }
      set measureUpperBoundFn(value) {
        this[measureUpperBoundFn] = value;
      }
      get measureOffsetFn() {
        return this[measureOffsetFn];
      }
      set measureOffsetFn(value) {
        this[measureOffsetFn] = value;
      }
      get rawMeasureFn() {
        return this[rawMeasureFn];
      }
      set rawMeasureFn(value) {
        this[rawMeasureFn] = value;
      }
      get rawMeasureLowerBoundFn() {
        return this[rawMeasureLowerBoundFn];
      }
      set rawMeasureLowerBoundFn(value) {
        this[rawMeasureLowerBoundFn] = value;
      }
      get rawMeasureUpperBoundFn() {
        return this[rawMeasureUpperBoundFn];
      }
      set rawMeasureUpperBoundFn(value) {
        this[rawMeasureUpperBoundFn] = value;
      }
      get areaColorFn() {
        return this[areaColorFn];
      }
      set areaColorFn(value) {
        this[areaColorFn] = value;
      }
      get colorFn() {
        return this[colorFn];
      }
      set colorFn(value) {
        this[colorFn] = value;
      }
      get dashPatternFn() {
        return this[dashPatternFn];
      }
      set dashPatternFn(value) {
        this[dashPatternFn] = value;
      }
      get fillColorFn() {
        return this[fillColorFn];
      }
      set fillColorFn(value) {
        this[fillColorFn] = value;
      }
      get fillPatternFn() {
        return this[fillPatternFn];
      }
      set fillPatternFn(value) {
        this[fillPatternFn] = value;
      }
      get patternColorFn() {
        return this[patternColorFn];
      }
      set patternColorFn(value) {
        this[patternColorFn] = value;
      }
      get radiusPxFn() {
        return this[radiusPxFn];
      }
      set radiusPxFn(value) {
        this[radiusPxFn] = value;
      }
      get strokeWidthPxFn() {
        return this[strokeWidthPxFn];
      }
      set strokeWidthPxFn(value) {
        this[strokeWidthPxFn] = value;
      }
      get labelAccessorFn() {
        return this[labelAccessorFn];
      }
      set labelAccessorFn(value) {
        this[labelAccessorFn] = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[insideLabelStyleAccessorFn];
      }
      set insideLabelStyleAccessorFn(value) {
        this[insideLabelStyleAccessorFn] = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[outsideLabelStyleAccessorFn];
      }
      set outsideLabelStyleAccessorFn(value) {
        this[outsideLabelStyleAccessorFn] = value;
      }
      get measureAxis() {
        return this[measureAxis];
      }
      set measureAxis(value) {
        this[measureAxis] = value;
      }
      get domainAxis() {
        return this[domainAxis];
      }
      set domainAxis(value) {
        this[domainAxis] = value;
      }
      setAttr(R, key, value) {
        return this[_attrs].setAttr(dart.legacy(R), key, value);
      }
      getAttr(R, key) {
        return this[_attrs].getAttr(dart.legacy(R), key);
      }
      _equals(other) {
        if (other == null) return false;
        return T$.MutableSeriesL().is(other) && dart.equals(this.data, other.data) && this.id == other.id;
      }
      get hashCode() {
        return dart.notNull(dart.hashCode(this.data)) * 31 + dart.hashCode(this.id);
      }
    }
    (MutableSeries.new = function(series) {
      let t4, t4$, t4$0;
      this[displayName] = null;
      this[overlaySeries] = null;
      this[seriesCategory] = null;
      this[seriesColor] = null;
      this[seriesIndex] = null;
      this[seriesMeasureTotal] = null;
      this[data] = null;
      this[keyFn] = null;
      this[domainFn] = null;
      this[domainFormatterFn] = null;
      this[domainLowerBoundFn] = null;
      this[domainUpperBoundFn] = null;
      this[measureFn] = null;
      this[measureFormatterFn] = null;
      this[measureLowerBoundFn] = null;
      this[measureUpperBoundFn] = null;
      this[measureOffsetFn] = null;
      this[rawMeasureFn] = null;
      this[rawMeasureLowerBoundFn] = null;
      this[rawMeasureUpperBoundFn] = null;
      this[areaColorFn] = null;
      this[colorFn] = null;
      this[dashPatternFn] = null;
      this[fillColorFn] = null;
      this[fillPatternFn] = null;
      this[patternColorFn] = null;
      this[radiusPxFn] = null;
      this[strokeWidthPxFn] = null;
      this[labelAccessorFn] = null;
      this[insideLabelStyleAccessorFn] = null;
      this[outsideLabelStyleAccessorFn] = null;
      this[_attrs] = new series$.SeriesAttributes.new();
      this[measureAxis] = null;
      this[domainAxis] = null;
      this[id] = series.id;
      MutableSeries.__proto__.new.call(this);
      this.displayName = (t4 = series.displayName, t4 == null ? series.id : t4);
      this.overlaySeries = series.overlaySeries;
      this.seriesCategory = series.seriesCategory;
      this.seriesColor = series.seriesColor;
      this.data = series.data;
      this.keyFn = series.keyFn;
      this.domainFn = series.domainFn;
      this.domainFormatterFn = intLToLFn().as(series.domainFormatterFn);
      this.domainLowerBoundFn = series.domainLowerBoundFn;
      this.domainUpperBoundFn = series.domainUpperBoundFn;
      this.measureFn = series.measureFn;
      this.measureFormatterFn = series.measureFormatterFn;
      this.measureLowerBoundFn = series.measureLowerBoundFn;
      this.measureUpperBoundFn = series.measureUpperBoundFn;
      this.measureOffsetFn = series.measureOffsetFn;
      this.rawMeasureFn = series.measureFn;
      this.rawMeasureLowerBoundFn = series.measureLowerBoundFn;
      this.rawMeasureUpperBoundFn = series.measureUpperBoundFn;
      this.seriesMeasureTotal = 0;
      for (let i = 0; i < dart.notNull(this.data[$length]); i = i + 1) {
        let measure = (t4$ = i, this.measureFn(t4$));
        if (measure != null) {
          this.seriesMeasureTotal = dart.notNull(this.seriesMeasureTotal) + dart.notNull(measure);
        }
      }
      this.areaColorFn = series.areaColorFn;
      this.colorFn = series.colorFn;
      this.dashPatternFn = series.dashPatternFn;
      this.fillColorFn = series.fillColorFn;
      this.fillPatternFn = series.fillPatternFn;
      this.patternColorFn = series.patternColorFn;
      this.labelAccessorFn = (t4$0 = series.labelAccessorFn, t4$0 == null ? dart.fn(i => {
        let t5;
        return dart.toString((t5 = i, this.domainFn(t5)));
      }, T$.intLToStringL()) : t4$0);
      this.insideLabelStyleAccessorFn = series.insideLabelStyleAccessorFn;
      this.outsideLabelStyleAccessorFn = series.outsideLabelStyleAccessorFn;
      this.radiusPxFn = series.radiusPxFn;
      this.strokeWidthPxFn = series.strokeWidthPxFn;
      this[_attrs].mergeFrom(series.attributes);
    }).prototype = MutableSeries.prototype;
    (MutableSeries.clone = function(other) {
      this[displayName] = null;
      this[overlaySeries] = null;
      this[seriesCategory] = null;
      this[seriesColor] = null;
      this[seriesIndex] = null;
      this[seriesMeasureTotal] = null;
      this[data] = null;
      this[keyFn] = null;
      this[domainFn] = null;
      this[domainFormatterFn] = null;
      this[domainLowerBoundFn] = null;
      this[domainUpperBoundFn] = null;
      this[measureFn] = null;
      this[measureFormatterFn] = null;
      this[measureLowerBoundFn] = null;
      this[measureUpperBoundFn] = null;
      this[measureOffsetFn] = null;
      this[rawMeasureFn] = null;
      this[rawMeasureLowerBoundFn] = null;
      this[rawMeasureUpperBoundFn] = null;
      this[areaColorFn] = null;
      this[colorFn] = null;
      this[dashPatternFn] = null;
      this[fillColorFn] = null;
      this[fillPatternFn] = null;
      this[patternColorFn] = null;
      this[radiusPxFn] = null;
      this[strokeWidthPxFn] = null;
      this[labelAccessorFn] = null;
      this[insideLabelStyleAccessorFn] = null;
      this[outsideLabelStyleAccessorFn] = null;
      this[_attrs] = new series$.SeriesAttributes.new();
      this[measureAxis] = null;
      this[domainAxis] = null;
      this[id] = other.id;
      MutableSeries.__proto__.new.call(this);
      this.displayName = other.displayName;
      this.overlaySeries = other.overlaySeries;
      this.seriesCategory = other.seriesCategory;
      this.seriesColor = other.seriesColor;
      this.seriesIndex = other.seriesIndex;
      this.data = other.data;
      this.keyFn = other.keyFn;
      this.domainFn = other.domainFn;
      this.domainFormatterFn = intLToLFn().as(other.domainFormatterFn);
      this.domainLowerBoundFn = other.domainLowerBoundFn;
      this.domainUpperBoundFn = other.domainUpperBoundFn;
      this.measureFn = other.measureFn;
      this.measureFormatterFn = other.measureFormatterFn;
      this.measureLowerBoundFn = other.measureLowerBoundFn;
      this.measureUpperBoundFn = other.measureUpperBoundFn;
      this.measureOffsetFn = other.measureOffsetFn;
      this.rawMeasureFn = other.rawMeasureFn;
      this.rawMeasureLowerBoundFn = other.rawMeasureLowerBoundFn;
      this.rawMeasureUpperBoundFn = other.rawMeasureUpperBoundFn;
      this.seriesMeasureTotal = other.seriesMeasureTotal;
      this.areaColorFn = other.areaColorFn;
      this.colorFn = other.colorFn;
      this.dashPatternFn = other.dashPatternFn;
      this.fillColorFn = other.fillColorFn;
      this.fillPatternFn = other.fillPatternFn;
      this.patternColorFn = other.patternColorFn;
      this.labelAccessorFn = other.labelAccessorFn;
      this.insideLabelStyleAccessorFn = other.insideLabelStyleAccessorFn;
      this.outsideLabelStyleAccessorFn = other.outsideLabelStyleAccessorFn;
      this.radiusPxFn = other.radiusPxFn;
      this.strokeWidthPxFn = other.strokeWidthPxFn;
      this[_attrs].mergeFrom(other[_attrs]);
      this.measureAxis = other.measureAxis;
      this.domainAxis = other.domainAxis;
    }).prototype = MutableSeries.prototype;
    dart.addTypeTests(MutableSeries);
    MutableSeries.prototype[_is_MutableSeries_default] = true;
    dart.addTypeCaches(MutableSeries);
    dart.setMethodSignature(MutableSeries, () => ({
      __proto__: dart.getMethods(MutableSeries.__proto__),
      setAttr: dart.gFnType(R => [dart.void, [dart.legacy(series$.AttributeKey$(dart.legacy(R))), dart.legacy(R)]]),
      getAttr: dart.gFnType(R => [dart.legacy(R), [dart.legacy(series$.AttributeKey$(dart.legacy(R)))]]),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(MutableSeries, () => ({
      __proto__: dart.getGetters(MutableSeries.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(MutableSeries, I[25]);
    dart.setFieldSignature(MutableSeries, () => ({
      __proto__: dart.getFields(MutableSeries.__proto__),
      id: dart.finalFieldType(dart.legacy(core.String)),
      displayName: dart.fieldType(dart.legacy(core.String)),
      overlaySeries: dart.fieldType(dart.legacy(core.bool)),
      seriesCategory: dart.fieldType(dart.legacy(core.String)),
      seriesColor: dart.fieldType(dart.legacy(color.Color)),
      seriesIndex: dart.fieldType(dart.legacy(core.int)),
      seriesMeasureTotal: dart.fieldType(dart.legacy(core.num)),
      data: dart.fieldType(dart.legacy(core.List)),
      keyFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      domainFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      domainFormatterFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(D)])), [dart.legacy(core.int)]))),
      domainLowerBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      domainUpperBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      measureFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureFormatterFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)])), [dart.legacy(core.int)]))),
      measureLowerBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureUpperBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureOffsetFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      rawMeasureFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      rawMeasureLowerBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      rawMeasureUpperBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      areaColorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      colorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      dashPatternFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), [dart.legacy(core.int)]))),
      fillColorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      fillPatternFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(chart_canvas.FillPatternType), [dart.legacy(core.int)]))),
      patternColorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      radiusPxFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      strokeWidthPxFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      labelAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      insideLabelStyleAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      outsideLabelStyleAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      [_attrs]: dart.finalFieldType(dart.legacy(series$.SeriesAttributes)),
      measureAxis: dart.fieldType(dart.legacy(axis.Axis)),
      domainAxis: dart.fieldType(dart.legacy(axis.Axis))
    }));
    dart.defineExtensionMethods(MutableSeries, ['_equals']);
    dart.defineExtensionAccessors(MutableSeries, ['hashCode']);
    return MutableSeries;
  });
  processed_series.MutableSeries = processed_series.MutableSeries$();
  dart.addTypeTests(processed_series.MutableSeries, _is_MutableSeries_default);
  symbol_renderer.BaseSymbolRenderer = class BaseSymbolRenderer extends core.Object {};
  (symbol_renderer.BaseSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.BaseSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.BaseSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.BaseSymbolRenderer);
  dart.setLibraryUri(symbol_renderer.BaseSymbolRenderer, I[26]);
  var isSolid$ = dart.privateName(symbol_renderer, "SymbolRenderer.isSolid");
  symbol_renderer.SymbolRenderer = class SymbolRenderer extends symbol_renderer.BaseSymbolRenderer {
    get isSolid() {
      return this[isSolid$];
    }
    set isSolid(value) {
      super.isSolid = value;
    }
    getSolidStrokeWidthPx(strokeWidthPx) {
      let t4;
      return dart.test(this.isSolid) ? strokeWidthPx : (t4 = strokeWidthPx, t4 == null ? 2.0 : t4);
    }
    getSolidFillColor(fillColor) {
      return dart.test(this.isSolid) ? fillColor : style_factory.StyleFactory.style.white;
    }
    _equals(other) {
      if (other == null) return false;
      return T$.SymbolRendererL().is(other) && other.isSolid == this.isSolid;
    }
    get hashCode() {
      return dart.hashCode(this.isSolid);
    }
  };
  (symbol_renderer.SymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : null;
    this[isSolid$] = isSolid;
    ;
  }).prototype = symbol_renderer.SymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.SymbolRenderer);
  dart.addTypeCaches(symbol_renderer.SymbolRenderer);
  dart.setMethodSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.SymbolRenderer.__proto__),
    getSolidStrokeWidthPx: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    getSolidFillColor: dart.fnType(dart.legacy(color.Color), [dart.legacy(color.Color)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getGetters(symbol_renderer.SymbolRenderer.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(symbol_renderer.SymbolRenderer, I[26]);
  dart.setFieldSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.SymbolRenderer.__proto__),
    isSolid: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(symbol_renderer.SymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.SymbolRenderer, ['hashCode']);
  symbol_renderer.PointSymbolRenderer = class PointSymbolRenderer extends symbol_renderer.BaseSymbolRenderer {};
  (symbol_renderer.PointSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.PointSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.PointSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.PointSymbolRenderer);
  dart.setLibraryUri(symbol_renderer.PointSymbolRenderer, I[26]);
  var radius$ = dart.privateName(symbol_renderer, "RoundedRectSymbolRenderer.radius");
  symbol_renderer.RoundedRectSymbolRenderer = class RoundedRectSymbolRenderer extends symbol_renderer.SymbolRenderer {
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      canvas.drawRRect(bounds, {fill: this.getSolidFillColor(fillColor), fillPattern: fillPattern, stroke: strokeColor, radius: this.radius, roundTopLeft: true, roundTopRight: true, roundBottomRight: true, roundBottomLeft: true});
    }
    shouldRepaint(oldRenderer) {
      T$.RoundedRectSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.RoundedRectSymbolRendererL().is(other) && other.radius == this.radius && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.radius);
      return hashcode;
    }
  };
  (symbol_renderer.RoundedRectSymbolRenderer.new = function(opts) {
    let t4;
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    this[radius$] = (t4 = radius, t4 == null ? 1.0 : t4);
    symbol_renderer.RoundedRectSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.RoundedRectSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RoundedRectSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.RoundedRectSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RoundedRectSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RoundedRectSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Rectangle$(dart.legacy(core.num)))], {dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), fillColor: dart.legacy(color.Color), fillPattern: dart.legacy(chart_canvas.FillPatternType), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.RoundedRectSymbolRenderer, I[26]);
  dart.setFieldSignature(symbol_renderer.RoundedRectSymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.RoundedRectSymbolRenderer.__proto__),
    radius: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(symbol_renderer.RoundedRectSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RoundedRectSymbolRenderer, ['hashCode']);
  var strokeWidth$ = dart.privateName(symbol_renderer, "LineSymbolRenderer.strokeWidth");
  var _dashPattern = dart.privateName(symbol_renderer, "_dashPattern");
  symbol_renderer.LineSymbolRenderer = class LineSymbolRenderer extends symbol_renderer.SymbolRenderer {
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    paint(canvas, bounds, opts) {
      let t4, t4$;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let centerHeight = (dart.notNull(bounds[$bottom]) - dart.notNull(bounds[$top])) / 2;
      let localDashPattern = (t4 = dashPattern, t4 == null ? this[_dashPattern] : t4);
      let roundEndCaps = localDashPattern == null;
      let localStrokeWidthPx = localDashPattern == null ? this.getSolidStrokeWidthPx((t4$ = strokeWidthPx, t4$ == null ? this.strokeWidth : t4$)) : 2;
      let left = bounds[$left];
      let right = bounds[$right];
      if (roundEndCaps && dart.notNull(bounds[$width]) >= 5) {
        left = dart.notNull(left) + 2;
        right = dart.notNull(right) - 2;
      }
      canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([new (T$.PointOfnumL()).new(left, centerHeight), new (T$.PointOfnumL()).new(right, centerHeight)]), dashPattern: localDashPattern, fill: this.getSolidFillColor(fillColor), roundEndCaps: roundEndCaps, stroke: strokeColor, strokeWidthPx: localStrokeWidthPx});
    }
    shouldRepaint(oldRenderer) {
      T$.LineSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.LineSymbolRendererL().is(other) && other.strokeWidth == this.strokeWidth && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.strokeWidth);
      return hashcode;
    }
  };
  (symbol_renderer.LineSymbolRenderer.new = function(opts) {
    let t4;
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[strokeWidth$] = (t4 = strokeWidth, t4 == null ? 4 : t4);
    this[_dashPattern] = dashPattern;
    symbol_renderer.LineSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.LineSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.LineSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.LineSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.LineSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.LineSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Rectangle$(dart.legacy(core.num)))], {dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), fillColor: dart.legacy(color.Color), fillPattern: dart.legacy(chart_canvas.FillPatternType), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.LineSymbolRenderer, I[26]);
  dart.setFieldSignature(symbol_renderer.LineSymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.LineSymbolRenderer.__proto__),
    strokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    [_dashPattern]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  dart.defineExtensionMethods(symbol_renderer.LineSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.LineSymbolRenderer, ['hashCode']);
  dart.defineLazy(symbol_renderer.LineSymbolRenderer, {
    /*symbol_renderer.LineSymbolRenderer.roundEndCapsPixels*/get roundEndCapsPixels() {
      return 2;
    },
    /*symbol_renderer.LineSymbolRenderer.minLengthToRoundCaps*/get minLengthToRoundCaps() {
      return 5;
    },
    /*symbol_renderer.LineSymbolRenderer.strokeWidthForRoundEndCaps*/get strokeWidthForRoundEndCaps() {
      return 4;
    },
    /*symbol_renderer.LineSymbolRenderer.strokeWidthForNonRoundedEndCaps*/get strokeWidthForNonRoundedEndCaps() {
      return 2;
    }
  }, true);
  symbol_renderer.CircleSymbolRenderer = class CircleSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let center = new (T$.PointOfnumL()).new(dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2, dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2);
      let radius = math.min(T$.numL(), bounds[$width], bounds[$height]) / 2;
      canvas.drawPoint({point: center, radius: radius, fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      T$.CircleSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.CircleSymbolRendererL().is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.runtimeType));
      return hashcode;
    }
  };
  (symbol_renderer.CircleSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.CircleSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.CircleSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.CircleSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.CircleSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.CircleSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.CircleSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Rectangle$(dart.legacy(core.num)))], {dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), fillColor: dart.legacy(color.Color), fillPattern: dart.legacy(chart_canvas.FillPatternType), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.CircleSymbolRenderer, I[26]);
  dart.defineExtensionMethods(symbol_renderer.CircleSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.CircleSymbolRenderer, ['hashCode']);
  symbol_renderer.RectSymbolRenderer = class RectSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      canvas.drawRect(bounds, {fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      T$.RectSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.RectSymbolRendererL().is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.runtimeType));
      return hashcode;
    }
  };
  (symbol_renderer.RectSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.RectSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.RectSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RectSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.RectSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RectSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RectSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Rectangle$(dart.legacy(core.num)))], {dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), fillColor: dart.legacy(color.Color), fillPattern: dart.legacy(chart_canvas.FillPatternType), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.RectSymbolRenderer, I[26]);
  dart.defineExtensionMethods(symbol_renderer.RectSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RectSymbolRenderer, ['hashCode']);
  symbol_renderer.TriangleSymbolRenderer = class TriangleSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let dy = math.sqrt(3) / 2 * dart.notNull(bounds[$width]);
      let centerX = (dart.notNull(bounds[$left]) + dart.notNull(bounds[$right])) / 2;
      canvas.drawPolygon({points: T$.JSArrayOfPointLOfnumL().of([new (T$.PointOfnumL()).new(bounds[$left], dart.notNull(bounds[$top]) + dy), new (T$.PointOfnumL()).new(bounds[$right], dart.notNull(bounds[$top]) + dy), new (T$.PointOfnumL()).new(centerX, bounds[$top])]), fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      T$.TriangleSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.TriangleSymbolRendererL().is(other) && super._equals(other);
    }
  };
  (symbol_renderer.TriangleSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.TriangleSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.TriangleSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.TriangleSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.TriangleSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.TriangleSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.TriangleSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Rectangle$(dart.legacy(core.num)))], {dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), fillColor: dart.legacy(color.Color), fillPattern: dart.legacy(chart_canvas.FillPatternType), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.TriangleSymbolRenderer, I[26]);
  dart.defineExtensionMethods(symbol_renderer.TriangleSymbolRenderer, ['_equals']);
  symbol_renderer.CylinderSymbolRenderer = class CylinderSymbolRenderer extends symbol_renderer.PointSymbolRenderer {
    paint(canvas, p1, radius, opts) {
      let p2 = opts && 'p2' in opts ? opts.p2 : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      if (p1 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p1 \"" + dart.str(p1) + "\""));
      }
      if (p2 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p2 \"" + dart.str(p2) + "\""));
      }
      let adjustedP1 = new (T$.PointOfdoubleL()).new(p1.x, p1.y);
      let adjustedP2 = new (T$.PointOfdoubleL()).new(p2.x, p2.y);
      canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([adjustedP1, adjustedP2]), stroke: strokeColor, roundEndCaps: true, strokeWidthPx: dart.notNull(radius) * 2});
    }
    shouldRepaint(oldRenderer) {
      T$.CylinderSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.CylinderSymbolRendererL().is(other);
    }
    get hashCode() {
      return dart.hashCode(this.runtimeType);
    }
  };
  (symbol_renderer.CylinderSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.CylinderSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.CylinderSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.CylinderSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.CylinderSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.CylinderSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Point$(dart.legacy(core.double))), dart.legacy(core.double)], {fillColor: dart.legacy(color.Color), p2: dart.legacy(math.Point$(dart.legacy(core.double))), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(symbol_renderer.CylinderSymbolRenderer, () => ({
    __proto__: dart.getGetters(symbol_renderer.CylinderSymbolRenderer.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(symbol_renderer.CylinderSymbolRenderer, I[26]);
  dart.defineExtensionMethods(symbol_renderer.CylinderSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.CylinderSymbolRenderer, ['hashCode']);
  symbol_renderer.RectangleRangeSymbolRenderer = class RectangleRangeSymbolRenderer extends symbol_renderer.PointSymbolRenderer {
    paint(canvas, p1, radius, opts) {
      let p2 = opts && 'p2' in opts ? opts.p2 : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      if (p1 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p1 \"" + dart.str(p1) + "\""));
      }
      if (p2 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p2 \"" + dart.str(p2) + "\""));
      }
      let adjustedP1 = new (T$.PointOfdoubleL()).new(p1.x, p1.y);
      let adjustedP2 = new (T$.PointOfdoubleL()).new(p2.x, p2.y);
      canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([adjustedP1, adjustedP2]), stroke: strokeColor, roundEndCaps: false, strokeWidthPx: dart.notNull(radius) * 2});
    }
    shouldRepaint(oldRenderer) {
      T$.RectangleRangeSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.RectangleRangeSymbolRendererL().is(other);
    }
    get hashCode() {
      return dart.hashCode(this.runtimeType);
    }
  };
  (symbol_renderer.RectangleRangeSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.RectangleRangeSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RectangleRangeSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.RectangleRangeSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RectangleRangeSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RectangleRangeSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Point$(dart.legacy(core.double))), dart.legacy(core.double)], {fillColor: dart.legacy(color.Color), p2: dart.legacy(math.Point$(dart.legacy(core.double))), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(symbol_renderer.RectangleRangeSymbolRenderer, () => ({
    __proto__: dart.getGetters(symbol_renderer.RectangleRangeSymbolRenderer.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(symbol_renderer.RectangleRangeSymbolRenderer, I[26]);
  dart.defineExtensionMethods(symbol_renderer.RectangleRangeSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RectangleRangeSymbolRenderer, ['hashCode']);
  var datum$0 = dart.privateName(datum_details, "DatumDetails.datum");
  var index$ = dart.privateName(datum_details, "DatumDetails.index");
  var domain$ = dart.privateName(datum_details, "DatumDetails.domain");
  var domainLowerBound$ = dart.privateName(datum_details, "DatumDetails.domainLowerBound");
  var domainUpperBound$ = dart.privateName(datum_details, "DatumDetails.domainUpperBound");
  var measure$ = dart.privateName(datum_details, "DatumDetails.measure");
  var measureLowerBound$ = dart.privateName(datum_details, "DatumDetails.measureLowerBound");
  var measureUpperBound$ = dart.privateName(datum_details, "DatumDetails.measureUpperBound");
  var measureOffset$ = dart.privateName(datum_details, "DatumDetails.measureOffset");
  var rawMeasure$ = dart.privateName(datum_details, "DatumDetails.rawMeasure");
  var rawMeasureLowerBound$ = dart.privateName(datum_details, "DatumDetails.rawMeasureLowerBound");
  var rawMeasureUpperBound$ = dart.privateName(datum_details, "DatumDetails.rawMeasureUpperBound");
  var series$1 = dart.privateName(datum_details, "DatumDetails.series");
  var color$ = dart.privateName(datum_details, "DatumDetails.color");
  var fillColor$ = dart.privateName(datum_details, "DatumDetails.fillColor");
  var fillPattern$ = dart.privateName(datum_details, "DatumDetails.fillPattern");
  var areaColor$ = dart.privateName(datum_details, "DatumDetails.areaColor");
  var dashPattern$ = dart.privateName(datum_details, "DatumDetails.dashPattern");
  var chartPosition$ = dart.privateName(datum_details, "DatumDetails.chartPosition");
  var chartPositionLower$ = dart.privateName(datum_details, "DatumDetails.chartPositionLower");
  var chartPositionUpper$ = dart.privateName(datum_details, "DatumDetails.chartPositionUpper");
  var domainDistance$ = dart.privateName(datum_details, "DatumDetails.domainDistance");
  var measureDistance$ = dart.privateName(datum_details, "DatumDetails.measureDistance");
  var relativeDistance$ = dart.privateName(datum_details, "DatumDetails.relativeDistance");
  var radiusPx$ = dart.privateName(datum_details, "DatumDetails.radiusPx");
  var symbolRenderer$0 = dart.privateName(datum_details, "DatumDetails.symbolRenderer");
  var strokeWidthPx$ = dart.privateName(datum_details, "DatumDetails.strokeWidthPx");
  var domainFormatter$ = dart.privateName(datum_details, "DatumDetails.domainFormatter");
  var measureFormatter$ = dart.privateName(datum_details, "DatumDetails.measureFormatter");
  const _is_DatumDetails_default = Symbol('_is_DatumDetails_default');
  datum_details.DatumDetails$ = dart.generic(D => {
    class DatumDetails extends core.Object {
      get datum() {
        return this[datum$0];
      }
      set datum(value) {
        super.datum = value;
      }
      get index() {
        return this[index$];
      }
      set index(value) {
        super.index = value;
      }
      get domain() {
        return this[domain$];
      }
      set domain(value) {
        super.domain = value;
      }
      get domainLowerBound() {
        return this[domainLowerBound$];
      }
      set domainLowerBound(value) {
        super.domainLowerBound = value;
      }
      get domainUpperBound() {
        return this[domainUpperBound$];
      }
      set domainUpperBound(value) {
        super.domainUpperBound = value;
      }
      get measure() {
        return this[measure$];
      }
      set measure(value) {
        super.measure = value;
      }
      get measureLowerBound() {
        return this[measureLowerBound$];
      }
      set measureLowerBound(value) {
        super.measureLowerBound = value;
      }
      get measureUpperBound() {
        return this[measureUpperBound$];
      }
      set measureUpperBound(value) {
        super.measureUpperBound = value;
      }
      get measureOffset() {
        return this[measureOffset$];
      }
      set measureOffset(value) {
        super.measureOffset = value;
      }
      get rawMeasure() {
        return this[rawMeasure$];
      }
      set rawMeasure(value) {
        super.rawMeasure = value;
      }
      get rawMeasureLowerBound() {
        return this[rawMeasureLowerBound$];
      }
      set rawMeasureLowerBound(value) {
        super.rawMeasureLowerBound = value;
      }
      get rawMeasureUpperBound() {
        return this[rawMeasureUpperBound$];
      }
      set rawMeasureUpperBound(value) {
        super.rawMeasureUpperBound = value;
      }
      get series() {
        return this[series$1];
      }
      set series(value) {
        super.series = value;
      }
      get color() {
        return this[color$];
      }
      set color(value) {
        super.color = value;
      }
      get fillColor() {
        return this[fillColor$];
      }
      set fillColor(value) {
        super.fillColor = value;
      }
      get fillPattern() {
        return this[fillPattern$];
      }
      set fillPattern(value) {
        super.fillPattern = value;
      }
      get areaColor() {
        return this[areaColor$];
      }
      set areaColor(value) {
        super.areaColor = value;
      }
      get dashPattern() {
        return this[dashPattern$];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get chartPosition() {
        return this[chartPosition$];
      }
      set chartPosition(value) {
        super.chartPosition = value;
      }
      get chartPositionLower() {
        return this[chartPositionLower$];
      }
      set chartPositionLower(value) {
        super.chartPositionLower = value;
      }
      get chartPositionUpper() {
        return this[chartPositionUpper$];
      }
      set chartPositionUpper(value) {
        super.chartPositionUpper = value;
      }
      get domainDistance() {
        return this[domainDistance$];
      }
      set domainDistance(value) {
        super.domainDistance = value;
      }
      get measureDistance() {
        return this[measureDistance$];
      }
      set measureDistance(value) {
        super.measureDistance = value;
      }
      get relativeDistance() {
        return this[relativeDistance$];
      }
      set relativeDistance(value) {
        super.relativeDistance = value;
      }
      get radiusPx() {
        return this[radiusPx$];
      }
      set radiusPx(value) {
        super.radiusPx = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$0];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get domainFormatter() {
        return this[domainFormatter$];
      }
      set domainFormatter(value) {
        this[domainFormatter$] = value;
      }
      get measureFormatter() {
        return this[measureFormatter$];
      }
      set measureFormatter(value) {
        this[measureFormatter$] = value;
      }
      static from(other, opts) {
        let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4, t4$5, t4$6, t4$7, t4$8, t4$9, t4$10, t4$11, t4$12, t4$13, t4$14, t4$15, t4$16, t4$17, t4$18, t4$19, t4$20, t4$21, t4$22, t4$23, t4$24, t4$25;
        let datum = opts && 'datum' in opts ? opts.datum : null;
        let index = opts && 'index' in opts ? opts.index : null;
        let domain = opts && 'domain' in opts ? opts.domain : null;
        let domainLowerBound = opts && 'domainLowerBound' in opts ? opts.domainLowerBound : null;
        let domainUpperBound = opts && 'domainUpperBound' in opts ? opts.domainUpperBound : null;
        let measure = opts && 'measure' in opts ? opts.measure : null;
        let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
        let measureLowerBound = opts && 'measureLowerBound' in opts ? opts.measureLowerBound : null;
        let measureUpperBound = opts && 'measureUpperBound' in opts ? opts.measureUpperBound : null;
        let measureOffset = opts && 'measureOffset' in opts ? opts.measureOffset : null;
        let rawMeasure = opts && 'rawMeasure' in opts ? opts.rawMeasure : null;
        let rawMeasureLowerBound = opts && 'rawMeasureLowerBound' in opts ? opts.rawMeasureLowerBound : null;
        let rawMeasureUpperBound = opts && 'rawMeasureUpperBound' in opts ? opts.rawMeasureUpperBound : null;
        let series = opts && 'series' in opts ? opts.series : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let chartPosition = opts && 'chartPosition' in opts ? opts.chartPosition : null;
        let chartPositionLower = opts && 'chartPositionLower' in opts ? opts.chartPositionLower : null;
        let chartPositionUpper = opts && 'chartPositionUpper' in opts ? opts.chartPositionUpper : null;
        let domainFormatter = opts && 'domainFormatter' in opts ? opts.domainFormatter : null;
        let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
        let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
        let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
        let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        return new (datum_details.DatumDetails$(dart.legacy(D))).new({datum: (t4 = datum, t4 == null ? other.datum : t4), index: (t4$ = index, t4$ == null ? other.index : t4$), domain: (t4$0 = domain, t4$0 == null ? other.domain : t4$0), domainFormatter: (t4$1 = domainFormatter, t4$1 == null ? dart.legacy(dart.fnType(T$.StringL(), [dart.legacy(D)])).as(other.domainFormatter) : t4$1), domainLowerBound: (t4$2 = domainLowerBound, t4$2 == null ? other.domainLowerBound : t4$2), domainUpperBound: (t4$3 = domainUpperBound, t4$3 == null ? other.domainUpperBound : t4$3), measure: (t4$4 = measure, t4$4 == null ? other.measure : t4$4), measureFormatter: (t4$5 = measureFormatter, t4$5 == null ? other.measureFormatter : t4$5), measureLowerBound: (t4$6 = measureLowerBound, t4$6 == null ? other.measureLowerBound : t4$6), measureUpperBound: (t4$7 = measureUpperBound, t4$7 == null ? other.measureUpperBound : t4$7), measureOffset: (t4$8 = measureOffset, t4$8 == null ? other.measureOffset : t4$8), rawMeasure: (t4$9 = rawMeasure, t4$9 == null ? other.rawMeasure : t4$9), rawMeasureLowerBound: (t4$10 = rawMeasureLowerBound, t4$10 == null ? other.rawMeasureLowerBound : t4$10), rawMeasureUpperBound: (t4$11 = rawMeasureUpperBound, t4$11 == null ? other.rawMeasureUpperBound : t4$11), series: (t4$12 = series, t4$12 == null ? other.series : t4$12), color: (t4$13 = color, t4$13 == null ? other.color : t4$13), fillColor: (t4$14 = fillColor, t4$14 == null ? other.fillColor : t4$14), fillPattern: (t4$15 = fillPattern, t4$15 == null ? other.fillPattern : t4$15), areaColor: (t4$16 = areaColor, t4$16 == null ? other.areaColor : t4$16), dashPattern: (t4$17 = dashPattern, t4$17 == null ? other.dashPattern : t4$17), chartPosition: (t4$18 = chartPosition, t4$18 == null ? other.chartPosition : t4$18), chartPositionLower: (t4$19 = chartPositionLower, t4$19 == null ? other.chartPositionLower : t4$19), chartPositionUpper: (t4$20 = chartPositionUpper, t4$20 == null ? other.chartPositionUpper : t4$20), domainDistance: (t4$21 = domainDistance, t4$21 == null ? other.domainDistance : t4$21), measureDistance: (t4$22 = measureDistance, t4$22 == null ? other.measureDistance : t4$22), radiusPx: (t4$23 = radiusPx, t4$23 == null ? other.radiusPx : t4$23), symbolRenderer: (t4$24 = symbolRenderer, t4$24 == null ? other.symbolRenderer : t4$24), strokeWidthPx: (t4$25 = radiusPx, t4$25 == null ? other.strokeWidthPx : t4$25)});
      }
      get formattedDomain() {
        let t4;
        return this.domainFormatter != null ? (t4 = this.domain, this.domainFormatter(t4)) : dart.toString(this.domain);
      }
      get formattedMeasure() {
        let t4;
        return this.measureFormatter != null ? (t4 = this.measure, this.measureFormatter(t4)) : dart.toString(this.measure);
      }
    }
    (DatumDetails.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let domainFormatter = opts && 'domainFormatter' in opts ? opts.domainFormatter : null;
      let domainLowerBound = opts && 'domainLowerBound' in opts ? opts.domainLowerBound : null;
      let domainUpperBound = opts && 'domainUpperBound' in opts ? opts.domainUpperBound : null;
      let measure = opts && 'measure' in opts ? opts.measure : null;
      let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
      let measureLowerBound = opts && 'measureLowerBound' in opts ? opts.measureLowerBound : null;
      let measureUpperBound = opts && 'measureUpperBound' in opts ? opts.measureUpperBound : null;
      let measureOffset = opts && 'measureOffset' in opts ? opts.measureOffset : null;
      let rawMeasure = opts && 'rawMeasure' in opts ? opts.rawMeasure : null;
      let rawMeasureLowerBound = opts && 'rawMeasureLowerBound' in opts ? opts.rawMeasureLowerBound : null;
      let rawMeasureUpperBound = opts && 'rawMeasureUpperBound' in opts ? opts.rawMeasureUpperBound : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let chartPosition = opts && 'chartPosition' in opts ? opts.chartPosition : null;
      let chartPositionLower = opts && 'chartPositionLower' in opts ? opts.chartPositionLower : null;
      let chartPositionUpper = opts && 'chartPositionUpper' in opts ? opts.chartPositionUpper : null;
      let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
      let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
      let relativeDistance = opts && 'relativeDistance' in opts ? opts.relativeDistance : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      this[datum$0] = datum;
      this[index$] = index;
      this[domain$] = domain;
      this[domainFormatter$] = domainFormatter;
      this[domainLowerBound$] = domainLowerBound;
      this[domainUpperBound$] = domainUpperBound;
      this[measure$] = measure;
      this[measureFormatter$] = measureFormatter;
      this[measureLowerBound$] = measureLowerBound;
      this[measureUpperBound$] = measureUpperBound;
      this[measureOffset$] = measureOffset;
      this[rawMeasure$] = rawMeasure;
      this[rawMeasureLowerBound$] = rawMeasureLowerBound;
      this[rawMeasureUpperBound$] = rawMeasureUpperBound;
      this[series$1] = series;
      this[color$] = color;
      this[fillColor$] = fillColor;
      this[fillPattern$] = fillPattern;
      this[areaColor$] = areaColor;
      this[dashPattern$] = dashPattern;
      this[chartPosition$] = chartPosition;
      this[chartPositionLower$] = chartPositionLower;
      this[chartPositionUpper$] = chartPositionUpper;
      this[domainDistance$] = domainDistance;
      this[measureDistance$] = measureDistance;
      this[relativeDistance$] = relativeDistance;
      this[radiusPx$] = radiusPx;
      this[symbolRenderer$0] = symbolRenderer;
      this[strokeWidthPx$] = strokeWidthPx;
      ;
    }).prototype = DatumDetails.prototype;
    dart.addTypeTests(DatumDetails);
    DatumDetails.prototype[_is_DatumDetails_default] = true;
    dart.addTypeCaches(DatumDetails);
    dart.setGetterSignature(DatumDetails, () => ({
      __proto__: dart.getGetters(DatumDetails.__proto__),
      formattedDomain: dart.legacy(core.String),
      formattedMeasure: dart.legacy(core.String)
    }));
    dart.setLibraryUri(DatumDetails, I[27]);
    dart.setFieldSignature(DatumDetails, () => ({
      __proto__: dart.getFields(DatumDetails.__proto__),
      datum: dart.finalFieldType(dart.dynamic),
      index: dart.finalFieldType(dart.legacy(core.int)),
      domain: dart.finalFieldType(dart.legacy(D)),
      domainLowerBound: dart.finalFieldType(dart.legacy(D)),
      domainUpperBound: dart.finalFieldType(dart.legacy(D)),
      measure: dart.finalFieldType(dart.legacy(core.num)),
      measureLowerBound: dart.finalFieldType(dart.legacy(core.num)),
      measureUpperBound: dart.finalFieldType(dart.legacy(core.num)),
      measureOffset: dart.finalFieldType(dart.legacy(core.num)),
      rawMeasure: dart.finalFieldType(dart.legacy(core.num)),
      rawMeasureLowerBound: dart.finalFieldType(dart.legacy(core.num)),
      rawMeasureUpperBound: dart.finalFieldType(dart.legacy(core.num)),
      series: dart.finalFieldType(dart.legacy(processed_series.ImmutableSeries$(dart.legacy(D)))),
      color: dart.finalFieldType(dart.legacy(color.Color)),
      fillColor: dart.finalFieldType(dart.legacy(color.Color)),
      fillPattern: dart.finalFieldType(dart.legacy(chart_canvas.FillPatternType)),
      areaColor: dart.finalFieldType(dart.legacy(color.Color)),
      dashPattern: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
      chartPosition: dart.finalFieldType(dart.legacy(math.Point$(dart.legacy(core.double)))),
      chartPositionLower: dart.finalFieldType(dart.legacy(math.Point$(dart.legacy(core.double)))),
      chartPositionUpper: dart.finalFieldType(dart.legacy(math.Point$(dart.legacy(core.double)))),
      domainDistance: dart.finalFieldType(dart.legacy(core.double)),
      measureDistance: dart.finalFieldType(dart.legacy(core.double)),
      relativeDistance: dart.finalFieldType(dart.legacy(core.double)),
      radiusPx: dart.finalFieldType(dart.legacy(core.double)),
      symbolRenderer: dart.finalFieldType(dart.legacy(symbol_renderer.SymbolRenderer)),
      strokeWidthPx: dart.finalFieldType(dart.legacy(core.double)),
      domainFormatter: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(D)]))),
      measureFormatter: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)])))
    }));
    return DatumDetails;
  });
  datum_details.DatumDetails = datum_details.DatumDetails$();
  dart.addTypeTests(datum_details.DatumDetails, _is_DatumDetails_default);
  var _sizes = dart.privateName(layout_margin_strategy, "_sizes");
  var _total = dart.privateName(layout_margin_strategy, "_total");
  layout_margin_strategy.SizeList = class SizeList extends core.Object {
    _get(i) {
      return this[_sizes][$_get](T$.intL().as(i));
    }
    get total() {
      return this[_total];
    }
    get length() {
      return this[_sizes][$length];
    }
    add(size) {
      this[_sizes][$add](T$.intL().as(size));
      this[_total] = dart.asNullableInt(dart.notNull(this[_total]) + dart.notNull(T$.numL().as(size)));
    }
    adjust(index, amount) {
      let t5, t4;
      t4 = this[_sizes];
      t5 = index;
      t4[$_set](t5, dart.notNull(t4[$_get](t5)) + dart.notNull(amount));
      this[_total] = dart.notNull(this[_total]) + dart.notNull(amount);
    }
  };
  (layout_margin_strategy.SizeList.new = function() {
    this[_sizes] = T$.JSArrayOfintL().of([]);
    this[_total] = 0;
    ;
  }).prototype = layout_margin_strategy.SizeList.prototype;
  dart.addTypeTests(layout_margin_strategy.SizeList);
  dart.addTypeCaches(layout_margin_strategy.SizeList);
  dart.setMethodSignature(layout_margin_strategy.SizeList, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.SizeList.__proto__),
    _get: dart.fnType(dart.legacy(core.int), [dart.dynamic]),
    add: dart.fnType(dart.void, [dart.dynamic]),
    adjust: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setGetterSignature(layout_margin_strategy.SizeList, () => ({
    __proto__: dart.getGetters(layout_margin_strategy.SizeList.__proto__),
    total: dart.legacy(core.int),
    length: dart.legacy(core.int)
  }));
  dart.setLibraryUri(layout_margin_strategy.SizeList, I[28]);
  dart.setFieldSignature(layout_margin_strategy.SizeList, () => ({
    __proto__: dart.getFields(layout_margin_strategy.SizeList.__proto__),
    [_sizes]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    [_total]: dart.fieldType(dart.legacy(core.int))
  }));
  layout_margin_strategy._DesiredViewSizes = class _DesiredViewSizes extends core.Object {
    add(preferred, minimum) {
      this.preferredSizes.add(preferred);
      this.minimumSizes.add(minimum);
    }
    adjustedTo(maxSize) {
      if (dart.dtest(dart.dsend(maxSize, '<', [this.preferredSizes.total]))) {
        let delta = dart.asNullableInt(dart.notNull(this.preferredSizes.total) - dart.notNull(T$.numL().as(maxSize)));
        for (let i = dart.notNull(this.preferredSizes.length) - 1; i >= 0; i = i - 1) {
          let viewAvailablePx = dart.notNull(this.preferredSizes._get(i)) - dart.notNull(this.minimumSizes._get(i));
          if (viewAvailablePx < delta) {
            this.preferredSizes.adjust(i, -viewAvailablePx);
            delta = delta - viewAvailablePx;
          } else {
            this.preferredSizes.adjust(i, -delta);
            return;
          }
        }
      }
    }
  };
  (layout_margin_strategy._DesiredViewSizes.new = function() {
    this.preferredSizes = new layout_margin_strategy.SizeList.new();
    this.minimumSizes = new layout_margin_strategy.SizeList.new();
    ;
  }).prototype = layout_margin_strategy._DesiredViewSizes.prototype;
  dart.addTypeTests(layout_margin_strategy._DesiredViewSizes);
  dart.addTypeCaches(layout_margin_strategy._DesiredViewSizes);
  dart.setMethodSignature(layout_margin_strategy._DesiredViewSizes, () => ({
    __proto__: dart.getMethods(layout_margin_strategy._DesiredViewSizes.__proto__),
    add: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    adjustedTo: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setLibraryUri(layout_margin_strategy._DesiredViewSizes, I[28]);
  dart.setFieldSignature(layout_margin_strategy._DesiredViewSizes, () => ({
    __proto__: dart.getFields(layout_margin_strategy._DesiredViewSizes.__proto__),
    preferredSizes: dart.finalFieldType(dart.legacy(layout_margin_strategy.SizeList)),
    minimumSizes: dart.finalFieldType(dart.legacy(layout_margin_strategy.SizeList))
  }));
  layout_margin_strategy.VerticalMarginStrategy = class VerticalMarginStrategy extends core.Object {
    measure(views, opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fullHeight = opts && 'fullHeight' in opts ? opts.fullHeight : null;
      let measuredWidths = new layout_margin_strategy._DesiredViewSizes.new();
      let remainingWidth = maxWidth;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let viewMargin = params.viewMargin;
        let availableHeight = dart.notNull(dart.test(params.isFullPosition) ? fullHeight : height) - dart.notNull(viewMargin.height);
        remainingWidth = dart.notNull(remainingWidth) - dart.notNull(viewMargin.width);
        maxWidth = dart.notNull(maxWidth) - dart.notNull(viewMargin.width);
        let size = layout_view.ViewMeasuredSizes.zero;
        if (dart.notNull(remainingWidth) > 0 || availableHeight > 0) {
          size = view.measure(remainingWidth, availableHeight);
          remainingWidth = dart.notNull(remainingWidth) - dart.notNull(size.preferredWidth);
        }
        measuredWidths.add(size.preferredWidth, size.minWidth);
      }, T$.LayoutViewLToNull()));
      measuredWidths.adjustedTo(maxWidth);
      return measuredWidths.preferredSizes;
    }
  };
  (layout_margin_strategy.VerticalMarginStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.VerticalMarginStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.VerticalMarginStrategy);
  dart.addTypeCaches(layout_margin_strategy.VerticalMarginStrategy);
  dart.setMethodSignature(layout_margin_strategy.VerticalMarginStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.VerticalMarginStrategy.__proto__),
    measure: dart.fnType(dart.legacy(layout_margin_strategy.SizeList), [dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView)))], {fullHeight: dart.legacy(core.int), height: dart.legacy(core.int), maxWidth: dart.legacy(core.int)}, {})
  }));
  dart.setLibraryUri(layout_margin_strategy.VerticalMarginStrategy, I[28]);
  layout_margin_strategy.LeftMarginLayoutStrategy = class LeftMarginLayoutStrategy extends layout_margin_strategy.VerticalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsRight = drawAreaBounds[$left];
      let i = 0;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let width = measuredSizes._get(i);
        let left = dart.notNull(prevBoundsRight) - dart.notNull(params.viewMargin.rightPx) - dart.notNull(width);
        let height = dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$height] : drawAreaBounds[$height]) - dart.notNull(params.viewMargin.height);
        let top = dart.notNull(params.viewMargin.topPx) + dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$top] : drawAreaBounds[$top]);
        prevBoundsRight = left - dart.notNull(params.viewMargin.leftPx);
        view.layout(new (T$.RectangleOfintL()).new(left, top, width, height), drawAreaBounds);
        i = i + 1;
      }, T$.LayoutViewLToNull()));
    }
  };
  (layout_margin_strategy.LeftMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.LeftMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.LeftMarginLayoutStrategy);
  dart.addTypeCaches(layout_margin_strategy.LeftMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.LeftMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.LeftMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView))), dart.legacy(layout_margin_strategy.SizeList), dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(math.Rectangle$(dart.legacy(core.int)))])
  }));
  dart.setLibraryUri(layout_margin_strategy.LeftMarginLayoutStrategy, I[28]);
  layout_margin_strategy.RightMarginLayoutStrategy = class RightMarginLayoutStrategy extends layout_margin_strategy.VerticalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsLeft = drawAreaBounds[$right];
      let i = 0;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let width = measuredSizes._get(i);
        let left = dart.notNull(prevBoundsLeft) + dart.notNull(params.viewMargin.leftPx);
        let height = dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$height] : drawAreaBounds[$height]) - dart.notNull(params.viewMargin.height);
        let top = dart.notNull(params.viewMargin.topPx) + dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$top] : drawAreaBounds[$top]);
        prevBoundsLeft = left + dart.notNull(width) + dart.notNull(params.viewMargin.rightPx);
        view.layout(new (T$.RectangleOfintL()).new(left, top, width, height), drawAreaBounds);
        i = i + 1;
      }, T$.LayoutViewLToNull()));
    }
  };
  (layout_margin_strategy.RightMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.RightMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.RightMarginLayoutStrategy);
  dart.addTypeCaches(layout_margin_strategy.RightMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.RightMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.RightMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView))), dart.legacy(layout_margin_strategy.SizeList), dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(math.Rectangle$(dart.legacy(core.int)))])
  }));
  dart.setLibraryUri(layout_margin_strategy.RightMarginLayoutStrategy, I[28]);
  layout_margin_strategy.HorizontalMarginStrategy = class HorizontalMarginStrategy extends core.Object {
    measure(views, opts) {
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let fullWidth = opts && 'fullWidth' in opts ? opts.fullWidth : null;
      let measuredHeights = new layout_margin_strategy._DesiredViewSizes.new();
      let remainingHeight = maxHeight;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let viewMargin = params.viewMargin;
        let availableWidth = dart.notNull(dart.test(params.isFullPosition) ? fullWidth : width) - dart.notNull(viewMargin.width);
        remainingHeight = dart.notNull(remainingHeight) - dart.notNull(viewMargin.height);
        maxHeight = dart.notNull(maxHeight) - dart.notNull(viewMargin.height);
        let size = layout_view.ViewMeasuredSizes.zero;
        if (dart.notNull(remainingHeight) > 0 || availableWidth > 0) {
          size = view.measure(availableWidth, remainingHeight);
          remainingHeight = dart.notNull(remainingHeight) - dart.notNull(size.preferredHeight);
        }
        measuredHeights.add(size.preferredHeight, size.minHeight);
      }, T$.LayoutViewLToNull()));
      measuredHeights.adjustedTo(maxHeight);
      return measuredHeights.preferredSizes;
    }
  };
  (layout_margin_strategy.HorizontalMarginStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.HorizontalMarginStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.HorizontalMarginStrategy);
  dart.addTypeCaches(layout_margin_strategy.HorizontalMarginStrategy);
  dart.setMethodSignature(layout_margin_strategy.HorizontalMarginStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.HorizontalMarginStrategy.__proto__),
    measure: dart.fnType(dart.legacy(layout_margin_strategy.SizeList), [dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView)))], {fullWidth: dart.legacy(core.int), maxHeight: dart.legacy(core.int), width: dart.legacy(core.int)}, {})
  }));
  dart.setLibraryUri(layout_margin_strategy.HorizontalMarginStrategy, I[28]);
  layout_margin_strategy.TopMarginLayoutStrategy = class TopMarginLayoutStrategy extends layout_margin_strategy.HorizontalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsBottom = drawAreaBounds[$top];
      let i = 0;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let height = measuredSizes._get(i);
        let top = dart.notNull(prevBoundsBottom) - dart.notNull(height) - dart.notNull(params.viewMargin.bottomPx);
        let width = dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$width] : drawAreaBounds[$width]) - dart.notNull(params.viewMargin.width);
        let left = dart.notNull(params.viewMargin.leftPx) + dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$left] : drawAreaBounds[$left]);
        prevBoundsBottom = top - dart.notNull(params.viewMargin.topPx);
        view.layout(new (T$.RectangleOfintL()).new(left, top, width, height), drawAreaBounds);
        i = i + 1;
      }, T$.LayoutViewLToNull()));
    }
  };
  (layout_margin_strategy.TopMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.TopMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.TopMarginLayoutStrategy);
  dart.addTypeCaches(layout_margin_strategy.TopMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.TopMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.TopMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView))), dart.legacy(layout_margin_strategy.SizeList), dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(math.Rectangle$(dart.legacy(core.int)))])
  }));
  dart.setLibraryUri(layout_margin_strategy.TopMarginLayoutStrategy, I[28]);
  layout_margin_strategy.BottomMarginLayoutStrategy = class BottomMarginLayoutStrategy extends layout_margin_strategy.HorizontalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsTop = drawAreaBounds[$bottom];
      let i = 0;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let height = measuredSizes._get(i);
        let top = dart.notNull(prevBoundsTop) + dart.notNull(params.viewMargin.topPx);
        let width = dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$width] : drawAreaBounds[$width]) - dart.notNull(params.viewMargin.width);
        let left = dart.notNull(params.viewMargin.leftPx) + dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$left] : drawAreaBounds[$left]);
        prevBoundsTop = top + dart.notNull(height) + dart.notNull(params.viewMargin.bottomPx);
        view.layout(new (T$.RectangleOfintL()).new(left, top, width, height), drawAreaBounds);
        i = i + 1;
      }, T$.LayoutViewLToNull()));
    }
  };
  (layout_margin_strategy.BottomMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.BottomMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.BottomMarginLayoutStrategy);
  dart.addTypeCaches(layout_margin_strategy.BottomMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.BottomMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.BottomMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView))), dart.legacy(layout_margin_strategy.SizeList), dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(math.Rectangle$(dart.legacy(core.int)))])
  }));
  dart.setLibraryUri(layout_margin_strategy.BottomMarginLayoutStrategy, I[28]);
  var config$ = dart.privateName(layout_manager_impl, "LayoutManagerImpl.config");
  var _views = dart.privateName(layout_manager_impl, "_views");
  var _paintOrderedViews = dart.privateName(layout_manager_impl, "_paintOrderedViews");
  var _positionOrderedViews = dart.privateName(layout_manager_impl, "_positionOrderedViews");
  var _measurements = dart.privateName(layout_manager_impl, "_measurements");
  var _drawAreaBounds$ = dart.privateName(layout_manager_impl, "_drawAreaBounds");
  var _drawAreaBoundsOutdated = dart.privateName(layout_manager_impl, "_drawAreaBoundsOutdated");
  var _viewsNeedPaintSort = dart.privateName(layout_manager_impl, "_viewsNeedPaintSort");
  var _viewsNeedPositionSort = dart.privateName(layout_manager_impl, "_viewsNeedPositionSort");
  var _viewsForPositions = dart.privateName(layout_manager_impl, "_viewsForPositions");
  var _measure = dart.privateName(layout_manager_impl, "_measure");
  layout_manager_impl.LayoutManagerImpl = class LayoutManagerImpl extends core.Object {
    get config() {
      return this[config$];
    }
    set config(value) {
      this[config$] = value;
    }
    addView(view) {
      this[_views][$add](view);
      this[_drawAreaBoundsOutdated] = true;
      this[_viewsNeedPositionSort] = true;
      this[_viewsNeedPaintSort] = true;
    }
    removeView(view) {
      if (dart.test(this[_views][$remove](view))) {
        this[_drawAreaBoundsOutdated] = true;
        this[_viewsNeedPositionSort] = true;
        this[_viewsNeedPaintSort] = true;
      }
    }
    isAttached(view) {
      return this[_views][$contains](view);
    }
    get paintOrderedViews() {
      if (dart.test(this[_viewsNeedPaintSort])) {
        this[_paintOrderedViews] = T$.ListOfLayoutViewL().from(this[_views]);
        this[_paintOrderedViews][$sort](dart.fn((v1, v2) => v1.layoutConfig.paintOrder[$compareTo](v2.layoutConfig.paintOrder), T$.LayoutViewLAndLayoutViewLTointL()));
        this[_viewsNeedPaintSort] = false;
      }
      return this[_paintOrderedViews];
    }
    get positionOrderedViews() {
      if (dart.test(this[_viewsNeedPositionSort])) {
        this[_positionOrderedViews] = T$.ListOfLayoutViewL().from(this[_views]);
        this[_positionOrderedViews][$sort](dart.fn((v1, v2) => v1.layoutConfig.positionOrder[$compareTo](v2.layoutConfig.positionOrder), T$.LayoutViewLAndLayoutViewLTointL()));
        this[_viewsNeedPositionSort] = false;
      }
      return this[_positionOrderedViews];
    }
    get drawAreaBounds() {
      if (!(this[_drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[29], 111, 12, "_drawAreaBoundsOutdated == false");
      return this[_drawAreaBounds$];
    }
    get drawableLayoutAreaBounds() {
      let t4, t4$;
      if (!(this[_drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[29], 117, 12, "_drawAreaBoundsOutdated == false");
      let drawableViews = this[_views][$where](dart.fn(view => view.isSeriesRenderer, T$.LayoutViewLToboolL()));
      let componentBounds = (t4$ = (t4 = drawableViews, t4 == null ? null : t4[$first]), t4$ == null ? null : t4$.componentBounds);
      if (componentBounds != null) {
        for (let view of drawableViews[$skip](1)) {
          if (view.componentBounds != null) {
            componentBounds = componentBounds[$boundingBox](view.componentBounds);
          }
        }
      } else {
        componentBounds = new (T$.RectangleOfintL()).new(0, 0, 0, 0);
      }
      return componentBounds;
    }
    get marginBottom() {
      if (!(this[_drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[29], 139, 12, "_drawAreaBoundsOutdated == false");
      return this[_measurements].bottomHeight;
    }
    get marginLeft() {
      if (!(this[_drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[29], 145, 12, "_drawAreaBoundsOutdated == false");
      return this[_measurements].leftWidth;
    }
    get marginRight() {
      if (!(this[_drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[29], 151, 12, "_drawAreaBoundsOutdated == false");
      return this[_measurements].rightWidth;
    }
    get marginTop() {
      if (!(this[_drawAreaBoundsOutdated] === false)) dart.assertFailed(null, I[29], 157, 12, "_drawAreaBoundsOutdated == false");
      return this[_measurements].topHeight;
    }
    withinDrawArea(point) {
      return this[_drawAreaBounds$][$containsPoint](point);
    }
    measure(width, height) {
      let topViews = this[_viewsForPositions](layout_view.LayoutPosition.Top, layout_view.LayoutPosition.FullTop);
      let rightViews = this[_viewsForPositions](layout_view.LayoutPosition.Right, layout_view.LayoutPosition.FullRight);
      let bottomViews = this[_viewsForPositions](layout_view.LayoutPosition.Bottom, layout_view.LayoutPosition.FullBottom);
      let leftViews = this[_viewsForPositions](layout_view.LayoutPosition.Left, layout_view.LayoutPosition.FullLeft);
      let measurements = this[_measure](width, height, {topViews: topViews, rightViews: rightViews, bottomViews: bottomViews, leftViews: leftViews, useMax: true});
      let secondMeasurements = this[_measure](width, height, {topViews: topViews, rightViews: rightViews, bottomViews: bottomViews, leftViews: leftViews, previousMeasurements: measurements, useMax: true});
      if (measurements.leftWidth != secondMeasurements.leftWidth || measurements.rightWidth != secondMeasurements.rightWidth || measurements.topHeight != secondMeasurements.topHeight || measurements.bottomHeight != secondMeasurements.bottomHeight) {
        let thirdMeasurements = this[_measure](width, height, {topViews: topViews, rightViews: rightViews, bottomViews: bottomViews, leftViews: leftViews, previousMeasurements: secondMeasurements, useMax: false});
        measurements = thirdMeasurements;
      } else {
        measurements = secondMeasurements;
      }
      this[_measurements] = measurements;
      let drawAreaWidth = math.max(T$.intL(), 20, dart.notNull(width) - dart.notNull(measurements.leftWidth) - dart.notNull(measurements.rightWidth));
      let drawAreaHeight = math.max(T$.intL(), 20, dart.notNull(height) - dart.notNull(measurements.bottomHeight) - dart.notNull(measurements.topHeight));
      this[_drawAreaBounds$] = new (T$.RectangleOfintL()).new(measurements.leftWidth, measurements.topHeight, drawAreaWidth, drawAreaHeight);
      this[_drawAreaBoundsOutdated] = false;
    }
    layout(width, height) {
      let topViews = this[_viewsForPositions](layout_view.LayoutPosition.Top, layout_view.LayoutPosition.FullTop);
      let rightViews = this[_viewsForPositions](layout_view.LayoutPosition.Right, layout_view.LayoutPosition.FullRight);
      let bottomViews = this[_viewsForPositions](layout_view.LayoutPosition.Bottom, layout_view.LayoutPosition.FullBottom);
      let leftViews = this[_viewsForPositions](layout_view.LayoutPosition.Left, layout_view.LayoutPosition.FullLeft);
      let drawAreaViews = this[_viewsForPositions](layout_view.LayoutPosition.DrawArea);
      let fullBounds = new (T$.RectangleOfintL()).new(0, 0, width, height);
      new layout_margin_strategy.LeftMarginLayoutStrategy.new().layout(leftViews, this[_measurements].leftSizes, fullBounds, this.drawAreaBounds);
      new layout_margin_strategy.RightMarginLayoutStrategy.new().layout(rightViews, this[_measurements].rightSizes, fullBounds, this.drawAreaBounds);
      new layout_margin_strategy.BottomMarginLayoutStrategy.new().layout(bottomViews, this[_measurements].bottomSizes, fullBounds, this.drawAreaBounds);
      new layout_margin_strategy.TopMarginLayoutStrategy.new().layout(topViews, this[_measurements].topSizes, fullBounds, this.drawAreaBounds);
      drawAreaViews[$forEach](dart.fn(view => view.layout(this[_drawAreaBounds$], this[_drawAreaBounds$]), T$.LayoutViewLTovoid()));
    }
    [_viewsForPositions](p1, p2 = null) {
      return this.positionOrderedViews[$where](dart.fn(view => view.layoutConfig.position == p1 || p2 != null && view.layoutConfig.position == p2, T$.LayoutViewLToboolL()));
    }
    [_measure](width, height, opts) {
      let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4, t4$5;
      let topViews = opts && 'topViews' in opts ? opts.topViews : null;
      let rightViews = opts && 'rightViews' in opts ? opts.rightViews : null;
      let bottomViews = opts && 'bottomViews' in opts ? opts.bottomViews : null;
      let leftViews = opts && 'leftViews' in opts ? opts.leftViews : null;
      let previousMeasurements = opts && 'previousMeasurements' in opts ? opts.previousMeasurements : null;
      let useMax = opts && 'useMax' in opts ? opts.useMax : null;
      let maxLeftWidth = this.config.leftSpec.getMaxPixels(width);
      let maxRightWidth = this.config.rightSpec.getMaxPixels(width);
      let maxBottomHeight = this.config.bottomSpec.getMaxPixels(height);
      let maxTopHeight = this.config.topSpec.getMaxPixels(height);
      let leftWidth = (t4$ = (t4 = previousMeasurements, t4 == null ? null : t4.leftWidth), t4$ == null ? maxLeftWidth : t4$);
      let rightWidth = (t4$1 = (t4$0 = previousMeasurements, t4$0 == null ? null : t4$0.rightWidth), t4$1 == null ? maxRightWidth : t4$1);
      let bottomHeight = (t4$3 = (t4$2 = previousMeasurements, t4$2 == null ? null : t4$2.bottomHeight), t4$3 == null ? maxBottomHeight : t4$3);
      let topHeight = (t4$5 = (t4$4 = previousMeasurements, t4$4 == null ? null : t4$4.topHeight), t4$5 == null ? maxTopHeight : t4$5);
      let adjustedHeight = previousMeasurements != null ? dart.notNull(height) - dart.notNull(bottomHeight) - dart.notNull(topHeight) : height;
      let leftSizes = new layout_margin_strategy.LeftMarginLayoutStrategy.new().measure(leftViews, {maxWidth: dart.test(useMax) ? maxLeftWidth : leftWidth, height: adjustedHeight, fullHeight: height});
      leftWidth = math.max(T$.intL(), leftSizes.total, this.config.leftSpec.getMinPixels(width));
      let rightSizes = new layout_margin_strategy.RightMarginLayoutStrategy.new().measure(rightViews, {maxWidth: dart.test(useMax) ? maxRightWidth : rightWidth, height: adjustedHeight, fullHeight: height});
      rightWidth = math.max(T$.intL(), rightSizes.total, this.config.rightSpec.getMinPixels(width));
      let adjustedWidth = dart.notNull(width) - dart.notNull(leftWidth) - dart.notNull(rightWidth);
      let bottomSizes = new layout_margin_strategy.BottomMarginLayoutStrategy.new().measure(bottomViews, {maxHeight: dart.test(useMax) ? maxBottomHeight : bottomHeight, width: adjustedWidth, fullWidth: width});
      bottomHeight = math.max(T$.intL(), bottomSizes.total, this.config.bottomSpec.getMinPixels(height));
      let topSizes = new layout_margin_strategy.TopMarginLayoutStrategy.new().measure(topViews, {maxHeight: dart.test(useMax) ? maxTopHeight : topHeight, width: adjustedWidth, fullWidth: width});
      topHeight = math.max(T$.intL(), topSizes.total, this.config.topSpec.getMinPixels(height));
      return new layout_manager_impl._MeasuredSizes.new({leftWidth: leftWidth, leftSizes: leftSizes, rightWidth: rightWidth, rightSizes: rightSizes, topHeight: topHeight, topSizes: topSizes, bottomHeight: bottomHeight, bottomSizes: bottomSizes});
    }
    applyToViews(apply) {
      this[_views][$forEach](dart.fn(view => apply(view), T$.LayoutViewLTovoid()));
    }
  };
  (layout_manager_impl.LayoutManagerImpl.new = function(opts) {
    let t4;
    let config = opts && 'config' in opts ? opts.config : null;
    this[_views] = T$.JSArrayOfLayoutViewL().of([]);
    this[_paintOrderedViews] = null;
    this[_positionOrderedViews] = null;
    this[_measurements] = null;
    this[_drawAreaBounds$] = null;
    this[_drawAreaBoundsOutdated] = true;
    this[_viewsNeedPaintSort] = true;
    this[_viewsNeedPositionSort] = true;
    this[config$] = (t4 = config, t4 == null ? new layout_config.LayoutConfig.new() : t4);
    ;
  }).prototype = layout_manager_impl.LayoutManagerImpl.prototype;
  dart.addTypeTests(layout_manager_impl.LayoutManagerImpl);
  dart.addTypeCaches(layout_manager_impl.LayoutManagerImpl);
  layout_manager_impl.LayoutManagerImpl[dart.implements] = () => [layout_manager.LayoutManager];
  dart.setMethodSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getMethods(layout_manager_impl.LayoutManagerImpl.__proto__),
    addView: dart.fnType(dart.void, [dart.legacy(layout_view.LayoutView)]),
    removeView: dart.fnType(dart.void, [dart.legacy(layout_view.LayoutView)]),
    isAttached: dart.fnType(dart.legacy(core.bool), [dart.legacy(layout_view.LayoutView)]),
    withinDrawArea: dart.fnType(dart.legacy(core.bool), [dart.legacy(math.Point$(dart.legacy(core.num)))]),
    measure: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    layout: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    [_viewsForPositions]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView))), [dart.legacy(layout_view.LayoutPosition)], [dart.legacy(layout_view.LayoutPosition)]),
    [_measure]: dart.fnType(dart.legacy(layout_manager_impl._MeasuredSizes), [dart.legacy(core.int), dart.legacy(core.int)], {bottomViews: dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView))), leftViews: dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView))), previousMeasurements: dart.legacy(layout_manager_impl._MeasuredSizes), rightViews: dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView))), topViews: dart.legacy(core.Iterable$(dart.legacy(layout_view.LayoutView))), useMax: dart.legacy(core.bool)}, {}),
    applyToViews: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(layout_view.LayoutView)]))])
  }));
  dart.setGetterSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getGetters(layout_manager_impl.LayoutManagerImpl.__proto__),
    paintOrderedViews: dart.legacy(core.List$(dart.legacy(layout_view.LayoutView))),
    positionOrderedViews: dart.legacy(core.List$(dart.legacy(layout_view.LayoutView))),
    drawAreaBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
    drawableLayoutAreaBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
    marginBottom: dart.legacy(core.int),
    marginLeft: dart.legacy(core.int),
    marginRight: dart.legacy(core.int),
    marginTop: dart.legacy(core.int)
  }));
  dart.setLibraryUri(layout_manager_impl.LayoutManagerImpl, I[30]);
  dart.setFieldSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getFields(layout_manager_impl.LayoutManagerImpl.__proto__),
    config: dart.fieldType(dart.legacy(layout_config.LayoutConfig)),
    [_views]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(layout_view.LayoutView)))),
    [_paintOrderedViews]: dart.fieldType(dart.legacy(core.List$(dart.legacy(layout_view.LayoutView)))),
    [_positionOrderedViews]: dart.fieldType(dart.legacy(core.List$(dart.legacy(layout_view.LayoutView)))),
    [_measurements]: dart.fieldType(dart.legacy(layout_manager_impl._MeasuredSizes)),
    [_drawAreaBounds$]: dart.fieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int)))),
    [_drawAreaBoundsOutdated]: dart.fieldType(dart.legacy(core.bool)),
    [_viewsNeedPaintSort]: dart.fieldType(dart.legacy(core.bool)),
    [_viewsNeedPositionSort]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(layout_manager_impl.LayoutManagerImpl, {
    /*layout_manager_impl.LayoutManagerImpl._minDrawWidth*/get _minDrawWidth() {
      return 20;
    },
    /*layout_manager_impl.LayoutManagerImpl._minDrawHeight*/get _minDrawHeight() {
      return 20;
    }
  }, true);
  layout_manager_impl._MeasuredSizes = class _MeasuredSizes extends core.Object {};
  (layout_manager_impl._MeasuredSizes.new = function(opts) {
    let leftWidth = opts && 'leftWidth' in opts ? opts.leftWidth : null;
    let leftSizes = opts && 'leftSizes' in opts ? opts.leftSizes : null;
    let rightWidth = opts && 'rightWidth' in opts ? opts.rightWidth : null;
    let rightSizes = opts && 'rightSizes' in opts ? opts.rightSizes : null;
    let topHeight = opts && 'topHeight' in opts ? opts.topHeight : null;
    let topSizes = opts && 'topSizes' in opts ? opts.topSizes : null;
    let bottomHeight = opts && 'bottomHeight' in opts ? opts.bottomHeight : null;
    let bottomSizes = opts && 'bottomSizes' in opts ? opts.bottomSizes : null;
    this.leftWidth = leftWidth;
    this.leftSizes = leftSizes;
    this.rightWidth = rightWidth;
    this.rightSizes = rightSizes;
    this.topHeight = topHeight;
    this.topSizes = topSizes;
    this.bottomHeight = bottomHeight;
    this.bottomSizes = bottomSizes;
    ;
  }).prototype = layout_manager_impl._MeasuredSizes.prototype;
  dart.addTypeTests(layout_manager_impl._MeasuredSizes);
  dart.addTypeCaches(layout_manager_impl._MeasuredSizes);
  dart.setLibraryUri(layout_manager_impl._MeasuredSizes, I[30]);
  dart.setFieldSignature(layout_manager_impl._MeasuredSizes, () => ({
    __proto__: dart.getFields(layout_manager_impl._MeasuredSizes.__proto__),
    leftWidth: dart.finalFieldType(dart.legacy(core.int)),
    leftSizes: dart.finalFieldType(dart.legacy(layout_margin_strategy.SizeList)),
    rightWidth: dart.finalFieldType(dart.legacy(core.int)),
    rightSizes: dart.finalFieldType(dart.legacy(layout_margin_strategy.SizeList)),
    topHeight: dart.finalFieldType(dart.legacy(core.int)),
    topSizes: dart.finalFieldType(dart.legacy(layout_margin_strategy.SizeList)),
    bottomHeight: dart.finalFieldType(dart.legacy(core.int)),
    bottomSizes: dart.finalFieldType(dart.legacy(layout_margin_strategy.SizeList))
  }));
  layout_manager.LayoutManager = class LayoutManager extends core.Object {};
  (layout_manager.LayoutManager.new = function() {
    ;
  }).prototype = layout_manager.LayoutManager.prototype;
  dart.addTypeTests(layout_manager.LayoutManager);
  dart.addTypeCaches(layout_manager.LayoutManager);
  dart.setLibraryUri(layout_manager.LayoutManager, I[31]);
  var context = dart.privateName(base_chart, "BaseChart.context");
  var graphicsFactory$0 = dart.privateName(base_chart, "BaseChart.graphicsFactory");
  var transition = dart.privateName(base_chart, "BaseChart.transition");
  var animationPercent = dart.privateName(base_chart, "BaseChart.animationPercent");
  var _layoutManager = dart.privateName(base_chart, "_layoutManager");
  var _chartWidth = dart.privateName(base_chart, "_chartWidth");
  var _chartHeight = dart.privateName(base_chart, "_chartHeight");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _animationsTemporarilyDisabled = dart.privateName(base_chart, "_animationsTemporarilyDisabled");
  var _originalSeriesList = dart.privateName(base_chart, "_originalSeriesList");
  var _currentSeriesList = dart.privateName(base_chart, "_currentSeriesList");
  var _usingRenderers = dart.privateName(base_chart, "_usingRenderers");
  var _rendererToSeriesList = dart.privateName(base_chart, "_rendererToSeriesList");
  var _seriesRenderers = dart.privateName(base_chart, "_seriesRenderers");
  var _behaviorRoleMap = dart.privateName(base_chart, "_behaviorRoleMap");
  var _behaviorStack = dart.privateName(base_chart, "_behaviorStack");
  var _behaviorTappableMap = dart.privateName(base_chart, "_behaviorTappableMap");
  var _gestureProxy = dart.privateName(base_chart, "_gestureProxy");
  var _selectionModels = dart.privateName(base_chart, "_selectionModels");
  var _lifecycleListeners = dart.privateName(base_chart, "_lifecycleListeners");
  var _chartIsDirty = dart.privateName(base_chart, "_chartIsDirty");
  const _is_BaseChart_default = Symbol('_is_BaseChart_default');
  base_chart.BaseChart$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var SeriesRendererOfDL = () => (SeriesRendererOfDL = dart.constFn(series_renderer.SeriesRenderer$(DL())))();
    var SeriesRendererLOfDL = () => (SeriesRendererLOfDL = dart.constFn(dart.legacy(SeriesRendererOfDL())))();
    var IdentityMapOfStringL$SeriesRendererLOfDL = () => (IdentityMapOfStringL$SeriesRendererLOfDL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), SeriesRendererLOfDL())))();
    var ChartBehaviorOfDL = () => (ChartBehaviorOfDL = dart.constFn(chart_behavior.ChartBehavior$(DL())))();
    var ChartBehaviorLOfDL = () => (ChartBehaviorLOfDL = dart.constFn(dart.legacy(ChartBehaviorOfDL())))();
    var IdentityMapOfStringL$ChartBehaviorLOfDL = () => (IdentityMapOfStringL$ChartBehaviorLOfDL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), ChartBehaviorLOfDL())))();
    var JSArrayOfChartBehaviorLOfDL = () => (JSArrayOfChartBehaviorLOfDL = dart.constFn(_interceptors.JSArray$(ChartBehaviorLOfDL())))();
    var MutableSelectionModelOfDL = () => (MutableSelectionModelOfDL = dart.constFn(selection_model.MutableSelectionModel$(DL())))();
    var MutableSelectionModelLOfDL = () => (MutableSelectionModelLOfDL = dart.constFn(dart.legacy(MutableSelectionModelOfDL())))();
    var LinkedMapOfSelectionModelTypeL$MutableSelectionModelLOfDL = () => (LinkedMapOfSelectionModelTypeL$MutableSelectionModelLOfDL = dart.constFn(_js_helper.LinkedMap$(T$.SelectionModelTypeL(), MutableSelectionModelLOfDL())))();
    var LifecycleListenerOfDL = () => (LifecycleListenerOfDL = dart.constFn(base_chart.LifecycleListener$(DL())))();
    var LifecycleListenerLOfDL = () => (LifecycleListenerLOfDL = dart.constFn(dart.legacy(LifecycleListenerOfDL())))();
    var JSArrayOfLifecycleListenerLOfDL = () => (JSArrayOfLifecycleListenerLOfDL = dart.constFn(_interceptors.JSArray$(LifecycleListenerLOfDL())))();
    var VoidToMutableSelectionModelLOfDL = () => (VoidToMutableSelectionModelLOfDL = dart.constFn(dart.fnType(MutableSelectionModelLOfDL(), [])))();
    var DatumDetailsOfDL = () => (DatumDetailsOfDL = dart.constFn(datum_details.DatumDetails$(DL())))();
    var DatumDetailsLOfDL = () => (DatumDetailsLOfDL = dart.constFn(dart.legacy(DatumDetailsOfDL())))();
    var JSArrayOfDatumDetailsLOfDL = () => (JSArrayOfDatumDetailsLOfDL = dart.constFn(_interceptors.JSArray$(DatumDetailsLOfDL())))();
    var DatumDetailsLOfDLAndDatumDetailsLOfDLTointL = () => (DatumDetailsLOfDLAndDatumDetailsLOfDLTointL = dart.constFn(dart.fnType(T$.intL(), [DatumDetailsLOfDL(), DatumDetailsLOfDL()])))();
    var SeriesDatumOfDL = () => (SeriesDatumOfDL = dart.constFn(series_datum.SeriesDatum$(DL())))();
    var ListOfChartBehaviorLOfDL = () => (ListOfChartBehaviorLOfDL = dart.constFn(core.List$(ChartBehaviorLOfDL())))();
    var SeriesOfdynamic$DL = () => (SeriesOfdynamic$DL = dart.constFn(series$.Series$(dart.dynamic, DL())))();
    var SeriesLOfdynamic$DL = () => (SeriesLOfdynamic$DL = dart.constFn(dart.legacy(SeriesOfdynamic$DL())))();
    var ListOfSeriesLOfdynamic$DL = () => (ListOfSeriesLOfdynamic$DL = dart.constFn(core.List$(SeriesLOfdynamic$DL())))();
    var ListLOfSeriesLOfdynamic$DL = () => (ListLOfSeriesLOfdynamic$DL = dart.constFn(dart.legacy(ListOfSeriesLOfdynamic$DL())))();
    var MutableSeriesOfDL = () => (MutableSeriesOfDL = dart.constFn(processed_series.MutableSeries$(DL())))();
    var MutableSeriesLOfDL = () => (MutableSeriesLOfDL = dart.constFn(dart.legacy(MutableSeriesOfDL())))();
    var ListOfMutableSeriesLOfDL = () => (ListOfMutableSeriesLOfDL = dart.constFn(core.List$(MutableSeriesLOfDL())))();
    var MutableSeriesLOfDLTointL = () => (MutableSeriesLOfDLTointL = dart.constFn(dart.fnType(T$.intL(), [MutableSeriesLOfDL()])))();
    var ListLOfMutableSeriesLOfDL = () => (ListLOfMutableSeriesLOfDL = dart.constFn(dart.legacy(ListOfMutableSeriesLOfDL())))();
    var MutableSeriesLOfDLToMutableSeriesLOfDL = () => (MutableSeriesLOfDLToMutableSeriesLOfDL = dart.constFn(dart.fnType(MutableSeriesLOfDL(), [MutableSeriesLOfDL()])))();
    var IdentityMapOfStringL$ListLOfMutableSeriesLOfDL = () => (IdentityMapOfStringL$ListLOfMutableSeriesLOfDL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), ListLOfMutableSeriesLOfDL())))();
    var JSArrayOfMutableSeriesLOfDL = () => (JSArrayOfMutableSeriesLOfDL = dart.constFn(_interceptors.JSArray$(MutableSeriesLOfDL())))();
    var VoidToListLOfMutableSeriesLOfDL = () => (VoidToListLOfMutableSeriesLOfDL = dart.constFn(dart.fnType(ListLOfMutableSeriesLOfDL(), [])))();
    var MutableSeriesLOfDLToNull = () => (MutableSeriesLOfDLToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesLOfDL()])))();
    var StringLAndListLOfMutableSeriesLOfDLToNull = () => (StringLAndListLOfMutableSeriesLOfDLToNull = dart.constFn(dart.fnType(core.Null, [T$.StringL(), ListLOfMutableSeriesLOfDL()])))();
    var StringLToListLOfMutableSeriesLOfDL = () => (StringLToListLOfMutableSeriesLOfDL = dart.constFn(dart.fnType(ListLOfMutableSeriesLOfDL(), [T$.StringL()])))();
    var MapOfStringL$ListLOfMutableSeriesLOfDL = () => (MapOfStringL$ListLOfMutableSeriesLOfDL = dart.constFn(core.Map$(T$.StringL(), ListLOfMutableSeriesLOfDL())))();
    var MapLOfStringL$ListLOfMutableSeriesLOfDL = () => (MapLOfStringL$ListLOfMutableSeriesLOfDL = dart.constFn(dart.legacy(MapOfStringL$ListLOfMutableSeriesLOfDL())))();
    var ListLOfMutableSeriesLOfDLTovoid = () => (ListLOfMutableSeriesLOfDLTovoid = dart.constFn(dart.fnType(dart.void, [ListLOfMutableSeriesLOfDL()])))();
    var ListLOfMutableSeriesLOfDLToLvoid = () => (ListLOfMutableSeriesLOfDLToLvoid = dart.constFn(dart.legacy(ListLOfMutableSeriesLOfDLTovoid())))();
    var LifecycleListenerLOfDLToNull = () => (LifecycleListenerLOfDLToNull = dart.constFn(dart.fnType(core.Null, [LifecycleListenerLOfDL()])))();
    class BaseChart extends core.Object {
      get context() {
        return this[context];
      }
      set context(value) {
        this[context] = value;
      }
      get graphicsFactory() {
        return this[graphicsFactory$0];
      }
      set graphicsFactory(value) {
        this[graphicsFactory$0] = value;
      }
      get transition() {
        return this[transition];
      }
      set transition(value) {
        this[transition] = value;
      }
      get animationPercent() {
        return this[animationPercent];
      }
      set animationPercent(value) {
        this[animationPercent] = value;
      }
      get isTappable() {
        return this[_behaviorTappableMap][$isNotEmpty];
      }
      get selectExactEventLocation() {
        return false;
      }
      get selectNearestByDomain() {
        return true;
      }
      get selectOverlappingPoints() {
        return false;
      }
      init(context, graphicsFactory) {
        this.context = context;
        if (!dart.equals(this.graphicsFactory, graphicsFactory)) {
          this.graphicsFactory = graphicsFactory;
          this[_layoutManager].applyToViews(dart.fn(view => view.graphicsFactory = graphicsFactory, T$.LayoutViewLToGraphicsFactoryL()));
        }
        this.configurationChanged();
      }
      get chartIsDirty() {
        return this[_chartIsDirty];
      }
      resetChartDirtyFlag() {
        this[_chartIsDirty] = false;
      }
      markChartDirty() {
        this[_chartIsDirty] = true;
      }
      configurationChanged() {
      }
      get chartWidth() {
        return this[_chartWidth];
      }
      get chartHeight() {
        return this[_chartHeight];
      }
      get gestureProxy() {
        return this[_gestureProxy];
      }
      addGestureListener(listener) {
        this[_gestureProxy].add(listener);
        return listener;
      }
      removeGestureListener(listener) {
        this[_gestureProxy].remove(listener);
      }
      addLifecycleListener(listener) {
        LifecycleListenerLOfDL().as(listener);
        this[_lifecycleListeners][$add](listener);
        return listener;
      }
      removeLifecycleListener(listener) {
        LifecycleListenerLOfDL().as(listener);
        return this[_lifecycleListeners][$remove](listener);
      }
      getSelectionModel(type) {
        return this[_selectionModels][$putIfAbsent](type, dart.fn(() => new (MutableSelectionModelOfDL()).new(), VoidToMutableSelectionModelLOfDL()));
      }
      set defaultRenderer(renderer) {
        SeriesRendererLOfDL().as(renderer);
        renderer.rendererId = "default";
        this.addSeriesRenderer(renderer);
      }
      get defaultRenderer() {
        return this.getSeriesRenderer("default");
      }
      addSeriesRenderer(renderer) {
        let rendererId = renderer.rendererId;
        let previousRenderer = this[_seriesRenderers][$_get](rendererId);
        if (previousRenderer != null) {
          this.removeView(previousRenderer);
          previousRenderer.onDetach(this);
        }
        this.addView(renderer);
        renderer.onAttach(this);
        this[_seriesRenderers][$_set](rendererId, SeriesRendererLOfDL().as(renderer));
      }
      getSeriesRenderer(rendererId) {
        let renderer = this[_seriesRenderers][$_get](rendererId);
        if (renderer == null) {
          if (rendererId === "default") {
            renderer = this.makeDefaultRenderer();
            this.defaultRenderer = renderer;
          }
        }
        return renderer;
      }
      pointWithinRenderer(chartPosition) {
        return this[_usingRenderers][$any](dart.fn(rendererId => this.getSeriesRenderer(rendererId).componentBounds[$containsPoint](chartPosition), T$.StringLToboolL()));
      }
      getNearestDatumDetailPerSeries(drawAreaPoint, selectAcrossAllDrawAreaComponents) {
        let boundsOverride = dart.test(selectAcrossAllDrawAreaComponents) ? this.drawableLayoutAreaBounds : null;
        let details = JSArrayOfDatumDetailsLOfDL().of([]);
        this[_usingRenderers][$forEach](dart.fn(rendererId => {
          details[$addAll](this.getSeriesRenderer(rendererId).getNearestDatumDetailPerSeries(drawAreaPoint, this.selectNearestByDomain, boundsOverride, {selectOverlappingPoints: this.selectOverlappingPoints, selectExactEventLocation: this.selectExactEventLocation}));
        }, T$.StringLToNull()));
        details[$sort](dart.fn((a, b) => {
          if (dart.test(this.selectNearestByDomain)) {
            let domainDiff = a.domainDistance[$compareTo](b.domainDistance);
            if (domainDiff === 0) {
              return a.measureDistance[$compareTo](b.measureDistance);
            }
            return domainDiff;
          } else {
            return a.relativeDistance[$compareTo](b.relativeDistance);
          }
        }, DatumDetailsLOfDLAndDatumDetailsLOfDLTointL()));
        return details;
      }
      getSelectedDatumDetails(selectionModelType) {
        let details = JSArrayOfDatumDetailsLOfDL().of([]);
        if (this[_currentSeriesList] == null) {
          return details;
        }
        let selectionModel = this.getSelectionModel(selectionModelType);
        if (selectionModel == null || !dart.test(selectionModel.hasDatumSelection)) {
          return details;
        }
        for (let seriesDatum of selectionModel.selectedDatum) {
          let rendererId = seriesDatum.series.getAttr(T$.StringL(), series_renderer.rendererIdKey);
          details[$add](this.getSeriesRenderer(rendererId).getDetailsForSeriesDatum(seriesDatum));
        }
        return details;
      }
      getAllDatumDetails(opts) {
        let includeOverlaySeries = opts && 'includeOverlaySeries' in opts ? opts.includeOverlaySeries : false;
        let details = JSArrayOfDatumDetailsLOfDL().of([]);
        if (this[_currentSeriesList] == null) {
          return details;
        }
        for (let series of this[_currentSeriesList]) {
          let rendererId = series.getAttr(T$.StringL(), series_renderer.rendererIdKey);
          if (!dart.test(includeOverlaySeries) && dart.test(series.overlaySeries)) {
            continue;
          }
          for (let datum of series.data) {
            details[$add](this.getSeriesRenderer(rendererId).getDetailsForSeriesDatum(new (SeriesDatumOfDL()).new(series, datum)));
          }
        }
        return details;
      }
      createBehavior(creator) {
        return creator(DL());
      }
      addBehavior(behavior) {
        ChartBehaviorLOfDL().as(behavior);
        let role = behavior.role;
        if (role != null && !dart.equals(this[_behaviorRoleMap][$_get](role), behavior)) {
          this.removeBehavior(this[_behaviorRoleMap][$_get](role));
          this[_behaviorRoleMap][$_set](role, behavior);
        }
        if (!dart.test(this[_behaviorStack][$contains](behavior))) {
          this[_behaviorStack][$add](behavior);
          behavior.attachTo(this);
        }
      }
      removeBehavior(behavior) {
        let t4;
        ChartBehaviorLOfDL().as(behavior);
        if (behavior == null) {
          return false;
        }
        let role = (t4 = behavior, t4 == null ? null : t4.role);
        if (role != null && dart.equals(this[_behaviorRoleMap][$_get](role), behavior)) {
          this[_behaviorRoleMap][$remove](role);
        }
        this.unregisterTappable(behavior);
        let wasAttached = this[_behaviorStack][$remove](behavior);
        behavior.removeFrom(this);
        return wasAttached;
      }
      registerTappable(behavior) {
        ChartBehaviorLOfDL().as(behavior);
        let role = behavior.role;
        if (role != null && dart.equals(this[_behaviorRoleMap][$_get](role), behavior) && !dart.equals(this[_behaviorTappableMap][$_get](role), behavior)) {
          this[_behaviorTappableMap][$_set](role, behavior);
        }
      }
      unregisterTappable(behavior) {
        let t4;
        ChartBehaviorLOfDL().as(behavior);
        let role = (t4 = behavior, t4 == null ? null : t4.role);
        if (role != null && dart.equals(this[_behaviorTappableMap][$_get](role), behavior)) {
          this[_behaviorTappableMap][$remove](role);
        }
      }
      get behaviors() {
        return ListOfChartBehaviorLOfDL().unmodifiable(this[_behaviorStack]);
      }
      measure(width, height) {
        if (this[_rendererToSeriesList] != null) {
          this[_layoutManager].measure(width, height);
        }
      }
      layout(width, height) {
        if (this[_rendererToSeriesList] != null) {
          this.layoutInternal(width, height);
          this.onPostLayout(this[_rendererToSeriesList]);
        }
      }
      layoutInternal(width, height) {
        this[_chartWidth] = width;
        this[_chartHeight] = height;
        this[_layoutManager].layout(width, height);
      }
      addView(view) {
        if (this[_layoutManager].isAttached(view) === false) {
          view.graphicsFactory = this.graphicsFactory;
          this[_layoutManager].addView(view);
        }
      }
      removeView(view) {
        this[_layoutManager].removeView(view);
      }
      withinDrawArea(point) {
        return this[_layoutManager].withinDrawArea(point);
      }
      get drawAreaBounds() {
        return this[_layoutManager].drawAreaBounds;
      }
      get marginBottom() {
        return this[_layoutManager].marginBottom;
      }
      get marginLeft() {
        return this[_layoutManager].marginLeft;
      }
      get marginRight() {
        return this[_layoutManager].marginRight;
      }
      get marginTop() {
        return this[_layoutManager].marginTop;
      }
      get drawableLayoutAreaBounds() {
        return this[_layoutManager].drawableLayoutAreaBounds;
      }
      draw(seriesList) {
        ListLOfSeriesLOfdynamic$DL().as(seriesList);
        for (let selectionModel of this[_selectionModels][$values]) {
          selectionModel.clearSelection({notifyListeners: false});
        }
        let processedSeriesList = ListOfMutableSeriesLOfDL().from(seriesList[$map](dart.dynamic, dart.bind(this, 'makeSeries')));
        this.fireOnDraw(processedSeriesList);
        let seriesIndex = 0;
        processedSeriesList[$forEach](dart.fn(series => {
          let t4;
          return series.seriesIndex = (t4 = seriesIndex, seriesIndex = t4 + 1, t4);
        }, MutableSeriesLOfDLTointL()));
        this[_currentSeriesList] = processedSeriesList;
        this[_originalSeriesList] = processedSeriesList;
        this.drawInternal(processedSeriesList, {skipAnimation: false, skipLayout: false});
      }
      redraw(opts) {
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : false;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : false;
        this.drawInternal(this[_originalSeriesList], {skipAnimation: skipAnimation, skipLayout: skipLayout});
        if (!dart.test(skipLayout)) {
          this.measure(this[_chartWidth], this[_chartHeight]);
          this.layout(this[_chartWidth], this[_chartHeight]);
        } else {
          this.onSkipLayout();
        }
      }
      drawInternal(seriesList, opts) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : null;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : null;
        seriesList = seriesList[$map](MutableSeriesLOfDL(), dart.fn(series => new (MutableSeriesOfDL()).clone(series), MutableSeriesLOfDLToMutableSeriesLOfDL()))[$toList]();
        this[_animationsTemporarilyDisabled] = skipAnimation;
        this.configureSeries(seriesList);
        this.fireOnPreprocess(seriesList);
        this[_rendererToSeriesList] = this.preprocessSeries(seriesList);
        this.fireOnPostprocess(seriesList);
        this[_currentSeriesList] = seriesList;
      }
      get currentSeriesList() {
        return this[_currentSeriesList];
      }
      makeSeries(series) {
        let t4;
        SeriesLOfdynamic$DL().as(series);
        let s = new (MutableSeriesOfDL()).new(series);
        let rendererId = (t4 = series.getAttribute(T$.StringL(), series_renderer.rendererIdKey), t4 == null ? "default" : t4);
        s.setAttr(T$.StringL(), series_renderer.rendererIdKey, rendererId);
        s.setAttr(T$.SeriesRendererL(), series_renderer.rendererKey, this.getSeriesRenderer(rendererId));
        return s;
      }
      configureSeries(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        let rendererToSeriesList = new (IdentityMapOfStringL$ListLOfMutableSeriesLOfDL()).new();
        seriesList[$forEach](dart.fn(series => {
          let rendererId = series.getAttr(T$.StringL(), series_renderer.rendererIdKey);
          rendererToSeriesList[$putIfAbsent](rendererId, dart.fn(() => JSArrayOfMutableSeriesLOfDL().of([]), VoidToListLOfMutableSeriesLOfDL()))[$add](series);
        }, MutableSeriesLOfDLToNull()));
        rendererToSeriesList[$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).configureSeries(seriesList);
        }, StringLAndListLOfMutableSeriesLOfDLToNull()));
      }
      preprocessSeries(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        let rendererToSeriesList = new (IdentityMapOfStringL$ListLOfMutableSeriesLOfDL()).new();
        let unusedRenderers = this[_usingRenderers];
        this[_usingRenderers] = T$.LinkedHashSetOfStringL().new();
        seriesList[$forEach](dart.fn(series => {
          let rendererId = series.getAttr(T$.StringL(), series_renderer.rendererIdKey);
          rendererToSeriesList[$putIfAbsent](rendererId, dart.fn(() => JSArrayOfMutableSeriesLOfDL().of([]), VoidToListLOfMutableSeriesLOfDL()))[$add](series);
          this[_usingRenderers].add(rendererId);
          unusedRenderers.remove(rendererId);
        }, MutableSeriesLOfDLToNull()));
        unusedRenderers[$forEach](dart.fn(rendererId => {
          let t6, t5, t4;
          t4 = rendererToSeriesList;
          t5 = rendererId;
          t6 = JSArrayOfMutableSeriesLOfDL().of([]);
          t4[$_set](t5, t6);
          return t6;
        }, StringLToListLOfMutableSeriesLOfDL()));
        rendererToSeriesList[$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).preprocessSeries(seriesList);
        }, StringLAndListLOfMutableSeriesLOfDLToNull()));
        return rendererToSeriesList;
      }
      onSkipLayout() {
        this.onPostLayout(this[_rendererToSeriesList]);
      }
      onPostLayout(rendererToSeriesList) {
        MapLOfStringL$ListLOfMutableSeriesLOfDL().as(rendererToSeriesList);
        rendererToSeriesList[$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).update(seriesList, this.animatingThisDraw);
        }, StringLAndListLOfMutableSeriesLOfDLToNull()));
        if (dart.test(this.animatingThisDraw)) {
          this.animationPercent = 0.0;
          this.context.requestAnimation(this.transition);
        } else {
          this.animationPercent = 1.0;
          this.context.requestPaint();
        }
        this[_animationsTemporarilyDisabled] = false;
      }
      paint(canvas) {
        canvas.drawingView = "BaseView";
        this[_layoutManager].paintOrderedViews[$forEach](dart.fn(view => {
          canvas.drawingView = dart.toString(dart.runtimeType(view));
          view.paint(canvas, dart.test(this.animatingThisDraw) ? this.animationPercent : 1.0);
        }, T$.LayoutViewLToNull()));
        canvas.drawingView = "PostRender";
        this.fireOnPostrender(canvas);
        canvas.drawingView = null;
        if (this.animationPercent === 1.0) {
          this.fireOnAnimationComplete();
        }
      }
      get animatingThisDraw() {
        return this.transition != null && dart.notNull(this.transition.inMilliseconds) > 0 && !dart.test(this[_animationsTemporarilyDisabled]);
      }
      fireOnDraw(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          let t5, t4;
          if (ListLOfMutableSeriesLOfDLToLvoid().as(listener.onData) != null) {
            t4 = listener;
            t5 = seriesList;
            ListLOfMutableSeriesLOfDLToLvoid().as(t4.onData)(t5);
          }
        }, LifecycleListenerLOfDLToNull()));
      }
      fireOnPreprocess(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          let t5, t4;
          if (ListLOfMutableSeriesLOfDLToLvoid().as(listener.onPreprocess) != null) {
            t4 = listener;
            t5 = seriesList;
            ListLOfMutableSeriesLOfDLToLvoid().as(t4.onPreprocess)(t5);
          }
        }, LifecycleListenerLOfDLToNull()));
      }
      fireOnPostprocess(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          let t5, t4;
          if (ListLOfMutableSeriesLOfDLToLvoid().as(listener.onPostprocess) != null) {
            t4 = listener;
            t5 = seriesList;
            ListLOfMutableSeriesLOfDLToLvoid().as(t4.onPostprocess)(t5);
          }
        }, LifecycleListenerLOfDLToNull()));
      }
      fireOnAxisConfigured() {
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          if (listener.onAxisConfigured != null) {
            listener.onAxisConfigured();
          }
        }, LifecycleListenerLOfDLToNull()));
      }
      fireOnPostrender(canvas) {
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          let t5, t4;
          if (listener.onPostrender != null) {
            t4 = listener;
            t5 = canvas;
            t4.onPostrender(t5);
          }
        }, LifecycleListenerLOfDLToNull()));
      }
      fireOnAnimationComplete() {
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          if (listener.onAnimationComplete != null) {
            listener.onAnimationComplete();
          }
        }, LifecycleListenerLOfDLToNull()));
      }
      destroy() {
        for (let i = 0; i < dart.notNull(this[_behaviorStack][$length]); i = i + 1) {
          this[_behaviorStack][$_get](i).removeFrom(this);
        }
        this[_behaviorStack][$clear]();
        this[_behaviorRoleMap][$clear]();
        this[_selectionModels][$values][$forEach](dart.fn(selectionModel => selectionModel.clearAllListeners(), T$.MutableSelectionModelLTovoid()));
      }
    }
    (BaseChart.new = function(opts) {
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      this[context] = null;
      this[graphicsFactory$0] = null;
      this[_layoutManager] = null;
      this[_chartWidth] = null;
      this[_chartHeight] = null;
      this[transition] = C[36] || CT.C36;
      this[animationPercent] = null;
      this[_animationsTemporarilyDisabled] = false;
      this[_originalSeriesList] = null;
      this[_currentSeriesList] = null;
      this[_usingRenderers] = T$.LinkedHashSetOfStringL().new();
      this[_rendererToSeriesList] = null;
      this[_seriesRenderers] = new (IdentityMapOfStringL$SeriesRendererLOfDL()).new();
      this[_behaviorRoleMap] = new (IdentityMapOfStringL$ChartBehaviorLOfDL()).new();
      this[_behaviorStack] = JSArrayOfChartBehaviorLOfDL().of([]);
      this[_behaviorTappableMap] = new (IdentityMapOfStringL$ChartBehaviorLOfDL()).new();
      this[_gestureProxy] = new proxy_gesture_listener.ProxyGestureListener.new();
      this[_selectionModels] = new (LinkedMapOfSelectionModelTypeL$MutableSelectionModelLOfDL()).new();
      this[_lifecycleListeners] = JSArrayOfLifecycleListenerLOfDL().of([]);
      this[_chartIsDirty] = false;
      this[_layoutManager] = new layout_manager_impl.LayoutManagerImpl.new({config: layoutConfig});
    }).prototype = BaseChart.prototype;
    dart.addTypeTests(BaseChart);
    BaseChart.prototype[_is_BaseChart_default] = true;
    dart.addTypeCaches(BaseChart);
    dart.setMethodSignature(BaseChart, () => ({
      __proto__: dart.getMethods(BaseChart.__proto__),
      init: dart.fnType(dart.void, [dart.legacy(chart_context.ChartContext), dart.legacy(graphics_factory.GraphicsFactory)]),
      resetChartDirtyFlag: dart.fnType(dart.void, []),
      markChartDirty: dart.fnType(dart.void, []),
      configurationChanged: dart.fnType(dart.void, []),
      addGestureListener: dart.fnType(dart.legacy(gesture_listener.GestureListener), [dart.legacy(gesture_listener.GestureListener)]),
      removeGestureListener: dart.fnType(dart.void, [dart.legacy(gesture_listener.GestureListener)]),
      addLifecycleListener: dart.fnType(dart.legacy(base_chart.LifecycleListener), [dart.legacy(core.Object)]),
      removeLifecycleListener: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      getSelectionModel: dart.fnType(dart.legacy(selection_model.MutableSelectionModel$(dart.legacy(D))), [dart.legacy(selection_model.SelectionModelType)]),
      addSeriesRenderer: dart.fnType(dart.void, [dart.legacy(series_renderer.SeriesRenderer)]),
      getSeriesRenderer: dart.fnType(dart.legacy(series_renderer.SeriesRenderer$(dart.legacy(D))), [dart.legacy(core.String)]),
      pointWithinRenderer: dart.fnType(dart.legacy(core.bool), [dart.legacy(math.Point$(dart.legacy(core.double)))]),
      getNearestDatumDetailPerSeries: dart.fnType(dart.legacy(core.List$(dart.legacy(datum_details.DatumDetails$(dart.legacy(D))))), [dart.legacy(math.Point$(dart.legacy(core.double))), dart.legacy(core.bool)]),
      getSelectedDatumDetails: dart.fnType(dart.legacy(core.List$(dart.legacy(datum_details.DatumDetails$(dart.legacy(D))))), [dart.legacy(selection_model.SelectionModelType)]),
      getAllDatumDetails: dart.fnType(dart.legacy(core.List$(dart.legacy(datum_details.DatumDetails$(dart.legacy(D))))), [], {includeOverlaySeries: dart.legacy(core.bool)}, {}),
      createBehavior: dart.fnType(dart.legacy(chart_behavior.ChartBehavior$(dart.legacy(D))), [dart.legacy(dart.gFnType(D => [dart.legacy(chart_behavior.ChartBehavior$(dart.legacy(D))), []]))]),
      addBehavior: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      removeBehavior: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      registerTappable: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      unregisterTappable: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      measure: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      layout: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      layoutInternal: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      addView: dart.fnType(dart.void, [dart.legacy(layout_view.LayoutView)]),
      removeView: dart.fnType(dart.void, [dart.legacy(layout_view.LayoutView)]),
      withinDrawArea: dart.fnType(dart.legacy(core.bool), [dart.legacy(math.Point$(dart.legacy(core.num)))]),
      draw: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      redraw: dart.fnType(dart.void, [], {skipAnimation: dart.legacy(core.bool), skipLayout: dart.legacy(core.bool)}, {}),
      drawInternal: dart.fnType(dart.void, [dart.legacy(core.Object)], {skipAnimation: dart.legacy(core.bool), skipLayout: dart.legacy(core.bool)}, {}),
      makeSeries: dart.fnType(dart.legacy(processed_series.MutableSeries$(dart.legacy(D))), [dart.legacy(core.Object)]),
      configureSeries: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      preprocessSeries: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(processed_series.MutableSeries$(dart.legacy(D))))))), [dart.legacy(core.Object)]),
      onSkipLayout: dart.fnType(dart.void, []),
      onPostLayout: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas)]),
      fireOnDraw: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      fireOnPreprocess: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      fireOnPostprocess: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      fireOnAxisConfigured: dart.fnType(dart.void, []),
      fireOnPostrender: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas)]),
      fireOnAnimationComplete: dart.fnType(dart.void, []),
      destroy: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(BaseChart, () => ({
      __proto__: dart.getGetters(BaseChart.__proto__),
      isTappable: dart.legacy(core.bool),
      selectExactEventLocation: dart.legacy(core.bool),
      selectNearestByDomain: dart.legacy(core.bool),
      selectOverlappingPoints: dart.legacy(core.bool),
      chartIsDirty: dart.legacy(core.bool),
      chartWidth: dart.legacy(core.int),
      chartHeight: dart.legacy(core.int),
      gestureProxy: dart.legacy(proxy_gesture_listener.ProxyGestureListener),
      defaultRenderer: dart.legacy(series_renderer.SeriesRenderer$(dart.legacy(D))),
      behaviors: dart.legacy(core.List$(dart.legacy(chart_behavior.ChartBehavior$(dart.legacy(D))))),
      drawAreaBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
      marginBottom: dart.legacy(core.int),
      marginLeft: dart.legacy(core.int),
      marginRight: dart.legacy(core.int),
      marginTop: dart.legacy(core.int),
      drawableLayoutAreaBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
      currentSeriesList: dart.legacy(core.List$(dart.legacy(processed_series.MutableSeries$(dart.legacy(D))))),
      animatingThisDraw: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(BaseChart, () => ({
      __proto__: dart.getSetters(BaseChart.__proto__),
      defaultRenderer: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(BaseChart, I[32]);
    dart.setFieldSignature(BaseChart, () => ({
      __proto__: dart.getFields(BaseChart.__proto__),
      context: dart.fieldType(dart.legacy(chart_context.ChartContext)),
      graphicsFactory: dart.fieldType(dart.legacy(graphics_factory.GraphicsFactory)),
      [_layoutManager]: dart.fieldType(dart.legacy(layout_manager.LayoutManager)),
      [_chartWidth]: dart.fieldType(dart.legacy(core.int)),
      [_chartHeight]: dart.fieldType(dart.legacy(core.int)),
      transition: dart.fieldType(dart.legacy(core.Duration)),
      animationPercent: dart.fieldType(dart.legacy(core.double)),
      [_animationsTemporarilyDisabled]: dart.fieldType(dart.legacy(core.bool)),
      [_originalSeriesList]: dart.fieldType(dart.legacy(core.List$(dart.legacy(processed_series.MutableSeries$(dart.legacy(D)))))),
      [_currentSeriesList]: dart.fieldType(dart.legacy(core.List$(dart.legacy(processed_series.MutableSeries$(dart.legacy(D)))))),
      [_usingRenderers]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(core.String)))),
      [_rendererToSeriesList]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(processed_series.MutableSeries$(dart.legacy(D)))))))),
      [_seriesRenderers]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(series_renderer.SeriesRenderer$(dart.legacy(D)))))),
      [_behaviorRoleMap]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(chart_behavior.ChartBehavior$(dart.legacy(D)))))),
      [_behaviorStack]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(chart_behavior.ChartBehavior$(dart.legacy(D)))))),
      [_behaviorTappableMap]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(chart_behavior.ChartBehavior$(dart.legacy(D)))))),
      [_gestureProxy]: dart.finalFieldType(dart.legacy(proxy_gesture_listener.ProxyGestureListener)),
      [_selectionModels]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(selection_model.SelectionModelType), dart.legacy(selection_model.MutableSelectionModel$(dart.legacy(D)))))),
      [_lifecycleListeners]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(base_chart.LifecycleListener$(dart.legacy(D)))))),
      [_chartIsDirty]: dart.fieldType(dart.legacy(core.bool))
    }));
    return BaseChart;
  });
  base_chart.BaseChart = base_chart.BaseChart$();
  dart.addTypeTests(base_chart.BaseChart, _is_BaseChart_default);
  var onData$ = dart.privateName(base_chart, "LifecycleListener.onData");
  var onPreprocess$ = dart.privateName(base_chart, "LifecycleListener.onPreprocess");
  var onPostprocess$ = dart.privateName(base_chart, "LifecycleListener.onPostprocess");
  var onAxisConfigured$ = dart.privateName(base_chart, "LifecycleListener.onAxisConfigured");
  var onPostrender$ = dart.privateName(base_chart, "LifecycleListener.onPostrender");
  var onAnimationComplete$ = dart.privateName(base_chart, "LifecycleListener.onAnimationComplete");
  const _is_LifecycleListener_default = Symbol('_is_LifecycleListener_default');
  base_chart.LifecycleListener$ = dart.generic(D => {
    class LifecycleListener extends core.Object {
      get onData() {
        return this[onData$];
      }
      set onData(value) {
        super.onData = value;
      }
      get onPreprocess() {
        return this[onPreprocess$];
      }
      set onPreprocess(value) {
        super.onPreprocess = value;
      }
      get onPostprocess() {
        return this[onPostprocess$];
      }
      set onPostprocess(value) {
        super.onPostprocess = value;
      }
      get onAxisConfigured() {
        return this[onAxisConfigured$];
      }
      set onAxisConfigured(value) {
        super.onAxisConfigured = value;
      }
      get onPostrender() {
        return this[onPostrender$];
      }
      set onPostrender(value) {
        super.onPostrender = value;
      }
      get onAnimationComplete() {
        return this[onAnimationComplete$];
      }
      set onAnimationComplete(value) {
        super.onAnimationComplete = value;
      }
    }
    (LifecycleListener.new = function(opts) {
      let onData = opts && 'onData' in opts ? opts.onData : null;
      let onPreprocess = opts && 'onPreprocess' in opts ? opts.onPreprocess : null;
      let onPostprocess = opts && 'onPostprocess' in opts ? opts.onPostprocess : null;
      let onAxisConfigured = opts && 'onAxisConfigured' in opts ? opts.onAxisConfigured : null;
      let onPostrender = opts && 'onPostrender' in opts ? opts.onPostrender : null;
      let onAnimationComplete = opts && 'onAnimationComplete' in opts ? opts.onAnimationComplete : null;
      this[onData$] = onData;
      this[onPreprocess$] = onPreprocess;
      this[onPostprocess$] = onPostprocess;
      this[onAxisConfigured$] = onAxisConfigured;
      this[onPostrender$] = onPostrender;
      this[onAnimationComplete$] = onAnimationComplete;
      ;
    }).prototype = LifecycleListener.prototype;
    dart.addTypeTests(LifecycleListener);
    LifecycleListener.prototype[_is_LifecycleListener_default] = true;
    dart.addTypeCaches(LifecycleListener);
    dart.setLibraryUri(LifecycleListener, I[32]);
    dart.setFieldSignature(LifecycleListener, () => ({
      __proto__: dart.getFields(LifecycleListener.__proto__),
      onData: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(processed_series.MutableSeries$(dart.legacy(D)))))]))),
      onPreprocess: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(processed_series.MutableSeries$(dart.legacy(D)))))]))),
      onPostprocess: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(processed_series.MutableSeries$(dart.legacy(D)))))]))),
      onAxisConfigured: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      onPostrender: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas)]))),
      onAnimationComplete: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [])))
    }));
    return LifecycleListener;
  });
  base_chart.LifecycleListener = base_chart.LifecycleListener$();
  dart.addTypeTests(base_chart.LifecycleListener, _is_LifecycleListener_default);
  const _is_ChartBehavior_default = Symbol('_is_ChartBehavior_default');
  chart_behavior.ChartBehavior$ = dart.generic(D => {
    class ChartBehavior extends core.Object {}
    (ChartBehavior.new = function() {
      ;
    }).prototype = ChartBehavior.prototype;
    dart.addTypeTests(ChartBehavior);
    ChartBehavior.prototype[_is_ChartBehavior_default] = true;
    dart.addTypeCaches(ChartBehavior);
    dart.setLibraryUri(ChartBehavior, I[33]);
    return ChartBehavior;
  });
  chart_behavior.ChartBehavior = chart_behavior.ChartBehavior$();
  dart.addTypeTests(chart_behavior.ChartBehavior, _is_ChartBehavior_default);
  var _name$4 = dart.privateName(chart_behavior, "_name");
  chart_behavior.BehaviorPosition = class BehaviorPosition extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (chart_behavior.BehaviorPosition.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = chart_behavior.BehaviorPosition.prototype;
  dart.addTypeTests(chart_behavior.BehaviorPosition);
  dart.addTypeCaches(chart_behavior.BehaviorPosition);
  dart.setMethodSignature(chart_behavior.BehaviorPosition, () => ({
    __proto__: dart.getMethods(chart_behavior.BehaviorPosition.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(chart_behavior.BehaviorPosition, I[33]);
  dart.setFieldSignature(chart_behavior.BehaviorPosition, () => ({
    __proto__: dart.getFields(chart_behavior.BehaviorPosition.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$4]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(chart_behavior.BehaviorPosition, ['toString']);
  chart_behavior.BehaviorPosition.top = C[37] || CT.C37;
  chart_behavior.BehaviorPosition.bottom = C[38] || CT.C38;
  chart_behavior.BehaviorPosition.start = C[39] || CT.C39;
  chart_behavior.BehaviorPosition.end = C[40] || CT.C40;
  chart_behavior.BehaviorPosition.inside = C[41] || CT.C41;
  chart_behavior.BehaviorPosition.values = C[42] || CT.C42;
  chart_behavior.OutsideJustification = class OutsideJustification extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (chart_behavior.OutsideJustification.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = chart_behavior.OutsideJustification.prototype;
  dart.addTypeTests(chart_behavior.OutsideJustification);
  dart.addTypeCaches(chart_behavior.OutsideJustification);
  dart.setMethodSignature(chart_behavior.OutsideJustification, () => ({
    __proto__: dart.getMethods(chart_behavior.OutsideJustification.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(chart_behavior.OutsideJustification, I[33]);
  dart.setFieldSignature(chart_behavior.OutsideJustification, () => ({
    __proto__: dart.getFields(chart_behavior.OutsideJustification.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$4]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(chart_behavior.OutsideJustification, ['toString']);
  chart_behavior.OutsideJustification.startDrawArea = C[43] || CT.C43;
  chart_behavior.OutsideJustification.start = C[44] || CT.C44;
  chart_behavior.OutsideJustification.middleDrawArea = C[45] || CT.C45;
  chart_behavior.OutsideJustification.middle = C[46] || CT.C46;
  chart_behavior.OutsideJustification.endDrawArea = C[47] || CT.C47;
  chart_behavior.OutsideJustification.end = C[48] || CT.C48;
  chart_behavior.OutsideJustification.values = C[49] || CT.C49;
  chart_behavior.InsideJustification = class InsideJustification extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (chart_behavior.InsideJustification.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = chart_behavior.InsideJustification.prototype;
  dart.addTypeTests(chart_behavior.InsideJustification);
  dart.addTypeCaches(chart_behavior.InsideJustification);
  dart.setMethodSignature(chart_behavior.InsideJustification, () => ({
    __proto__: dart.getMethods(chart_behavior.InsideJustification.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(chart_behavior.InsideJustification, I[33]);
  dart.setFieldSignature(chart_behavior.InsideJustification, () => ({
    __proto__: dart.getFields(chart_behavior.InsideJustification.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$4]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(chart_behavior.InsideJustification, ['toString']);
  chart_behavior.InsideJustification.topStart = C[50] || CT.C50;
  chart_behavior.InsideJustification.topEnd = C[51] || CT.C51;
  chart_behavior.InsideJustification.values = C[52] || CT.C52;
  var _name$5 = dart.privateName(layout_view, "_name");
  layout_view.LayoutPosition = class LayoutPosition extends core.Object {
    toString() {
      return this[_name$5];
    }
  };
  (layout_view.LayoutPosition.new = function(index, _name) {
    this.index = index;
    this[_name$5] = _name;
    ;
  }).prototype = layout_view.LayoutPosition.prototype;
  dart.addTypeTests(layout_view.LayoutPosition);
  dart.addTypeCaches(layout_view.LayoutPosition);
  dart.setMethodSignature(layout_view.LayoutPosition, () => ({
    __proto__: dart.getMethods(layout_view.LayoutPosition.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(layout_view.LayoutPosition, I[21]);
  dart.setFieldSignature(layout_view.LayoutPosition, () => ({
    __proto__: dart.getFields(layout_view.LayoutPosition.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$5]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(layout_view.LayoutPosition, ['toString']);
  layout_view.LayoutPosition.Bottom = C[53] || CT.C53;
  layout_view.LayoutPosition.FullBottom = C[54] || CT.C54;
  layout_view.LayoutPosition.Top = C[55] || CT.C55;
  layout_view.LayoutPosition.FullTop = C[56] || CT.C56;
  layout_view.LayoutPosition.Left = C[57] || CT.C57;
  layout_view.LayoutPosition.FullLeft = C[58] || CT.C58;
  layout_view.LayoutPosition.Right = C[59] || CT.C59;
  layout_view.LayoutPosition.FullRight = C[60] || CT.C60;
  layout_view.LayoutPosition.DrawArea = C[61] || CT.C61;
  layout_view.LayoutPosition.values = C[62] || CT.C62;
  layout_view.LayoutViewPaintOrder = class LayoutViewPaintOrder extends core.Object {};
  (layout_view.LayoutViewPaintOrder.new = function() {
    ;
  }).prototype = layout_view.LayoutViewPaintOrder.prototype;
  dart.addTypeTests(layout_view.LayoutViewPaintOrder);
  dart.addTypeCaches(layout_view.LayoutViewPaintOrder);
  dart.setLibraryUri(layout_view.LayoutViewPaintOrder, I[21]);
  dart.defineLazy(layout_view.LayoutViewPaintOrder, {
    /*layout_view.LayoutViewPaintOrder.rangeAnnotation*/get rangeAnnotation() {
      return -10;
    },
    /*layout_view.LayoutViewPaintOrder.measureAxis*/get measureAxis() {
      return 0;
    },
    /*layout_view.LayoutViewPaintOrder.domainAxis*/get domainAxis() {
      return 5;
    },
    /*layout_view.LayoutViewPaintOrder.arc*/get arc() {
      return 10;
    },
    /*layout_view.LayoutViewPaintOrder.bar*/get bar() {
      return 10;
    },
    /*layout_view.LayoutViewPaintOrder.treeMap*/get treeMap() {
      return 10;
    },
    /*layout_view.LayoutViewPaintOrder.barTargetLine*/get barTargetLine() {
      return 15;
    },
    /*layout_view.LayoutViewPaintOrder.line*/get line() {
      return 20;
    },
    /*layout_view.LayoutViewPaintOrder.point*/get point() {
      return 25;
    },
    /*layout_view.LayoutViewPaintOrder.legend*/get legend() {
      return 100;
    },
    /*layout_view.LayoutViewPaintOrder.linePointHighlighter*/get linePointHighlighter() {
      return 110;
    },
    /*layout_view.LayoutViewPaintOrder.slider*/get slider() {
      return 150;
    },
    /*layout_view.LayoutViewPaintOrder.chartTitle*/get chartTitle() {
      return 160;
    }
  }, true);
  layout_view.LayoutViewPositionOrder = class LayoutViewPositionOrder extends core.Object {};
  (layout_view.LayoutViewPositionOrder.new = function() {
    ;
  }).prototype = layout_view.LayoutViewPositionOrder.prototype;
  dart.addTypeTests(layout_view.LayoutViewPositionOrder);
  dart.addTypeCaches(layout_view.LayoutViewPositionOrder);
  dart.setLibraryUri(layout_view.LayoutViewPositionOrder, I[21]);
  dart.defineLazy(layout_view.LayoutViewPositionOrder, {
    /*layout_view.LayoutViewPositionOrder.drawArea*/get drawArea() {
      return 0;
    },
    /*layout_view.LayoutViewPositionOrder.symbolAnnotation*/get symbolAnnotation() {
      return 10;
    },
    /*layout_view.LayoutViewPositionOrder.axis*/get axis() {
      return 20;
    },
    /*layout_view.LayoutViewPositionOrder.legend*/get legend() {
      return 30;
    },
    /*layout_view.LayoutViewPositionOrder.chartTitle*/get chartTitle() {
      return 40;
    }
  }, true);
  var topPx$ = dart.privateName(layout_view, "ViewMargin.topPx");
  var bottomPx$ = dart.privateName(layout_view, "ViewMargin.bottomPx");
  var rightPx$ = dart.privateName(layout_view, "ViewMargin.rightPx");
  var leftPx$ = dart.privateName(layout_view, "ViewMargin.leftPx");
  layout_view.ViewMargin = class ViewMargin extends core.Object {
    get topPx() {
      return this[topPx$];
    }
    set topPx(value) {
      super.topPx = value;
    }
    get bottomPx() {
      return this[bottomPx$];
    }
    set bottomPx(value) {
      super.bottomPx = value;
    }
    get rightPx() {
      return this[rightPx$];
    }
    set rightPx(value) {
      super.rightPx = value;
    }
    get leftPx() {
      return this[leftPx$];
    }
    set leftPx(value) {
      super.leftPx = value;
    }
    get width() {
      return dart.notNull(this.leftPx) + dart.notNull(this.rightPx);
    }
    get height() {
      return dart.notNull(this.topPx) + dart.notNull(this.bottomPx);
    }
  };
  (layout_view.ViewMargin.new = function(opts) {
    let t4, t4$, t4$0, t4$1;
    let topPx = opts && 'topPx' in opts ? opts.topPx : null;
    let bottomPx = opts && 'bottomPx' in opts ? opts.bottomPx : null;
    let rightPx = opts && 'rightPx' in opts ? opts.rightPx : null;
    let leftPx = opts && 'leftPx' in opts ? opts.leftPx : null;
    this[topPx$] = (t4 = topPx, t4 == null ? 0 : t4);
    this[bottomPx$] = (t4$ = bottomPx, t4$ == null ? 0 : t4$);
    this[rightPx$] = (t4$0 = rightPx, t4$0 == null ? 0 : t4$0);
    this[leftPx$] = (t4$1 = leftPx, t4$1 == null ? 0 : t4$1);
    ;
  }).prototype = layout_view.ViewMargin.prototype;
  dart.addTypeTests(layout_view.ViewMargin);
  dart.addTypeCaches(layout_view.ViewMargin);
  dart.setGetterSignature(layout_view.ViewMargin, () => ({
    __proto__: dart.getGetters(layout_view.ViewMargin.__proto__),
    width: dart.legacy(core.int),
    height: dart.legacy(core.int)
  }));
  dart.setLibraryUri(layout_view.ViewMargin, I[21]);
  dart.setFieldSignature(layout_view.ViewMargin, () => ({
    __proto__: dart.getFields(layout_view.ViewMargin.__proto__),
    topPx: dart.finalFieldType(dart.legacy(core.int)),
    bottomPx: dart.finalFieldType(dart.legacy(core.int)),
    rightPx: dart.finalFieldType(dart.legacy(core.int)),
    leftPx: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(layout_view.ViewMargin, {
    /*layout_view.ViewMargin.empty*/get empty() {
      return C[63] || CT.C63;
    }
  }, true);
  var id$ = dart.privateName(layout_view, "LayoutViewConfig.id");
  var paintOrder$ = dart.privateName(layout_view, "LayoutViewConfig.paintOrder");
  var position$ = dart.privateName(layout_view, "LayoutViewConfig.position");
  var positionOrder$ = dart.privateName(layout_view, "LayoutViewConfig.positionOrder");
  var viewMargin$ = dart.privateName(layout_view, "LayoutViewConfig.viewMargin");
  layout_view.LayoutViewConfig = class LayoutViewConfig extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get paintOrder() {
      return this[paintOrder$];
    }
    set paintOrder(value) {
      this[paintOrder$] = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      this[position$] = value;
    }
    get positionOrder() {
      return this[positionOrder$];
    }
    set positionOrder(value) {
      this[positionOrder$] = value;
    }
    get viewMargin() {
      return this[viewMargin$];
    }
    set viewMargin(value) {
      this[viewMargin$] = value;
    }
    get isFullPosition() {
      return this.position == layout_view.LayoutPosition.FullBottom || this.position == layout_view.LayoutPosition.FullTop || this.position == layout_view.LayoutPosition.FullRight || this.position == layout_view.LayoutPosition.FullLeft;
    }
  };
  (layout_view.LayoutViewConfig.new = function(opts) {
    let t4;
    let paintOrder = opts && 'paintOrder' in opts ? opts.paintOrder : null;
    let position = opts && 'position' in opts ? opts.position : null;
    let positionOrder = opts && 'positionOrder' in opts ? opts.positionOrder : null;
    let viewMargin = opts && 'viewMargin' in opts ? opts.viewMargin : null;
    this[id$] = null;
    this[paintOrder$] = paintOrder;
    this[position$] = position;
    this[positionOrder$] = positionOrder;
    this[viewMargin$] = (t4 = viewMargin, t4 == null ? layout_view.ViewMargin.empty : t4);
    ;
  }).prototype = layout_view.LayoutViewConfig.prototype;
  dart.addTypeTests(layout_view.LayoutViewConfig);
  dart.addTypeCaches(layout_view.LayoutViewConfig);
  dart.setGetterSignature(layout_view.LayoutViewConfig, () => ({
    __proto__: dart.getGetters(layout_view.LayoutViewConfig.__proto__),
    isFullPosition: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(layout_view.LayoutViewConfig, I[21]);
  dart.setFieldSignature(layout_view.LayoutViewConfig, () => ({
    __proto__: dart.getFields(layout_view.LayoutViewConfig.__proto__),
    id: dart.fieldType(dart.legacy(core.String)),
    paintOrder: dart.fieldType(dart.legacy(core.int)),
    position: dart.fieldType(dart.legacy(layout_view.LayoutPosition)),
    positionOrder: dart.fieldType(dart.legacy(core.int)),
    viewMargin: dart.fieldType(dart.legacy(layout_view.ViewMargin))
  }));
  var preferredWidth$ = dart.privateName(layout_view, "ViewMeasuredSizes.preferredWidth");
  var preferredHeight$ = dart.privateName(layout_view, "ViewMeasuredSizes.preferredHeight");
  var minWidth$ = dart.privateName(layout_view, "ViewMeasuredSizes.minWidth");
  var minHeight$ = dart.privateName(layout_view, "ViewMeasuredSizes.minHeight");
  layout_view.ViewMeasuredSizes = class ViewMeasuredSizes extends core.Object {
    get preferredWidth() {
      return this[preferredWidth$];
    }
    set preferredWidth(value) {
      super.preferredWidth = value;
    }
    get preferredHeight() {
      return this[preferredHeight$];
    }
    set preferredHeight(value) {
      super.preferredHeight = value;
    }
    get minWidth() {
      return this[minWidth$];
    }
    set minWidth(value) {
      super.minWidth = value;
    }
    get minHeight() {
      return this[minHeight$];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
  };
  (layout_view.ViewMeasuredSizes.new = function(opts) {
    let t4, t4$;
    let preferredWidth = opts && 'preferredWidth' in opts ? opts.preferredWidth : null;
    let preferredHeight = opts && 'preferredHeight' in opts ? opts.preferredHeight : null;
    let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
    this[preferredWidth$] = preferredWidth;
    this[preferredHeight$] = preferredHeight;
    this[minWidth$] = (t4 = minWidth, t4 == null ? 0 : t4);
    this[minHeight$] = (t4$ = minHeight, t4$ == null ? 0 : t4$);
    ;
  }).prototype = layout_view.ViewMeasuredSizes.prototype;
  dart.addTypeTests(layout_view.ViewMeasuredSizes);
  dart.addTypeCaches(layout_view.ViewMeasuredSizes);
  dart.setLibraryUri(layout_view.ViewMeasuredSizes, I[21]);
  dart.setFieldSignature(layout_view.ViewMeasuredSizes, () => ({
    __proto__: dart.getFields(layout_view.ViewMeasuredSizes.__proto__),
    preferredWidth: dart.finalFieldType(dart.legacy(core.int)),
    preferredHeight: dart.finalFieldType(dart.legacy(core.int)),
    minWidth: dart.finalFieldType(dart.legacy(core.int)),
    minHeight: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(layout_view.ViewMeasuredSizes, {
    /*layout_view.ViewMeasuredSizes.zero*/get zero() {
      return C[64] || CT.C64;
    }
  }, true);
  layout_view.layoutPosition = function layoutPosition(behaviorPosition, outsideJustification, isRtl) {
    let position = null;
    switch (behaviorPosition) {
      case C[38] || CT.C38:
      {
        position = layout_view.LayoutPosition.Bottom;
        break;
      }
      case C[40] || CT.C40:
      {
        position = dart.test(isRtl) ? layout_view.LayoutPosition.Left : layout_view.LayoutPosition.Right;
        break;
      }
      case C[41] || CT.C41:
      {
        position = layout_view.LayoutPosition.DrawArea;
        break;
      }
      case C[39] || CT.C39:
      {
        position = dart.test(isRtl) ? layout_view.LayoutPosition.Right : layout_view.LayoutPosition.Left;
        break;
      }
      case C[37] || CT.C37:
      {
        position = layout_view.LayoutPosition.Top;
        break;
      }
    }
    if (outsideJustification == chart_behavior.OutsideJustification.start || outsideJustification == chart_behavior.OutsideJustification.middle || outsideJustification == chart_behavior.OutsideJustification.end) {
      switch (position) {
        case C[53] || CT.C53:
        {
          position = layout_view.LayoutPosition.FullBottom;
          break;
        }
        case C[57] || CT.C57:
        {
          position = layout_view.LayoutPosition.FullLeft;
          break;
        }
        case C[55] || CT.C55:
        {
          position = layout_view.LayoutPosition.FullTop;
          break;
        }
        case C[59] || CT.C59:
        {
          position = layout_view.LayoutPosition.FullRight;
          break;
        }
        default:
        {
          break;
        }
      }
    }
    return position;
  };
  const _is_TickDrawStrategy_default = Symbol('_is_TickDrawStrategy_default');
  tick_draw_strategy.TickDrawStrategy$ = dart.generic(D => {
    class TickDrawStrategy extends core.Object {}
    (TickDrawStrategy.new = function() {
      ;
    }).prototype = TickDrawStrategy.prototype;
    dart.addTypeTests(TickDrawStrategy);
    TickDrawStrategy.prototype[_is_TickDrawStrategy_default] = true;
    dart.addTypeCaches(TickDrawStrategy);
    dart.setLibraryUri(TickDrawStrategy, I[34]);
    return TickDrawStrategy;
  });
  tick_draw_strategy.TickDrawStrategy = tick_draw_strategy.TickDrawStrategy$();
  dart.addTypeTests(tick_draw_strategy.TickDrawStrategy, _is_TickDrawStrategy_default);
  style.Style = class Style extends core.Object {};
  (style.Style.new = function() {
    ;
  }).prototype = style.Style.prototype;
  dart.addTypeTests(style.Style);
  dart.addTypeCaches(style.Style);
  dart.setLibraryUri(style.Style, I[35]);
  material_style.MaterialStyle = class MaterialStyle extends core.Object {
    get black() {
      return material_palette.MaterialPalette.black;
    }
    get transparent() {
      return material_palette.MaterialPalette.transparent;
    }
    get white() {
      return material_palette.MaterialPalette.white;
    }
    getOrderedPalettes(count) {
      return material_palette.MaterialPalette.getOrderedPalettes(count);
    }
    createAxisLineStyle(graphicsFactory, spec) {
      let t5, t5$, t5$0, t5$1, t5$2, t4;
      t4 = graphicsFactory.createLinePaint();
      return (() => {
        t4.color = (t5$ = (t5 = spec, t5 == null ? null : t5.color), t5$ == null ? material_palette.MaterialPalette.gray.shadeDefault : t5$);
        t4.dashPattern = (t5$0 = spec, t5$0 == null ? null : t5$0.dashPattern);
        t4.strokeWidth = (t5$2 = (t5$1 = spec, t5$1 == null ? null : t5$1.thickness), t5$2 == null ? 1 : t5$2);
        return t4;
      })();
    }
    createTickLineStyle(graphicsFactory, spec) {
      let t5, t5$, t5$0, t5$1, t5$2, t4;
      t4 = graphicsFactory.createLinePaint();
      return (() => {
        t4.color = (t5$ = (t5 = spec, t5 == null ? null : t5.color), t5$ == null ? material_palette.MaterialPalette.gray.shadeDefault : t5$);
        t4.dashPattern = (t5$0 = spec, t5$0 == null ? null : t5$0.dashPattern);
        t4.strokeWidth = (t5$2 = (t5$1 = spec, t5$1 == null ? null : t5$1.thickness), t5$2 == null ? 1 : t5$2);
        return t4;
      })();
    }
    get tickLength() {
      return 3;
    }
    get tickColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    createGridlineStyle(graphicsFactory, spec) {
      let t5, t5$, t5$0, t5$1, t5$2, t4;
      t4 = graphicsFactory.createLinePaint();
      return (() => {
        t4.color = (t5$ = (t5 = spec, t5 == null ? null : t5.color), t5$ == null ? material_palette.MaterialPalette.gray.shade300 : t5$);
        t4.dashPattern = (t5$0 = spec, t5$0 == null ? null : t5$0.dashPattern);
        t4.strokeWidth = (t5$2 = (t5$1 = spec, t5$1 == null ? null : t5$1.thickness), t5$2 == null ? 1 : t5$2);
        return t4;
      })();
    }
    get arcLabelOutsideLeaderLine() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get defaultSeriesColor() {
      return material_palette.MaterialPalette.gray.shadeDefault;
    }
    get arcStrokeColor() {
      return material_palette.MaterialPalette.white;
    }
    get legendEntryTextColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    get legendTitleTextColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    get linePointHighlighterColor() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get noDataColor() {
      return material_palette.MaterialPalette.gray.shade200;
    }
    get rangeAnnotationColor() {
      return material_palette.MaterialPalette.gray.shade100;
    }
    get sliderFillColor() {
      return material_palette.MaterialPalette.white;
    }
    get sliderStrokeColor() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get chartBackgroundColor() {
      return material_palette.MaterialPalette.white;
    }
    get rangeBandSize() {
      return 0.65;
    }
  };
  (material_style.MaterialStyle.new = function() {
    ;
  }).prototype = material_style.MaterialStyle.prototype;
  dart.addTypeTests(material_style.MaterialStyle);
  dart.addTypeCaches(material_style.MaterialStyle);
  material_style.MaterialStyle[dart.implements] = () => [style.Style];
  dart.setMethodSignature(material_style.MaterialStyle, () => ({
    __proto__: dart.getMethods(material_style.MaterialStyle.__proto__),
    getOrderedPalettes: dart.fnType(dart.legacy(core.List$(dart.legacy(palette.Palette))), [dart.legacy(core.int)]),
    createAxisLineStyle: dart.fnType(dart.legacy(line_style.LineStyle), [dart.legacy(graphics_factory.GraphicsFactory), dart.legacy(axis_spec.LineStyleSpec)]),
    createTickLineStyle: dart.fnType(dart.legacy(line_style.LineStyle), [dart.legacy(graphics_factory.GraphicsFactory), dart.legacy(axis_spec.LineStyleSpec)]),
    createGridlineStyle: dart.fnType(dart.legacy(line_style.LineStyle), [dart.legacy(graphics_factory.GraphicsFactory), dart.legacy(axis_spec.LineStyleSpec)])
  }));
  dart.setGetterSignature(material_style.MaterialStyle, () => ({
    __proto__: dart.getGetters(material_style.MaterialStyle.__proto__),
    black: dart.legacy(color.Color),
    transparent: dart.legacy(color.Color),
    white: dart.legacy(color.Color),
    tickLength: dart.legacy(core.int),
    tickColor: dart.legacy(color.Color),
    arcLabelOutsideLeaderLine: dart.legacy(color.Color),
    defaultSeriesColor: dart.legacy(color.Color),
    arcStrokeColor: dart.legacy(color.Color),
    legendEntryTextColor: dart.legacy(color.Color),
    legendTitleTextColor: dart.legacy(color.Color),
    linePointHighlighterColor: dart.legacy(color.Color),
    noDataColor: dart.legacy(color.Color),
    rangeAnnotationColor: dart.legacy(color.Color),
    sliderFillColor: dart.legacy(color.Color),
    sliderStrokeColor: dart.legacy(color.Color),
    chartBackgroundColor: dart.legacy(color.Color),
    rangeBandSize: dart.legacy(core.double)
  }));
  dart.setLibraryUri(material_style.MaterialStyle, I[36]);
  var _style = dart.privateName(style_factory, "_style");
  style_factory.StyleFactory = class StyleFactory extends core.Object {
    static get style() {
      return style_factory.StyleFactory._styleFactory[_style];
    }
    static set style(value) {
      style_factory.StyleFactory._styleFactory[_style] = value;
    }
  };
  (style_factory.StyleFactory._internal = function() {
    this[_style] = C[65] || CT.C65;
    ;
  }).prototype = style_factory.StyleFactory.prototype;
  dart.addTypeTests(style_factory.StyleFactory);
  dart.addTypeCaches(style_factory.StyleFactory);
  dart.setLibraryUri(style_factory.StyleFactory, I[37]);
  dart.setFieldSignature(style_factory.StyleFactory, () => ({
    __proto__: dart.getFields(style_factory.StyleFactory.__proto__),
    [_style]: dart.fieldType(dart.legacy(style.Style))
  }));
  dart.defineLazy(style_factory.StyleFactory, {
    /*style_factory.StyleFactory._styleFactory*/get _styleFactory() {
      return new style_factory.StyleFactory._internal();
    }
  }, true);
  var start$0 = dart.privateName(scale, "ScaleOutputExtent.start");
  var end$0 = dart.privateName(scale, "ScaleOutputExtent.end");
  scale.ScaleOutputExtent = class ScaleOutputExtent extends core.Object {
    get start() {
      return this[start$0];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$0];
    }
    set end(value) {
      super.end = value;
    }
    get min() {
      return math.min(T$.intL(), this.start, this.end);
    }
    get max() {
      return math.max(T$.intL(), this.start, this.end);
    }
    containsValue(value) {
      return math$.withinBounds(value, this.min, this.max);
    }
    get diff() {
      return dart.notNull(this.end) - dart.notNull(this.start);
    }
    get width() {
      return this.diff[$abs]();
    }
    _equals(other) {
      if (other == null) return false;
      return T$.ScaleOutputExtentL().is(other) && this.start == other.start && this.end == other.end;
    }
    get hashCode() {
      return dart.hashCode(this.start) + dart.hashCode(this.end) * 31;
    }
    toString() {
      return "ScaleOutputRange(" + dart.str(this.start) + ", " + dart.str(this.end) + ")";
    }
  };
  (scale.ScaleOutputExtent.new = function(start, end) {
    this[start$0] = start;
    this[end$0] = end;
    ;
  }).prototype = scale.ScaleOutputExtent.prototype;
  dart.addTypeTests(scale.ScaleOutputExtent);
  dart.addTypeCaches(scale.ScaleOutputExtent);
  dart.setMethodSignature(scale.ScaleOutputExtent, () => ({
    __proto__: dart.getMethods(scale.ScaleOutputExtent.__proto__),
    containsValue: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(scale.ScaleOutputExtent, () => ({
    __proto__: dart.getGetters(scale.ScaleOutputExtent.__proto__),
    min: dart.legacy(core.int),
    max: dart.legacy(core.int),
    diff: dart.legacy(core.int),
    width: dart.legacy(core.int),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(scale.ScaleOutputExtent, I[4]);
  dart.setFieldSignature(scale.ScaleOutputExtent, () => ({
    __proto__: dart.getFields(scale.ScaleOutputExtent.__proto__),
    start: dart.finalFieldType(dart.legacy(core.int)),
    end: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(scale.ScaleOutputExtent, ['_equals', 'toString']);
  dart.defineExtensionAccessors(scale.ScaleOutputExtent, ['hashCode']);
  scale.RangeBandType = class RangeBandType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (scale.RangeBandType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = scale.RangeBandType.prototype;
  dart.addTypeTests(scale.RangeBandType);
  dart.addTypeCaches(scale.RangeBandType);
  dart.setMethodSignature(scale.RangeBandType, () => ({
    __proto__: dart.getMethods(scale.RangeBandType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(scale.RangeBandType, I[4]);
  dart.setFieldSignature(scale.RangeBandType, () => ({
    __proto__: dart.getFields(scale.RangeBandType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(scale.RangeBandType, ['toString']);
  scale.RangeBandType.none = C[5] || CT.C5;
  scale.RangeBandType.fixedPixel = C[0] || CT.C0;
  scale.RangeBandType.fixedDomain = C[4] || CT.C4;
  scale.RangeBandType.fixedPercentOfStep = C[3] || CT.C3;
  scale.RangeBandType.styleAssignedPercentOfStep = C[2] || CT.C2;
  scale.RangeBandType.fixedPixelSpaceFromStep = C[1] || CT.C1;
  scale.RangeBandType.values = C[66] || CT.C66;
  const type = RangeBandConfig_type;
  const size = RangeBandConfig_size;
  scale.RangeBandConfig = class RangeBandConfig extends core.Object {
    get type() {
      return this[type];
    }
    set type(value) {
      super.type = value;
    }
    get size() {
      return this[size];
    }
    set size(value) {
      super.size = value;
    }
  };
  (scale.RangeBandConfig.none = function() {
    this[type] = scale.RangeBandType.none;
    this[size] = 0.0;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.fixedPixel = function(pixels) {
    this[type] = scale.RangeBandType.fixedPixel;
    this[size] = pixels;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.fixedDomain = function(domainSize) {
    this[type] = scale.RangeBandType.fixedDomain;
    this[size] = domainSize;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.stepChartBand = function() {
    this[type] = scale.RangeBandType.fixedPercentOfStep;
    this[size] = 1.0;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.percentOfStep = function(percentOfStepWidth) {
    this[type] = scale.RangeBandType.fixedPercentOfStep;
    this[size] = percentOfStepWidth;
    if (!(dart.notNull(percentOfStepWidth) >= 0 && dart.notNull(percentOfStepWidth) <= 1.0)) dart.assertFailed(null, I[38], 263, 12, "percentOfStepWidth >= 0 && percentOfStepWidth <= 1.0");
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.styleAssignedPercent = function(seriesCount = 1) {
    let t4;
    this[type] = scale.RangeBandType.styleAssignedPercentOfStep;
    this[size] = (t4 = style_factory.StyleFactory.style.rangeBandSize, t4 == null ? 0.65 : t4);
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.fixedPixelSpaceBetweenStep = function(pixels) {
    this[type] = scale.RangeBandType.fixedPixelSpaceFromStep;
    this[size] = pixels;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  dart.addTypeTests(scale.RangeBandConfig);
  dart.addTypeCaches(scale.RangeBandConfig);
  dart.setLibraryUri(scale.RangeBandConfig, I[4]);
  dart.setFieldSignature(scale.RangeBandConfig, () => ({
    __proto__: dart.getFields(scale.RangeBandConfig.__proto__),
    type: dart.finalFieldType(dart.legacy(scale.RangeBandType)),
    size: dart.finalFieldType(dart.legacy(core.double))
  }));
  scale.StepSizeType = class StepSizeType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (scale.StepSizeType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = scale.StepSizeType.prototype;
  dart.addTypeTests(scale.StepSizeType);
  dart.addTypeCaches(scale.StepSizeType);
  dart.setMethodSignature(scale.StepSizeType, () => ({
    __proto__: dart.getMethods(scale.StepSizeType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(scale.StepSizeType, I[4]);
  dart.setFieldSignature(scale.StepSizeType, () => ({
    __proto__: dart.getFields(scale.StepSizeType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(scale.StepSizeType, ['toString']);
  scale.StepSizeType.autoDetect = C[8] || CT.C8;
  scale.StepSizeType.fixedDomain = C[10] || CT.C10;
  scale.StepSizeType.fixedPixels = C[9] || CT.C9;
  scale.StepSizeType.values = C[67] || CT.C67;
  const type$ = StepSizeConfig_type;
  const size$ = StepSizeConfig_size;
  scale.StepSizeConfig = class StepSizeConfig extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
  };
  (scale.StepSizeConfig.auto = function() {
    this[type$] = scale.StepSizeType.autoDetect;
    this[size$] = 0.0;
    ;
  }).prototype = scale.StepSizeConfig.prototype;
  (scale.StepSizeConfig.fixedPixels = function(pixels) {
    this[type$] = scale.StepSizeType.fixedPixels;
    this[size$] = pixels;
    ;
  }).prototype = scale.StepSizeConfig.prototype;
  (scale.StepSizeConfig.fixedDomain = function(domainSize) {
    this[type$] = scale.StepSizeType.fixedDomain;
    this[size$] = domainSize;
    ;
  }).prototype = scale.StepSizeConfig.prototype;
  dart.addTypeTests(scale.StepSizeConfig);
  dart.addTypeCaches(scale.StepSizeConfig);
  dart.setLibraryUri(scale.StepSizeConfig, I[4]);
  dart.setFieldSignature(scale.StepSizeConfig, () => ({
    __proto__: dart.getFields(scale.StepSizeConfig.__proto__),
    type: dart.finalFieldType(dart.legacy(scale.StepSizeType)),
    size: dart.finalFieldType(dart.legacy(core.double))
  }));
  var showAxisLine$ = dart.privateName(axis_spec, "AxisSpec.showAxisLine");
  var renderSpec$ = dart.privateName(axis_spec, "AxisSpec.renderSpec");
  var tickProviderSpec$ = dart.privateName(axis_spec, "AxisSpec.tickProviderSpec");
  var tickFormatterSpec$ = dart.privateName(axis_spec, "AxisSpec.tickFormatterSpec");
  var scaleSpec$ = dart.privateName(axis_spec, "AxisSpec.scaleSpec");
  const _is_AxisSpec_default = Symbol('_is_AxisSpec_default');
  axis_spec.AxisSpec$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var AxisOfDL = () => (AxisOfDL = dart.constFn(axis.Axis$(DL())))();
    var AxisLOfDL = () => (AxisLOfDL = dart.constFn(dart.legacy(AxisOfDL())))();
    var MutableScaleOfDL = () => (MutableScaleOfDL = dart.constFn(scale.MutableScale$(DL())))();
    var MutableScaleLOfDL = () => (MutableScaleLOfDL = dart.constFn(dart.legacy(MutableScaleOfDL())))();
    class AxisSpec extends core.Object {
      get showAxisLine() {
        return this[showAxisLine$];
      }
      set showAxisLine(value) {
        super.showAxisLine = value;
      }
      get renderSpec() {
        return this[renderSpec$];
      }
      set renderSpec(value) {
        super.renderSpec = value;
      }
      get tickProviderSpec() {
        return this[tickProviderSpec$];
      }
      set tickProviderSpec(value) {
        super.tickProviderSpec = value;
      }
      get tickFormatterSpec() {
        return this[tickFormatterSpec$];
      }
      set tickFormatterSpec(value) {
        super.tickFormatterSpec = value;
      }
      get scaleSpec() {
        return this[scaleSpec$];
      }
      set scaleSpec(value) {
        super.scaleSpec = value;
      }
      static from(other, opts) {
        let t4, t4$, t4$0, t4$1, t4$2;
        let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
        let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
        let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
        let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
        let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
        return new (axis_spec.AxisSpec$(dart.legacy(D))).new({renderSpec: dart.legacy(axis_spec.RenderSpec$(dart.legacy(D))).as((t4 = renderSpec, t4 == null ? other.renderSpec : t4)), tickProviderSpec: dart.legacy(axis_spec.TickProviderSpec$(dart.legacy(D))).as((t4$ = tickProviderSpec, t4$ == null ? other.tickProviderSpec : t4$)), tickFormatterSpec: dart.legacy(axis_spec.TickFormatterSpec$(dart.legacy(D))).as((t4$0 = tickFormatterSpec, t4$0 == null ? other.tickFormatterSpec : t4$0)), showAxisLine: (t4$1 = showAxisLine, t4$1 == null ? other.showAxisLine : t4$1), scaleSpec: (t4$2 = scaleSpec, t4$2 == null ? other.scaleSpec : t4$2)});
      }
      configure(axis, context, graphicsFactory) {
        AxisLOfDL().as(axis);
        axis.resetDefaultConfiguration();
        if (this.showAxisLine != null) {
          axis.forceDrawAxisLine = this.showAxisLine;
        }
        if (this.renderSpec != null) {
          axis.tickDrawStrategy = this.renderSpec.createDrawStrategy(context, graphicsFactory);
        }
        if (this.tickProviderSpec != null) {
          axis.tickProvider = this.tickProviderSpec.createTickProvider(context);
        }
        if (this.tickFormatterSpec != null) {
          axis.tickFormatter = this.tickFormatterSpec.createTickFormatter(context);
        }
        if (this.scaleSpec != null) {
          axis.scale = MutableScaleLOfDL().as(this.scaleSpec.createScale());
        }
      }
      createAxis() {
        return null;
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || T$.AxisSpecL().is(other) && dart.equals(this.renderSpec, other.renderSpec) && dart.equals(this.tickProviderSpec, other.tickProviderSpec) && dart.equals(this.tickFormatterSpec, other.tickFormatterSpec) && this.showAxisLine == other.showAxisLine && dart.equals(this.scaleSpec, other.scaleSpec);
      }
      get hashCode() {
        let t4, t4$;
        let hashcode = (t4$ = (t4 = this.renderSpec, t4 == null ? null : dart.hashCode(t4)), t4$ == null ? 0 : t4$);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.tickProviderSpec));
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.tickFormatterSpec));
        hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.showAxisLine);
        hashcode = dart.notNull(this.hashCode) * 37 + dart.notNull(dart.hashCode(this.scaleSpec));
        return hashcode;
      }
    }
    (AxisSpec.new = function(opts) {
      let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
      let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
      let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
      let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
      let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
      this[renderSpec$] = renderSpec;
      this[tickProviderSpec$] = tickProviderSpec;
      this[tickFormatterSpec$] = tickFormatterSpec;
      this[showAxisLine$] = showAxisLine;
      this[scaleSpec$] = scaleSpec;
      ;
    }).prototype = AxisSpec.prototype;
    dart.addTypeTests(AxisSpec);
    AxisSpec.prototype[_is_AxisSpec_default] = true;
    dart.addTypeCaches(AxisSpec);
    dart.setMethodSignature(AxisSpec, () => ({
      __proto__: dart.getMethods(AxisSpec.__proto__),
      configure: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(chart_context.ChartContext), dart.legacy(graphics_factory.GraphicsFactory)]),
      createAxis: dart.fnType(dart.legacy(axis.Axis$(dart.legacy(D))), []),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(AxisSpec, () => ({
      __proto__: dart.getGetters(AxisSpec.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(AxisSpec, I[39]);
    dart.setFieldSignature(AxisSpec, () => ({
      __proto__: dart.getFields(AxisSpec.__proto__),
      showAxisLine: dart.finalFieldType(dart.legacy(core.bool)),
      renderSpec: dart.finalFieldType(dart.legacy(axis_spec.RenderSpec$(dart.legacy(D)))),
      tickProviderSpec: dart.finalFieldType(dart.legacy(axis_spec.TickProviderSpec$(dart.legacy(D)))),
      tickFormatterSpec: dart.finalFieldType(dart.legacy(axis_spec.TickFormatterSpec$(dart.legacy(D)))),
      scaleSpec: dart.finalFieldType(dart.legacy(axis_spec.ScaleSpec))
    }));
    dart.defineExtensionMethods(AxisSpec, ['_equals']);
    dart.defineExtensionAccessors(AxisSpec, ['hashCode']);
    return AxisSpec;
  });
  axis_spec.AxisSpec = axis_spec.AxisSpec$();
  dart.addTypeTests(axis_spec.AxisSpec, _is_AxisSpec_default);
  const _is_TickProviderSpec_default = Symbol('_is_TickProviderSpec_default');
  axis_spec.TickProviderSpec$ = dart.generic(D => {
    class TickProviderSpec extends core.Object {}
    (TickProviderSpec.new = function() {
      ;
    }).prototype = TickProviderSpec.prototype;
    dart.addTypeTests(TickProviderSpec);
    TickProviderSpec.prototype[_is_TickProviderSpec_default] = true;
    dart.addTypeCaches(TickProviderSpec);
    dart.setLibraryUri(TickProviderSpec, I[39]);
    return TickProviderSpec;
  });
  axis_spec.TickProviderSpec = axis_spec.TickProviderSpec$();
  dart.addTypeTests(axis_spec.TickProviderSpec, _is_TickProviderSpec_default);
  const _is_TickFormatterSpec_default = Symbol('_is_TickFormatterSpec_default');
  axis_spec.TickFormatterSpec$ = dart.generic(D => {
    class TickFormatterSpec extends core.Object {}
    (TickFormatterSpec.new = function() {
      ;
    }).prototype = TickFormatterSpec.prototype;
    dart.addTypeTests(TickFormatterSpec);
    TickFormatterSpec.prototype[_is_TickFormatterSpec_default] = true;
    dart.addTypeCaches(TickFormatterSpec);
    dart.setLibraryUri(TickFormatterSpec, I[39]);
    return TickFormatterSpec;
  });
  axis_spec.TickFormatterSpec = axis_spec.TickFormatterSpec$();
  dart.addTypeTests(axis_spec.TickFormatterSpec, _is_TickFormatterSpec_default);
  const _is_ScaleSpec_default = Symbol('_is_ScaleSpec_default');
  axis_spec.ScaleSpec$ = dart.generic(D => {
    class ScaleSpec extends core.Object {}
    (ScaleSpec.new = function() {
      ;
    }).prototype = ScaleSpec.prototype;
    dart.addTypeTests(ScaleSpec);
    ScaleSpec.prototype[_is_ScaleSpec_default] = true;
    dart.addTypeCaches(ScaleSpec);
    dart.setLibraryUri(ScaleSpec, I[39]);
    return ScaleSpec;
  });
  axis_spec.ScaleSpec = axis_spec.ScaleSpec$();
  dart.addTypeTests(axis_spec.ScaleSpec, _is_ScaleSpec_default);
  const _is_RenderSpec_default = Symbol('_is_RenderSpec_default');
  axis_spec.RenderSpec$ = dart.generic(D => {
    class RenderSpec extends core.Object {}
    (RenderSpec.new = function() {
      ;
    }).prototype = RenderSpec.prototype;
    dart.addTypeTests(RenderSpec);
    RenderSpec.prototype[_is_RenderSpec_default] = true;
    dart.addTypeCaches(RenderSpec);
    dart.setLibraryUri(RenderSpec, I[39]);
    return RenderSpec;
  });
  axis_spec.RenderSpec = axis_spec.RenderSpec$();
  dart.addTypeTests(axis_spec.RenderSpec, _is_RenderSpec_default);
  var fontFamily$ = dart.privateName(axis_spec, "TextStyleSpec.fontFamily");
  var fontSize$ = dart.privateName(axis_spec, "TextStyleSpec.fontSize");
  var lineHeight$ = dart.privateName(axis_spec, "TextStyleSpec.lineHeight");
  var color$0 = dart.privateName(axis_spec, "TextStyleSpec.color");
  var fontWeight$ = dart.privateName(axis_spec, "TextStyleSpec.fontWeight");
  axis_spec.TextStyleSpec = class TextStyleSpec extends core.Object {
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get lineHeight() {
      return this[lineHeight$];
    }
    set lineHeight(value) {
      super.lineHeight = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T$.TextStyleSpecL().is(other) && this.fontFamily == other.fontFamily && this.fontSize == other.fontSize && this.lineHeight == other.lineHeight && dart.equals(this.color, other.color) && this.fontWeight == other.fontWeight;
    }
    get hashCode() {
      let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4, t4$5, t4$6, t4$7;
      let hashcode = (t4$ = (t4 = this.fontFamily, t4 == null ? null : dart.hashCode(t4)), t4$ == null ? 0 : t4$);
      hashcode = (t4$1 = dart.notNull(hashcode) * 37 + dart.notNull((t4$0 = this.fontSize, t4$0 == null ? null : dart.hashCode(t4$0))), t4$1 === null ? 0 : t4$1);
      hashcode = (t4$3 = dart.notNull(hashcode) * 37 + dart.notNull((t4$2 = this.lineHeight, t4$2 == null ? null : dart.hashCode(t4$2))), t4$3 === null ? 0 : t4$3);
      hashcode = (t4$5 = dart.notNull(hashcode) * 37 + dart.notNull((t4$4 = this.color, t4$4 == null ? null : dart.hashCode(t4$4))), t4$5 === null ? 0 : t4$5);
      hashcode = (t4$7 = dart.notNull(hashcode) * 37 + dart.notNull((t4$6 = this.fontWeight, t4$6 == null ? null : dart.hashCode(t4$6))), t4$7 === null ? 0 : t4$7);
      return hashcode;
    }
  };
  (axis_spec.TextStyleSpec.new = function(opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    this[fontFamily$] = fontFamily;
    this[fontSize$] = fontSize;
    this[lineHeight$] = lineHeight;
    this[color$0] = color;
    this[fontWeight$] = fontWeight;
    ;
  }).prototype = axis_spec.TextStyleSpec.prototype;
  dart.addTypeTests(axis_spec.TextStyleSpec);
  dart.addTypeCaches(axis_spec.TextStyleSpec);
  dart.setMethodSignature(axis_spec.TextStyleSpec, () => ({
    __proto__: dart.getMethods(axis_spec.TextStyleSpec.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(axis_spec.TextStyleSpec, () => ({
    __proto__: dart.getGetters(axis_spec.TextStyleSpec.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(axis_spec.TextStyleSpec, I[39]);
  dart.setFieldSignature(axis_spec.TextStyleSpec, () => ({
    __proto__: dart.getFields(axis_spec.TextStyleSpec.__proto__),
    fontFamily: dart.finalFieldType(dart.legacy(core.String)),
    fontSize: dart.finalFieldType(dart.legacy(core.int)),
    lineHeight: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.finalFieldType(dart.legacy(color.Color)),
    fontWeight: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(axis_spec.TextStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(axis_spec.TextStyleSpec, ['hashCode']);
  var color$1 = dart.privateName(axis_spec, "LineStyleSpec.color");
  var dashPattern$0 = dart.privateName(axis_spec, "LineStyleSpec.dashPattern");
  var thickness$ = dart.privateName(axis_spec, "LineStyleSpec.thickness");
  axis_spec.LineStyleSpec = class LineStyleSpec extends core.Object {
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get dashPattern() {
      return this[dashPattern$0];
    }
    set dashPattern(value) {
      super.dashPattern = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T$.LineStyleSpecL().is(other) && dart.equals(this.color, other.color) && dart.equals(this.dashPattern, other.dashPattern) && this.thickness == other.thickness;
    }
    get hashCode() {
      let t4, t4$, t4$0, t4$1, t4$2, t4$3;
      let hashcode = (t4$ = (t4 = this.color, t4 == null ? null : dart.hashCode(t4)), t4$ == null ? 0 : t4$);
      hashcode = (t4$1 = dart.notNull(hashcode) * 37 + dart.notNull((t4$0 = this.dashPattern, t4$0 == null ? null : dart.hashCode(t4$0))), t4$1 === null ? 0 : t4$1);
      hashcode = (t4$3 = dart.notNull(hashcode) * 37 + dart.notNull((t4$2 = this.thickness, t4$2 == null ? null : dart.hashCode(t4$2))), t4$3 === null ? 0 : t4$3);
      return hashcode;
    }
  };
  (axis_spec.LineStyleSpec.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    this[color$1] = color;
    this[dashPattern$0] = dashPattern;
    this[thickness$] = thickness;
    ;
  }).prototype = axis_spec.LineStyleSpec.prototype;
  dart.addTypeTests(axis_spec.LineStyleSpec);
  dart.addTypeCaches(axis_spec.LineStyleSpec);
  dart.setMethodSignature(axis_spec.LineStyleSpec, () => ({
    __proto__: dart.getMethods(axis_spec.LineStyleSpec.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(axis_spec.LineStyleSpec, () => ({
    __proto__: dart.getGetters(axis_spec.LineStyleSpec.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(axis_spec.LineStyleSpec, I[39]);
  dart.setFieldSignature(axis_spec.LineStyleSpec, () => ({
    __proto__: dart.getFields(axis_spec.LineStyleSpec.__proto__),
    color: dart.finalFieldType(dart.legacy(color.Color)),
    dashPattern: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    thickness: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(axis_spec.LineStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(axis_spec.LineStyleSpec, ['hashCode']);
  axis_spec.TickLabelAnchor = class TickLabelAnchor extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (axis_spec.TickLabelAnchor.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = axis_spec.TickLabelAnchor.prototype;
  dart.addTypeTests(axis_spec.TickLabelAnchor);
  dart.addTypeCaches(axis_spec.TickLabelAnchor);
  dart.setMethodSignature(axis_spec.TickLabelAnchor, () => ({
    __proto__: dart.getMethods(axis_spec.TickLabelAnchor.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(axis_spec.TickLabelAnchor, I[39]);
  dart.setFieldSignature(axis_spec.TickLabelAnchor, () => ({
    __proto__: dart.getFields(axis_spec.TickLabelAnchor.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$2]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(axis_spec.TickLabelAnchor, ['toString']);
  axis_spec.TickLabelAnchor.before = C[25] || CT.C25;
  axis_spec.TickLabelAnchor.centered = C[28] || CT.C28;
  axis_spec.TickLabelAnchor.after = C[26] || CT.C26;
  axis_spec.TickLabelAnchor.inside = C[27] || CT.C27;
  axis_spec.TickLabelAnchor.values = C[68] || CT.C68;
  axis_spec.TickLabelJustification = class TickLabelJustification extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (axis_spec.TickLabelJustification.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = axis_spec.TickLabelJustification.prototype;
  dart.addTypeTests(axis_spec.TickLabelJustification);
  dart.addTypeCaches(axis_spec.TickLabelJustification);
  dart.setMethodSignature(axis_spec.TickLabelJustification, () => ({
    __proto__: dart.getMethods(axis_spec.TickLabelJustification.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(axis_spec.TickLabelJustification, I[39]);
  dart.setFieldSignature(axis_spec.TickLabelJustification, () => ({
    __proto__: dart.getFields(axis_spec.TickLabelJustification.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$2]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(axis_spec.TickLabelJustification, ['toString']);
  axis_spec.TickLabelJustification.inside = C[69] || CT.C69;
  axis_spec.TickLabelJustification.outside = C[70] || CT.C70;
  axis_spec.TickLabelJustification.values = C[71] || CT.C71;
  var id$0 = dart.privateName(series$, "Series.id");
  var displayName$ = dart.privateName(series$, "Series.displayName");
  var overlaySeries$ = dart.privateName(series$, "Series.overlaySeries");
  var seriesCategory$ = dart.privateName(series$, "Series.seriesCategory");
  var seriesColor$ = dart.privateName(series$, "Series.seriesColor");
  var data$ = dart.privateName(series$, "Series.data");
  var keyFn$0 = dart.privateName(series$, "Series.keyFn");
  var domainFn$ = dart.privateName(series$, "Series.domainFn");
  var domainFormatterFn$ = dart.privateName(series$, "Series.domainFormatterFn");
  var domainLowerBoundFn$ = dart.privateName(series$, "Series.domainLowerBoundFn");
  var domainUpperBoundFn$ = dart.privateName(series$, "Series.domainUpperBoundFn");
  var measureFn$ = dart.privateName(series$, "Series.measureFn");
  var measureFormatterFn$ = dart.privateName(series$, "Series.measureFormatterFn");
  var measureLowerBoundFn$ = dart.privateName(series$, "Series.measureLowerBoundFn");
  var measureUpperBoundFn$ = dart.privateName(series$, "Series.measureUpperBoundFn");
  var measureOffsetFn$ = dart.privateName(series$, "Series.measureOffsetFn");
  var areaColorFn$ = dart.privateName(series$, "Series.areaColorFn");
  var colorFn$ = dart.privateName(series$, "Series.colorFn");
  var dashPatternFn$ = dart.privateName(series$, "Series.dashPatternFn");
  var fillColorFn$ = dart.privateName(series$, "Series.fillColorFn");
  var patternColorFn$ = dart.privateName(series$, "Series.patternColorFn");
  var fillPatternFn$ = dart.privateName(series$, "Series.fillPatternFn");
  var radiusPxFn$ = dart.privateName(series$, "Series.radiusPxFn");
  var strokeWidthPxFn$ = dart.privateName(series$, "Series.strokeWidthPxFn");
  var labelAccessorFn$ = dart.privateName(series$, "Series.labelAccessorFn");
  var insideLabelStyleAccessorFn$0 = dart.privateName(series$, "Series.insideLabelStyleAccessorFn");
  var outsideLabelStyleAccessorFn$0 = dart.privateName(series$, "Series.outsideLabelStyleAccessorFn");
  var attributes = dart.privateName(series$, "Series.attributes");
  const _is_Series_default = Symbol('_is_Series_default');
  series$.Series$ = dart.generic((T, D) => {
    class Series extends core.Object {
      get id() {
        return this[id$0];
      }
      set id(value) {
        super.id = value;
      }
      get displayName() {
        return this[displayName$];
      }
      set displayName(value) {
        super.displayName = value;
      }
      get overlaySeries() {
        return this[overlaySeries$];
      }
      set overlaySeries(value) {
        super.overlaySeries = value;
      }
      get seriesCategory() {
        return this[seriesCategory$];
      }
      set seriesCategory(value) {
        super.seriesCategory = value;
      }
      get seriesColor() {
        return this[seriesColor$];
      }
      set seriesColor(value) {
        super.seriesColor = value;
      }
      get data() {
        return this[data$];
      }
      set data(value) {
        super.data = value;
      }
      get keyFn() {
        return this[keyFn$0];
      }
      set keyFn(value) {
        super.keyFn = value;
      }
      get domainFn() {
        return this[domainFn$];
      }
      set domainFn(value) {
        super.domainFn = value;
      }
      get domainFormatterFn() {
        return this[domainFormatterFn$];
      }
      set domainFormatterFn(value) {
        super.domainFormatterFn = value;
      }
      get domainLowerBoundFn() {
        return this[domainLowerBoundFn$];
      }
      set domainLowerBoundFn(value) {
        super.domainLowerBoundFn = value;
      }
      get domainUpperBoundFn() {
        return this[domainUpperBoundFn$];
      }
      set domainUpperBoundFn(value) {
        super.domainUpperBoundFn = value;
      }
      get measureFn() {
        return this[measureFn$];
      }
      set measureFn(value) {
        super.measureFn = value;
      }
      get measureFormatterFn() {
        return this[measureFormatterFn$];
      }
      set measureFormatterFn(value) {
        super.measureFormatterFn = value;
      }
      get measureLowerBoundFn() {
        return this[measureLowerBoundFn$];
      }
      set measureLowerBoundFn(value) {
        super.measureLowerBoundFn = value;
      }
      get measureUpperBoundFn() {
        return this[measureUpperBoundFn$];
      }
      set measureUpperBoundFn(value) {
        super.measureUpperBoundFn = value;
      }
      get measureOffsetFn() {
        return this[measureOffsetFn$];
      }
      set measureOffsetFn(value) {
        super.measureOffsetFn = value;
      }
      get areaColorFn() {
        return this[areaColorFn$];
      }
      set areaColorFn(value) {
        super.areaColorFn = value;
      }
      get colorFn() {
        return this[colorFn$];
      }
      set colorFn(value) {
        super.colorFn = value;
      }
      get dashPatternFn() {
        return this[dashPatternFn$];
      }
      set dashPatternFn(value) {
        super.dashPatternFn = value;
      }
      get fillColorFn() {
        return this[fillColorFn$];
      }
      set fillColorFn(value) {
        super.fillColorFn = value;
      }
      get patternColorFn() {
        return this[patternColorFn$];
      }
      set patternColorFn(value) {
        super.patternColorFn = value;
      }
      get fillPatternFn() {
        return this[fillPatternFn$];
      }
      set fillPatternFn(value) {
        super.fillPatternFn = value;
      }
      get radiusPxFn() {
        return this[radiusPxFn$];
      }
      set radiusPxFn(value) {
        super.radiusPxFn = value;
      }
      get strokeWidthPxFn() {
        return this[strokeWidthPxFn$];
      }
      set strokeWidthPxFn(value) {
        super.strokeWidthPxFn = value;
      }
      get labelAccessorFn() {
        return this[labelAccessorFn$];
      }
      set labelAccessorFn(value) {
        super.labelAccessorFn = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[insideLabelStyleAccessorFn$0];
      }
      set insideLabelStyleAccessorFn(value) {
        super.insideLabelStyleAccessorFn = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[outsideLabelStyleAccessorFn$0];
      }
      set outsideLabelStyleAccessorFn(value) {
        super.outsideLabelStyleAccessorFn = value;
      }
      get attributes() {
        return this[attributes];
      }
      set attributes(value) {
        super.attributes = value;
      }
      static new(opts) {
        let id = opts && 'id' in opts ? opts.id : null;
        let data = opts && 'data' in opts ? opts.data : null;
        let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
        let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
        let displayName = opts && 'displayName' in opts ? opts.displayName : null;
        let seriesColor = opts && 'seriesColor' in opts ? opts.seriesColor : null;
        let areaColorFn = opts && 'areaColorFn' in opts ? opts.areaColorFn : null;
        let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
        let dashPatternFn = opts && 'dashPatternFn' in opts ? opts.dashPatternFn : null;
        let domainFormatterFn = opts && 'domainFormatterFn' in opts ? opts.domainFormatterFn : null;
        let domainLowerBoundFn = opts && 'domainLowerBoundFn' in opts ? opts.domainLowerBoundFn : null;
        let domainUpperBoundFn = opts && 'domainUpperBoundFn' in opts ? opts.domainUpperBoundFn : null;
        let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
        let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
        let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
        let keyFn = opts && 'keyFn' in opts ? opts.keyFn : null;
        let labelAccessorFn = opts && 'labelAccessorFn' in opts ? opts.labelAccessorFn : null;
        let insideLabelStyleAccessorFn = opts && 'insideLabelStyleAccessorFn' in opts ? opts.insideLabelStyleAccessorFn : null;
        let outsideLabelStyleAccessorFn = opts && 'outsideLabelStyleAccessorFn' in opts ? opts.outsideLabelStyleAccessorFn : null;
        let measureFormatterFn = opts && 'measureFormatterFn' in opts ? opts.measureFormatterFn : null;
        let measureLowerBoundFn = opts && 'measureLowerBoundFn' in opts ? opts.measureLowerBoundFn : null;
        let measureUpperBoundFn = opts && 'measureUpperBoundFn' in opts ? opts.measureUpperBoundFn : null;
        let measureOffsetFn = opts && 'measureOffsetFn' in opts ? opts.measureOffsetFn : null;
        let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : false;
        let radiusPxFn = opts && 'radiusPxFn' in opts ? opts.radiusPxFn : null;
        let seriesCategory = opts && 'seriesCategory' in opts ? opts.seriesCategory : null;
        let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
        let _domainFn = dart.fn(index => domainFn(data[$_get](index), index), dart.fnType(dart.legacy(D), [T$.intL()]));
        let _measureFn = dart.fn(index => measureFn(data[$_get](index), index), T$.intLTonumL());
        let _areaColorFn = areaColorFn == null ? null : dart.fn(index => areaColorFn(data[$_get](index), index), T$.intLToColorL());
        let _colorFn = colorFn == null ? null : dart.fn(index => colorFn(data[$_get](index), index), T$.intLToColorL());
        let _dashPatternFn = dashPatternFn == null ? null : dart.fn(index => dashPatternFn(data[$_get](index), index), T$.intLToListLOfintL());
        let _domainFormatterFn = domainFormatterFn == null ? null : dart.fn(index => domainFormatterFn(data[$_get](index), index), dart.fnType(dart.legacy(dart.fnType(T$.StringL(), [dart.legacy(D)])), [T$.intL()]));
        let _domainLowerBoundFn = domainLowerBoundFn == null ? null : dart.fn(index => domainLowerBoundFn(data[$_get](index), index), dart.fnType(dart.legacy(D), [T$.intL()]));
        let _domainUpperBoundFn = domainUpperBoundFn == null ? null : dart.fn(index => domainUpperBoundFn(data[$_get](index), index), dart.fnType(dart.legacy(D), [T$.intL()]));
        let _fillColorFn = fillColorFn == null ? null : dart.fn(index => fillColorFn(data[$_get](index), index), T$.intLToColorL());
        let _patternColorFn = patternColorFn == null ? null : dart.fn(index => patternColorFn(data[$_get](index), index), T$.intLToColorL());
        let _fillPatternFn = fillPatternFn == null ? null : dart.fn(index => fillPatternFn(data[$_get](index), index), T$.intLToFillPatternTypeL());
        let _labelAccessorFn = labelAccessorFn == null ? null : dart.fn(index => labelAccessorFn(data[$_get](index), index), T$.intLToStringL());
        let _insideLabelStyleAccessorFn = insideLabelStyleAccessorFn == null ? null : dart.fn(index => insideLabelStyleAccessorFn(data[$_get](index), index), T$.intLToTextStyleSpecL());
        let _outsideLabelStyleAccessorFn = outsideLabelStyleAccessorFn == null ? null : dart.fn(index => outsideLabelStyleAccessorFn(data[$_get](index), index), T$.intLToTextStyleSpecL());
        let _measureFormatterFn = measureFormatterFn == null ? null : dart.fn(index => measureFormatterFn(data[$_get](index), index), T$.intLToFn$1());
        let _measureLowerBoundFn = measureLowerBoundFn == null ? null : dart.fn(index => measureLowerBoundFn(data[$_get](index), index), T$.intLTonumL());
        let _measureUpperBoundFn = measureUpperBoundFn == null ? null : dart.fn(index => measureUpperBoundFn(data[$_get](index), index), T$.intLTonumL());
        let _measureOffsetFn = measureOffsetFn == null ? null : dart.fn(index => measureOffsetFn(data[$_get](index), index), T$.intLTonumL());
        let _radiusPxFn = radiusPxFn == null ? null : dart.fn(index => radiusPxFn(data[$_get](index), index), T$.intLTonumL());
        let _strokeWidthPxFn = strokeWidthPxFn == null ? null : dart.fn(index => strokeWidthPxFn(data[$_get](index), index), T$.intLTonumL());
        let _keyFn = keyFn == null ? null : dart.fn(index => keyFn(data[$_get](index), index), T$.intLToStringL());
        return new (series$.Series$(dart.legacy(T), dart.legacy(D)))._internal({id: id, data: data, domainFn: _domainFn, measureFn: _measureFn, displayName: displayName, areaColorFn: _areaColorFn, colorFn: _colorFn, dashPatternFn: _dashPatternFn, domainFormatterFn: _domainFormatterFn, domainLowerBoundFn: _domainLowerBoundFn, domainUpperBoundFn: _domainUpperBoundFn, fillColorFn: _fillColorFn, fillPatternFn: _fillPatternFn, keyFn: _keyFn, patternColorFn: _patternColorFn, labelAccessorFn: _labelAccessorFn, insideLabelStyleAccessorFn: _insideLabelStyleAccessorFn, outsideLabelStyleAccessorFn: _outsideLabelStyleAccessorFn, measureFormatterFn: _measureFormatterFn, measureLowerBoundFn: _measureLowerBoundFn, measureUpperBoundFn: _measureUpperBoundFn, measureOffsetFn: _measureOffsetFn, overlaySeries: overlaySeries, radiusPxFn: _radiusPxFn, seriesCategory: seriesCategory, seriesColor: seriesColor, strokeWidthPxFn: _strokeWidthPxFn});
      }
      setAttribute(R, key, value) {
        this.attributes.setAttr(dart.legacy(R), key, value);
      }
      getAttribute(R, key) {
        return this.attributes.getAttr(dart.legacy(R), key);
      }
    }
    (Series._internal = function(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
      let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
      let displayName = opts && 'displayName' in opts ? opts.displayName : null;
      let areaColorFn = opts && 'areaColorFn' in opts ? opts.areaColorFn : null;
      let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
      let dashPatternFn = opts && 'dashPatternFn' in opts ? opts.dashPatternFn : null;
      let domainFormatterFn = opts && 'domainFormatterFn' in opts ? opts.domainFormatterFn : null;
      let domainLowerBoundFn = opts && 'domainLowerBoundFn' in opts ? opts.domainLowerBoundFn : null;
      let domainUpperBoundFn = opts && 'domainUpperBoundFn' in opts ? opts.domainUpperBoundFn : null;
      let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
      let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
      let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
      let keyFn = opts && 'keyFn' in opts ? opts.keyFn : null;
      let labelAccessorFn = opts && 'labelAccessorFn' in opts ? opts.labelAccessorFn : null;
      let insideLabelStyleAccessorFn = opts && 'insideLabelStyleAccessorFn' in opts ? opts.insideLabelStyleAccessorFn : null;
      let outsideLabelStyleAccessorFn = opts && 'outsideLabelStyleAccessorFn' in opts ? opts.outsideLabelStyleAccessorFn : null;
      let measureFormatterFn = opts && 'measureFormatterFn' in opts ? opts.measureFormatterFn : null;
      let measureLowerBoundFn = opts && 'measureLowerBoundFn' in opts ? opts.measureLowerBoundFn : null;
      let measureUpperBoundFn = opts && 'measureUpperBoundFn' in opts ? opts.measureUpperBoundFn : null;
      let measureOffsetFn = opts && 'measureOffsetFn' in opts ? opts.measureOffsetFn : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : false;
      let radiusPxFn = opts && 'radiusPxFn' in opts ? opts.radiusPxFn : null;
      let seriesCategory = opts && 'seriesCategory' in opts ? opts.seriesCategory : null;
      let seriesColor = opts && 'seriesColor' in opts ? opts.seriesColor : null;
      let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
      this[attributes] = new series$.SeriesAttributes.new();
      this[id$0] = id;
      this[data$] = data;
      this[domainFn$] = domainFn;
      this[measureFn$] = measureFn;
      this[displayName$] = displayName;
      this[areaColorFn$] = areaColorFn;
      this[colorFn$] = colorFn;
      this[dashPatternFn$] = dashPatternFn;
      this[domainFormatterFn$] = domainFormatterFn;
      this[domainLowerBoundFn$] = domainLowerBoundFn;
      this[domainUpperBoundFn$] = domainUpperBoundFn;
      this[fillColorFn$] = fillColorFn;
      this[fillPatternFn$] = fillPatternFn;
      this[patternColorFn$] = patternColorFn;
      this[keyFn$0] = keyFn;
      this[labelAccessorFn$] = labelAccessorFn;
      this[insideLabelStyleAccessorFn$0] = insideLabelStyleAccessorFn;
      this[outsideLabelStyleAccessorFn$0] = outsideLabelStyleAccessorFn;
      this[measureFormatterFn$] = measureFormatterFn;
      this[measureLowerBoundFn$] = measureLowerBoundFn;
      this[measureUpperBoundFn$] = measureUpperBoundFn;
      this[measureOffsetFn$] = measureOffsetFn;
      this[overlaySeries$] = overlaySeries;
      this[radiusPxFn$] = radiusPxFn;
      this[seriesCategory$] = seriesCategory;
      this[seriesColor$] = seriesColor;
      this[strokeWidthPxFn$] = strokeWidthPxFn;
      ;
    }).prototype = Series.prototype;
    dart.addTypeTests(Series);
    Series.prototype[_is_Series_default] = true;
    dart.addTypeCaches(Series);
    dart.setMethodSignature(Series, () => ({
      __proto__: dart.getMethods(Series.__proto__),
      setAttribute: dart.gFnType(R => [dart.void, [dart.legacy(series$.AttributeKey$(dart.legacy(R))), dart.legacy(R)]]),
      getAttribute: dart.gFnType(R => [dart.legacy(R), [dart.legacy(series$.AttributeKey$(dart.legacy(R)))]])
    }));
    dart.setLibraryUri(Series, I[40]);
    dart.setFieldSignature(Series, () => ({
      __proto__: dart.getFields(Series.__proto__),
      id: dart.finalFieldType(dart.legacy(core.String)),
      displayName: dart.finalFieldType(dart.legacy(core.String)),
      overlaySeries: dart.finalFieldType(dart.legacy(core.bool)),
      seriesCategory: dart.finalFieldType(dart.legacy(core.String)),
      seriesColor: dart.finalFieldType(dart.legacy(color.Color)),
      data: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(T)))),
      keyFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      domainFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      domainFormatterFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(D)])), [dart.legacy(core.int)]))),
      domainLowerBoundFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      domainUpperBoundFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      measureFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureFormatterFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)])), [dart.legacy(core.int)]))),
      measureLowerBoundFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureUpperBoundFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureOffsetFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      areaColorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      colorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      dashPatternFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), [dart.legacy(core.int)]))),
      fillColorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      patternColorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      fillPatternFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(chart_canvas.FillPatternType), [dart.legacy(core.int)]))),
      radiusPxFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      strokeWidthPxFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      labelAccessorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      insideLabelStyleAccessorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      outsideLabelStyleAccessorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      attributes: dart.finalFieldType(dart.legacy(series$.SeriesAttributes))
    }));
    return Series;
  });
  series$.Series = series$.Series$();
  dart.addTypeTests(series$.Series, _is_Series_default);
  const _is_AttributeKey_default = Symbol('_is_AttributeKey_default');
  series$.AttributeKey$ = dart.generic(R => {
    class AttributeKey extends typed_registry.TypedKey$(dart.legacy(R)) {}
    (AttributeKey.new = function(uniqueKey) {
      AttributeKey.__proto__.new.call(this, uniqueKey);
      ;
    }).prototype = AttributeKey.prototype;
    dart.addTypeTests(AttributeKey);
    AttributeKey.prototype[_is_AttributeKey_default] = true;
    dart.addTypeCaches(AttributeKey);
    dart.setLibraryUri(AttributeKey, I[40]);
    return AttributeKey;
  });
  series$.AttributeKey = series$.AttributeKey$();
  dart.addTypeTests(series$.AttributeKey, _is_AttributeKey_default);
  series$.SeriesAttributes = class SeriesAttributes extends typed_registry.TypedRegistry {};
  (series$.SeriesAttributes.new = function() {
    series$.SeriesAttributes.__proto__.new.call(this);
    ;
  }).prototype = series$.SeriesAttributes.prototype;
  dart.addTypeTests(series$.SeriesAttributes);
  dart.addTypeCaches(series$.SeriesAttributes);
  dart.setLibraryUri(series$.SeriesAttributes, I[40]);
  axis.AxisOrientation = class AxisOrientation extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (axis.AxisOrientation.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = axis.AxisOrientation.prototype;
  dart.addTypeTests(axis.AxisOrientation);
  dart.addTypeCaches(axis.AxisOrientation);
  dart.setMethodSignature(axis.AxisOrientation, () => ({
    __proto__: dart.getMethods(axis.AxisOrientation.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(axis.AxisOrientation, I[41]);
  dart.setFieldSignature(axis.AxisOrientation, () => ({
    __proto__: dart.getFields(axis.AxisOrientation.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(axis.AxisOrientation, ['toString']);
  axis.AxisOrientation.top = C[18] || CT.C18;
  axis.AxisOrientation.right = C[20] || CT.C20;
  axis.AxisOrientation.bottom = C[19] || CT.C19;
  axis.AxisOrientation.left = C[21] || CT.C21;
  axis.AxisOrientation.values = C[72] || CT.C72;
  const _is_ImmutableAxis_default = Symbol('_is_ImmutableAxis_default');
  axis.ImmutableAxis$ = dart.generic(D => {
    class ImmutableAxis extends core.Object {}
    (ImmutableAxis.new = function() {
      ;
    }).prototype = ImmutableAxis.prototype;
    dart.addTypeTests(ImmutableAxis);
    ImmutableAxis.prototype[_is_ImmutableAxis_default] = true;
    dart.addTypeCaches(ImmutableAxis);
    dart.setLibraryUri(ImmutableAxis, I[41]);
    return ImmutableAxis;
  });
  axis.ImmutableAxis = axis.ImmutableAxis$();
  dart.addTypeTests(axis.ImmutableAxis, _is_ImmutableAxis_default);
  var scale$ = dart.privateName(axis, "Axis.scale");
  var tickProvider$ = dart.privateName(axis, "Axis.tickProvider");
  var tickDrawStrategy = dart.privateName(axis, "Axis.tickDrawStrategy");
  var axisOrientation = dart.privateName(axis, "Axis.axisOrientation");
  var context$ = dart.privateName(axis, "Axis.context");
  var reverseOutputRange = dart.privateName(axis, "Axis.reverseOutputRange");
  var autoViewport = dart.privateName(axis, "Axis.autoViewport");
  var forceDrawAxisLine = dart.privateName(axis, "Axis.forceDrawAxisLine");
  var lockAxis = dart.privateName(axis, "Axis.lockAxis");
  var layoutPaintOrder = dart.privateName(axis, "Axis.layoutPaintOrder");
  var graphicsFactory$1 = dart.privateName(axis, "Axis.graphicsFactory");
  var _previousScale = dart.privateName(axis, "_previousScale");
  var _formatterValueCache = dart.privateName(axis, "_formatterValueCache");
  var _providedTicks = dart.privateName(axis, "_providedTicks");
  var _axisTicks = dart.privateName(axis, "_axisTicks");
  var _componentBounds = dart.privateName(axis, "_componentBounds");
  var _drawAreaBounds$0 = dart.privateName(axis, "_drawAreaBounds");
  var _defaultScale = dart.privateName(axis, "_defaultScale");
  var _defaultTickProvider = dart.privateName(axis, "_defaultTickProvider");
  var _defaultTickFormatter = dart.privateName(axis, "_defaultTickFormatter");
  var _tickFormatter = dart.privateName(axis, "_tickFormatter");
  var _updateProvidedTicks = dart.privateName(axis, "_updateProvidedTicks");
  var _updateAxisTicks = dart.privateName(axis, "_updateAxisTicks");
  var _clampTranslatePx = dart.privateName(axis, "_clampTranslatePx");
  var _layoutPosition = dart.privateName(axis, "_layoutPosition");
  var _measureVerticalAxis = dart.privateName(axis, "_measureVerticalAxis");
  var _measureHorizontalAxis = dart.privateName(axis, "_measureHorizontalAxis");
  const _is_Axis_default = Symbol('_is_Axis_default');
  axis.Axis$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var LinkedMapOfDL$StringL = () => (LinkedMapOfDL$StringL = dart.constFn(_js_helper.LinkedMap$(DL(), T$.StringL())))();
    var AxisTicksOfDL = () => (AxisTicksOfDL = dart.constFn(axis_tick.AxisTicks$(DL())))();
    var AxisTicksLOfDL = () => (AxisTicksLOfDL = dart.constFn(dart.legacy(AxisTicksOfDL())))();
    var JSArrayOfAxisTicksLOfDL = () => (JSArrayOfAxisTicksLOfDL = dart.constFn(_interceptors.JSArray$(AxisTicksLOfDL())))();
    var MutableScaleOfDL = () => (MutableScaleOfDL = dart.constFn(scale.MutableScale$(DL())))();
    var MutableScaleLOfDL = () => (MutableScaleLOfDL = dart.constFn(dart.legacy(MutableScaleOfDL())))();
    var TickProviderOfDL = () => (TickProviderOfDL = dart.constFn(tick_provider.TickProvider$(DL())))();
    var TickProviderLOfDL = () => (TickProviderLOfDL = dart.constFn(dart.legacy(TickProviderOfDL())))();
    var TickDrawStrategyOfDL = () => (TickDrawStrategyOfDL = dart.constFn(tick_draw_strategy.TickDrawStrategy$(DL())))();
    var TickDrawStrategyLOfDL = () => (TickDrawStrategyLOfDL = dart.constFn(dart.legacy(TickDrawStrategyOfDL())))();
    var TickFormatterOfDL = () => (TickFormatterOfDL = dart.constFn(tick_formatter.TickFormatter$(DL())))();
    var TickFormatterLOfDL = () => (TickFormatterLOfDL = dart.constFn(dart.legacy(TickFormatterOfDL())))();
    var RangeAxisTicksOfDL = () => (RangeAxisTicksOfDL = dart.constFn(range_axis_tick.RangeAxisTicks$(DL())))();
    var RangeTickOfDL = () => (RangeTickOfDL = dart.constFn(range_tick.RangeTick$(DL())))();
    var RangeTickLOfDL = () => (RangeTickLOfDL = dart.constFn(dart.legacy(RangeTickOfDL())))();
    var TickOfDL = () => (TickOfDL = dart.constFn(tick.Tick$(DL())))();
    var TickLOfDL = () => (TickLOfDL = dart.constFn(dart.legacy(TickOfDL())))();
    var ListOfTickLOfDL = () => (ListOfTickLOfDL = dart.constFn(core.List$(TickLOfDL())))();
    var ListLOfTickLOfDL = () => (ListLOfTickLOfDL = dart.constFn(dart.legacy(ListOfTickLOfDL())))();
    var AxisTicksLOfDLToboolL = () => (AxisTicksLOfDLToboolL = dart.constFn(dart.fnType(T$.boolL(), [AxisTicksLOfDL()])))();
    class Axis extends axis.ImmutableAxis$(dart.legacy(D)) {
      get scale() {
        return this[scale$];
      }
      set scale(value) {
        this[scale$] = MutableScaleLOfDL().as(value);
      }
      get tickProvider() {
        return this[tickProvider$];
      }
      set tickProvider(value) {
        this[tickProvider$] = TickProviderLOfDL().as(value);
      }
      get tickDrawStrategy() {
        return this[tickDrawStrategy];
      }
      set tickDrawStrategy(value) {
        this[tickDrawStrategy] = TickDrawStrategyLOfDL().as(value);
      }
      get axisOrientation() {
        return this[axisOrientation];
      }
      set axisOrientation(value) {
        this[axisOrientation] = value;
      }
      get context() {
        return this[context$];
      }
      set context(value) {
        this[context$] = value;
      }
      get reverseOutputRange() {
        return this[reverseOutputRange];
      }
      set reverseOutputRange(value) {
        this[reverseOutputRange] = value;
      }
      get autoViewport() {
        return this[autoViewport];
      }
      set autoViewport(value) {
        this[autoViewport] = value;
      }
      get forceDrawAxisLine() {
        return this[forceDrawAxisLine];
      }
      set forceDrawAxisLine(value) {
        this[forceDrawAxisLine] = value;
      }
      get lockAxis() {
        return this[lockAxis];
      }
      set lockAxis(value) {
        this[lockAxis] = value;
      }
      get layoutPaintOrder() {
        return this[layoutPaintOrder];
      }
      set layoutPaintOrder(value) {
        this[layoutPaintOrder] = value;
      }
      get graphicsFactory() {
        return this[graphicsFactory$1];
      }
      set graphicsFactory(value) {
        this[graphicsFactory$1] = value;
      }
      set tickFormatter(formatter) {
        TickFormatterLOfDL().as(formatter);
        if (!dart.equals(this[_tickFormatter], formatter)) {
          this[_tickFormatter] = formatter;
          this[_formatterValueCache][$clear]();
        }
      }
      get tickFormatter() {
        return this[_tickFormatter];
      }
      get mutableScale() {
        return this.scale;
      }
      get rangeBand() {
        return this.scale.rangeBand;
      }
      get stepSize() {
        return this.scale.stepSize;
      }
      get range() {
        return this.scale.range;
      }
      setRangeBandConfig(rangeBandConfig) {
        this.mutableScale.rangeBandConfig = rangeBandConfig;
      }
      get hasValidBarChartRangeBandConfig() {
        let t4, t4$, t4$0;
        return (t4$0 = (t4$ = (t4 = this.mutableScale, t4 == null ? null : t4.rangeBandConfig), t4$ == null ? null : t4$.type), t4$0 == null ? scale.RangeBandType.none : t4$0) != scale.RangeBandType.none;
      }
      addDomainValue(domain) {
        DL().as(domain);
        if (dart.test(this.lockAxis)) {
          return;
        }
        this.scale.addDomain(domain);
      }
      resetDefaultConfiguration() {
        this.forceDrawAxisLine = null;
        this.autoViewport = true;
        this.scale = this[_defaultScale];
        this[_tickFormatter] = this[_defaultTickFormatter];
        this.tickProvider = this[_defaultTickProvider];
      }
      resetDomains() {
        if (dart.test(this.lockAxis)) {
          return;
        }
        this[_formatterValueCache][$clear]();
        this.scale.resetDomain();
        this.reverseOutputRange = false;
        if (dart.test(this.autoViewport)) {
          this.scale.resetViewportSettings();
        }
      }
      getLocation(domain) {
        DL().as(domain);
        if (domain != null) {
          let domainLocation = this.scale._get(domain);
          if (dart.notNull(domainLocation) > dart.notNull(this.scale.range.max) && dart.notNull(domainLocation) - 2e-10 < dart.notNull(this.scale.range.max)) {
            return dart.notNull(domainLocation) - 2e-10;
          } else if (dart.notNull(domainLocation) < dart.notNull(this.scale.range.min) && dart.notNull(domainLocation) + 2e-10 > dart.notNull(this.scale.range.min)) {
            return dart.notNull(domainLocation) + 2e-10;
          }
          return domainLocation;
        }
        return null;
      }
      getDomain(location) {
        return this.scale.reverse(location);
      }
      compareDomainValueToViewport(domain) {
        DL().as(domain);
        return this.scale.compareDomainValueToViewport(domain);
      }
      setOutputRange(start, end) {
        this.scale.range = new scale.ScaleOutputExtent.new(start, end);
      }
      updateTicks() {
        this[_updateProvidedTicks]();
        this[_updateAxisTicks]();
      }
      [_updateProvidedTicks]() {
        if (dart.test(this.lockAxis)) {
          return;
        }
        this[_providedTicks] = this.tickProvider.getTicks({context: this.context, graphicsFactory: this.graphicsFactory, scale: this.scale, formatter: this.tickFormatter, formatterValueCache: this[_formatterValueCache], tickDrawStrategy: this.tickDrawStrategy, orientation: this.axisOrientation, viewportExtensionEnabled: this.autoViewport});
      }
      [_updateAxisTicks]() {
        let t4, t4$, t4$0;
        if (dart.test(this.lockAxis)) {
          return;
        }
        let providedTicks = core.List.from((t4 = this[_providedTicks], t4 == null ? [] : t4));
        for (let animatedTick of this[_axisTicks]) {
          let tick = (t4$ = providedTicks, t4$ == null ? null : t4$[$firstWhere](dart.fn(t => dart.equals(dart.dload(t, 'value'), animatedTick.value), T$.dynamicToboolL()), {orElse: dart.fn(() => null, T$.VoidToNull())}));
          if (tick != null) {
            if (!dart.test(text_element.TextElement.elementSettingsSame(animatedTick.textElement, T$.TextElementL().as(dart.dload(tick, 'textElement'))))) {
              animatedTick.textElement = T$.TextElementL().as(dart.dload(tick, 'textElement'));
            }
            let newTarget = this.scale._get(DL().as(dart.dload(tick, 'value')));
            if (dart.test(this.scale.isRangeValueWithinViewport(newTarget))) {
              animatedTick.setNewTarget(newTarget);
            } else {
              animatedTick.animateOut(animatedTick.locationPx);
            }
            providedTicks[$remove](tick);
          } else {
            animatedTick.animateOut(this.scale._get(animatedTick.value)[$toDouble]());
          }
        }
        t4$0 = providedTicks;
        t4$0 == null ? null : t4$0[$forEach](dart.fn(tick => {
          let animatedTick = null;
          if (T$.RangeTickL().is(tick)) {
            animatedTick = new (RangeAxisTicksOfDL()).new(RangeTickLOfDL().as(tick));
          } else {
            animatedTick = new (AxisTicksOfDL()).new(TickLOfDL().as(tick));
          }
          if (dart.test(this.scale.isRangeValueWithinViewport(animatedTick.locationPx))) {
            if (this[_previousScale] != null) {
              animatedTick.animateInFrom(this[_previousScale]._get(DL().as(dart.dload(tick, 'value')))[$toDouble]());
            }
            this[_axisTicks][$add](AxisTicksLOfDL().as(animatedTick));
          }
        }, T$.dynamicToNull()));
        this[_axisTicks][$sort]();
        this[_previousScale] = this.scale.copy();
      }
      setViewportSettings(viewportScale, viewportTranslatePx, opts) {
        let drawAreaWidth = opts && 'drawAreaWidth' in opts ? opts.drawAreaWidth : null;
        let drawAreaHeight = opts && 'drawAreaHeight' in opts ? opts.drawAreaHeight : null;
        viewportTranslatePx = this[_clampTranslatePx](viewportScale, viewportTranslatePx, {drawAreaWidth: drawAreaWidth, drawAreaHeight: drawAreaHeight});
        this.scale.setViewportSettings(viewportScale, viewportTranslatePx);
      }
      get viewportScalingFactor() {
        return this.scale.viewportScalingFactor;
      }
      get viewportTranslatePx() {
        let t4;
        t4 = this.scale;
        return t4 == null ? null : t4.viewportTranslatePx;
      }
      [_clampTranslatePx](viewportScalingFactor, viewportTranslatePx, opts) {
        let drawAreaWidth = opts && 'drawAreaWidth' in opts ? opts.drawAreaWidth : null;
        let drawAreaHeight = opts && 'drawAreaHeight' in opts ? opts.drawAreaHeight : null;
        if (dart.test(this.isVertical)) {
          if (drawAreaHeight == null) {
            return viewportTranslatePx;
          }
          let maxPositiveTranslate = dart.notNull(drawAreaHeight) * dart.notNull(viewportScalingFactor) - dart.notNull(drawAreaHeight);
          viewportTranslatePx = math.max(T$.doubleL(), math.min(T$.doubleL(), viewportTranslatePx, maxPositiveTranslate), 0.0);
        } else {
          if (drawAreaWidth == null) {
            return viewportTranslatePx;
          }
          let maxNegativeTranslate = -1.0 * (dart.notNull(drawAreaWidth) * dart.notNull(viewportScalingFactor) - dart.notNull(drawAreaWidth));
          viewportTranslatePx = math.min(T$.doubleL(), math.max(T$.doubleL(), viewportTranslatePx, maxNegativeTranslate), 0.0);
        }
        return viewportTranslatePx;
      }
      get layoutConfig() {
        return new layout_view.LayoutViewConfig.new({paintOrder: this.layoutPaintOrder, position: this[_layoutPosition], positionOrder: 20});
      }
      get [_layoutPosition]() {
        let position = null;
        switch (this.axisOrientation) {
          case C[18] || CT.C18:
          {
            position = layout_view.LayoutPosition.Top;
            break;
          }
          case C[20] || CT.C20:
          {
            position = layout_view.LayoutPosition.Right;
            break;
          }
          case C[19] || CT.C19:
          {
            position = layout_view.LayoutPosition.Bottom;
            break;
          }
          case C[21] || CT.C21:
          {
            position = layout_view.LayoutPosition.Left;
            break;
          }
        }
        return position;
      }
      get isVertical() {
        return this.axisOrientation == axis.AxisOrientation.left || this.axisOrientation == axis.AxisOrientation.right;
      }
      measure(maxWidth, maxHeight) {
        return dart.test(this.isVertical) ? this[_measureVerticalAxis](maxWidth, maxHeight) : this[_measureHorizontalAxis](maxWidth, maxHeight);
      }
      [_measureVerticalAxis](maxWidth, maxHeight) {
        this.setOutputRange(maxHeight, 0);
        this[_updateProvidedTicks]();
        return this.tickDrawStrategy.measureVerticallyDrawnTicks(ListLOfTickLOfDL().as(this[_providedTicks]), maxWidth, maxHeight);
      }
      [_measureHorizontalAxis](maxWidth, maxHeight) {
        this.setOutputRange(0, maxWidth);
        this[_updateProvidedTicks]();
        return this.tickDrawStrategy.measureHorizontallyDrawnTicks(ListLOfTickLOfDL().as(this[_providedTicks]), maxWidth, maxHeight);
      }
      layout(componentBounds, drawAreaBounds) {
        this[_componentBounds] = componentBounds;
        this[_drawAreaBounds$0] = drawAreaBounds;
        let outputStart = dart.test(this.isVertical) ? this[_componentBounds][$bottom] : this[_componentBounds][$left];
        let outputEnd = dart.test(this.isVertical) ? this[_componentBounds][$top] : this[_componentBounds][$right];
        let outputRange = dart.test(this.reverseOutputRange) ? new scale.ScaleOutputExtent.new(outputEnd, outputStart) : new scale.ScaleOutputExtent.new(outputStart, outputEnd);
        if (!dart.equals(this.scale.range, outputRange)) {
          this.scale.range = outputRange;
        }
        this[_updateProvidedTicks]();
        this[_updateAxisTicks]();
      }
      get isSeriesRenderer() {
        return false;
      }
      get componentBounds() {
        return this[_componentBounds];
      }
      get drawAxisLine() {
        if (this.forceDrawAxisLine != null) {
          return this.forceDrawAxisLine;
        }
        return T$.SmallTickDrawStrategyL().is(this.tickDrawStrategy);
      }
      paint(canvas, animationPercent) {
        let t4;
        if (animationPercent === 1.0) {
          this[_axisTicks][$removeWhere](dart.fn(t => t.markedForRemoval, AxisTicksLOfDLToboolL()));
        }
        for (let i = 0; i < dart.notNull(this[_axisTicks][$length]); i = i + 1) {
          let animatedTick = this[_axisTicks][$_get](i);
          this.tickDrawStrategy.draw(canvas, (t4 = animatedTick, (() => {
            t4.setCurrentTick(animationPercent);
            return t4;
          })()), {orientation: this.axisOrientation, axisBounds: this[_componentBounds], drawAreaBounds: this[_drawAreaBounds$0], isFirst: i === 0, isLast: i === dart.notNull(this[_axisTicks][$length]) - 1});
        }
        if (dart.test(this.drawAxisLine)) {
          this.tickDrawStrategy.drawAxisLine(canvas, this.axisOrientation, this[_componentBounds]);
        }
      }
    }
    (Axis.new = function(opts) {
      let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
      let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      this[_previousScale] = null;
      this[_formatterValueCache] = new (LinkedMapOfDL$StringL()).new();
      this[tickDrawStrategy] = null;
      this[axisOrientation] = null;
      this[context$] = null;
      this[reverseOutputRange] = false;
      this[autoViewport] = true;
      this[forceDrawAxisLine] = null;
      this[lockAxis] = false;
      this[_providedTicks] = null;
      this[_axisTicks] = JSArrayOfAxisTicksLOfDL().of([]);
      this[_componentBounds] = null;
      this[_drawAreaBounds$0] = null;
      this[layoutPaintOrder] = 0;
      this[graphicsFactory$1] = null;
      this[tickProvider$] = tickProvider;
      this[scale$] = scale;
      this[_defaultScale] = scale;
      this[_defaultTickProvider] = tickProvider;
      this[_defaultTickFormatter] = tickFormatter;
      this[_tickFormatter] = tickFormatter;
      ;
    }).prototype = Axis.prototype;
    dart.addTypeTests(Axis);
    Axis.prototype[_is_Axis_default] = true;
    dart.addTypeCaches(Axis);
    Axis[dart.implements] = () => [layout_view.LayoutView];
    dart.setMethodSignature(Axis, () => ({
      __proto__: dart.getMethods(Axis.__proto__),
      setRangeBandConfig: dart.fnType(dart.void, [dart.legacy(scale.RangeBandConfig)]),
      addDomainValue: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      resetDefaultConfiguration: dart.fnType(dart.void, []),
      resetDomains: dart.fnType(dart.void, []),
      getLocation: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Object)]),
      getDomain: dart.fnType(dart.legacy(D), [dart.legacy(core.double)]),
      compareDomainValueToViewport: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
      setOutputRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      updateTicks: dart.fnType(dart.void, []),
      [_updateProvidedTicks]: dart.fnType(dart.void, []),
      [_updateAxisTicks]: dart.fnType(dart.void, []),
      setViewportSettings: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)], {drawAreaHeight: dart.legacy(core.int), drawAreaWidth: dart.legacy(core.int)}, {}),
      [_clampTranslatePx]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double)], {drawAreaHeight: dart.legacy(core.int), drawAreaWidth: dart.legacy(core.int)}, {}),
      measure: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.int), dart.legacy(core.int)]),
      [_measureVerticalAxis]: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.int), dart.legacy(core.int)]),
      [_measureHorizontalAxis]: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.int), dart.legacy(core.int)]),
      layout: dart.fnType(dart.void, [dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(math.Rectangle$(dart.legacy(core.int)))]),
      paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(core.double)])
    }));
    dart.setGetterSignature(Axis, () => ({
      __proto__: dart.getGetters(Axis.__proto__),
      tickFormatter: dart.legacy(tick_formatter.TickFormatter$(dart.legacy(D))),
      mutableScale: dart.legacy(scale.MutableScale$(dart.legacy(D))),
      rangeBand: dart.legacy(core.double),
      stepSize: dart.legacy(core.double),
      range: dart.legacy(scale.ScaleOutputExtent),
      hasValidBarChartRangeBandConfig: dart.legacy(core.bool),
      viewportScalingFactor: dart.legacy(core.double),
      viewportTranslatePx: dart.legacy(core.double),
      layoutConfig: dart.legacy(layout_view.LayoutViewConfig),
      [_layoutPosition]: dart.legacy(layout_view.LayoutPosition),
      isVertical: dart.legacy(core.bool),
      isSeriesRenderer: dart.legacy(core.bool),
      componentBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
      drawAxisLine: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(Axis, () => ({
      __proto__: dart.getSetters(Axis.__proto__),
      tickFormatter: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(Axis, I[41]);
    dart.setFieldSignature(Axis, () => ({
      __proto__: dart.getFields(Axis.__proto__),
      [_defaultScale]: dart.finalFieldType(dart.legacy(scale.MutableScale$(dart.legacy(D)))),
      scale: dart.fieldType(dart.legacy(scale.MutableScale$(dart.legacy(D)))),
      [_previousScale]: dart.fieldType(dart.legacy(scale.MutableScale$(dart.legacy(D)))),
      [_defaultTickProvider]: dart.finalFieldType(dart.legacy(tick_provider.TickProvider$(dart.legacy(D)))),
      tickProvider: dart.fieldType(dart.legacy(tick_provider.TickProvider$(dart.legacy(D)))),
      [_defaultTickFormatter]: dart.finalFieldType(dart.legacy(tick_formatter.TickFormatter$(dart.legacy(D)))),
      [_tickFormatter]: dart.fieldType(dart.legacy(tick_formatter.TickFormatter$(dart.legacy(D)))),
      [_formatterValueCache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(D), dart.legacy(core.String)))),
      tickDrawStrategy: dart.fieldType(dart.legacy(tick_draw_strategy.TickDrawStrategy$(dart.legacy(D)))),
      axisOrientation: dart.fieldType(dart.legacy(axis.AxisOrientation)),
      context: dart.fieldType(dart.legacy(chart_context.ChartContext)),
      reverseOutputRange: dart.fieldType(dart.legacy(core.bool)),
      autoViewport: dart.fieldType(dart.legacy(core.bool)),
      forceDrawAxisLine: dart.fieldType(dart.legacy(core.bool)),
      lockAxis: dart.fieldType(dart.legacy(core.bool)),
      [_providedTicks]: dart.fieldType(dart.legacy(core.List$(dart.legacy(tick.Tick)))),
      [_axisTicks]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(axis_tick.AxisTicks$(dart.legacy(D)))))),
      [_componentBounds]: dart.fieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int)))),
      [_drawAreaBounds$0]: dart.fieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int)))),
      layoutPaintOrder: dart.fieldType(dart.legacy(core.int)),
      graphicsFactory: dart.fieldType(dart.legacy(graphics_factory.GraphicsFactory))
    }));
    return Axis;
  });
  axis.Axis = axis.Axis$();
  dart.defineLazy(axis.Axis, {
    /*axis.Axis.primaryMeasureAxisId*/get primaryMeasureAxisId() {
      return "primaryMeasureAxisId";
    },
    /*axis.Axis.secondaryMeasureAxisId*/get secondaryMeasureAxisId() {
      return "secondaryMeasureAxisId";
    },
    /*axis.Axis._autoViewportDefault*/get _autoViewportDefault() {
      return true;
    }
  }, true);
  dart.addTypeTests(axis.Axis, _is_Axis_default);
  axis.NumericAxis = class NumericAxis extends axis.Axis$(dart.legacy(core.num)) {
    setScaleViewport(viewport) {
      this.autoViewport = false;
      T$.NumericScaleL().as(this.scale).viewportDomain = viewport;
    }
  };
  (axis.NumericAxis.new = function(opts) {
    let t4;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    axis.NumericAxis.__proto__.new.call(this, {tickProvider: (t4 = tickProvider, t4 == null ? new numeric_tick_provider.NumericTickProvider.new() : t4), tickFormatter: tick_formatter.NumericTickFormatter.new(), scale: new linear_scale.LinearScale.new()});
    ;
  }).prototype = axis.NumericAxis.prototype;
  dart.addTypeTests(axis.NumericAxis);
  dart.addTypeCaches(axis.NumericAxis);
  dart.setMethodSignature(axis.NumericAxis, () => ({
    __proto__: dart.getMethods(axis.NumericAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [dart.legacy(numeric_extents.NumericExtents)])
  }));
  dart.setLibraryUri(axis.NumericAxis, I[41]);
  axis.OrdinalAxis = class OrdinalAxis extends axis.Axis$(dart.legacy(core.String)) {
    setScaleViewport(viewport) {
      this.autoViewport = false;
      T$.OrdinalScaleL().as(this.scale).setViewport(viewport.dataSize, viewport.startingDomain);
    }
    layout(componentBounds, drawAreaBounds) {
      super.layout(componentBounds, drawAreaBounds);
      T$.OrdinalScaleL().as(this.scale).setViewport(null, null);
    }
  };
  (axis.OrdinalAxis.new = function(opts) {
    let t4, t4$;
    let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
    axis.OrdinalAxis.__proto__.new.call(this, {tickProvider: T$.TickProviderLOfStringL().as((t4 = tickProvider, t4 == null ? C[73] || CT.C73 : t4)), tickFormatter: T$.TickFormatterLOfStringL().as((t4$ = tickFormatter, t4$ == null ? C[74] || CT.C74 : t4$)), scale: new simple_ordinal_scale.SimpleOrdinalScale.new()});
    ;
  }).prototype = axis.OrdinalAxis.prototype;
  dart.addTypeTests(axis.OrdinalAxis);
  dart.addTypeCaches(axis.OrdinalAxis);
  dart.setMethodSignature(axis.OrdinalAxis, () => ({
    __proto__: dart.getMethods(axis.OrdinalAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [dart.legacy(axis.OrdinalViewport)])
  }));
  dart.setLibraryUri(axis.OrdinalAxis, I[41]);
  var startingDomain$ = dart.privateName(axis, "OrdinalViewport.startingDomain");
  var dataSize$ = dart.privateName(axis, "OrdinalViewport.dataSize");
  axis.OrdinalViewport = class OrdinalViewport extends core.Object {
    get startingDomain() {
      return this[startingDomain$];
    }
    set startingDomain(value) {
      super.startingDomain = value;
    }
    get dataSize() {
      return this[dataSize$];
    }
    set dataSize(value) {
      super.dataSize = value;
    }
    _equals(other) {
      if (other == null) return false;
      return T$.OrdinalViewportL().is(other) && this.startingDomain == other.startingDomain && this.dataSize == other.dataSize;
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.startingDomain);
      hashcode = hashcode * 37 + dart.notNull(this.dataSize);
      return hashcode;
    }
  };
  (axis.OrdinalViewport.new = function(startingDomain, dataSize) {
    this[startingDomain$] = startingDomain;
    this[dataSize$] = dataSize;
    ;
  }).prototype = axis.OrdinalViewport.prototype;
  dart.addTypeTests(axis.OrdinalViewport);
  dart.addTypeCaches(axis.OrdinalViewport);
  dart.setMethodSignature(axis.OrdinalViewport, () => ({
    __proto__: dart.getMethods(axis.OrdinalViewport.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(axis.OrdinalViewport, () => ({
    __proto__: dart.getGetters(axis.OrdinalViewport.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(axis.OrdinalViewport, I[41]);
  dart.setFieldSignature(axis.OrdinalViewport, () => ({
    __proto__: dart.getFields(axis.OrdinalViewport.__proto__),
    startingDomain: dart.finalFieldType(dart.legacy(core.String)),
    dataSize: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(axis.OrdinalViewport, ['_equals']);
  dart.defineExtensionAccessors(axis.OrdinalViewport, ['hashCode']);
  var _axis$ = dart.privateName(axis, "_axis");
  const _is_AxisTester_default = Symbol('_is_AxisTester_default');
  axis.AxisTester$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var AxisTicksOfDL = () => (AxisTicksOfDL = dart.constFn(axis_tick.AxisTicks$(DL())))();
    var AxisTicksLOfDL = () => (AxisTicksLOfDL = dart.constFn(dart.legacy(AxisTicksOfDL())))();
    var AxisTicksLOfDLToDL = () => (AxisTicksLOfDLToDL = dart.constFn(dart.fnType(DL(), [AxisTicksLOfDL()])))();
    class AxisTester extends core.Object {
      get axisTicks() {
        return this[_axis$][_axisTicks];
      }
      get scale() {
        return this[_axis$].scale;
      }
      get axisValues() {
        return this.axisTicks[$map](DL(), dart.fn(t => t.value, AxisTicksLOfDLToDL()))[$toList]();
      }
    }
    (AxisTester.new = function(_axis) {
      this[_axis$] = _axis;
      ;
    }).prototype = AxisTester.prototype;
    dart.addTypeTests(AxisTester);
    AxisTester.prototype[_is_AxisTester_default] = true;
    dart.addTypeCaches(AxisTester);
    dart.setGetterSignature(AxisTester, () => ({
      __proto__: dart.getGetters(AxisTester.__proto__),
      axisTicks: dart.legacy(core.List$(dart.legacy(axis_tick.AxisTicks$(dart.legacy(D))))),
      scale: dart.legacy(scale.MutableScale$(dart.legacy(D))),
      axisValues: dart.legacy(core.List$(dart.legacy(D)))
    }));
    dart.setLibraryUri(AxisTester, I[41]);
    dart.setFieldSignature(AxisTester, () => ({
      __proto__: dart.getFields(AxisTester.__proto__),
      [_axis$]: dart.finalFieldType(dart.legacy(axis.Axis$(dart.legacy(D))))
    }));
    return AxisTester;
  });
  axis.AxisTester = axis.AxisTester$();
  dart.addTypeTests(axis.AxisTester, _is_AxisTester_default);
  dart.defineLazy(axis, {
    /*axis.measureAxisIdKey*/get measureAxisIdKey() {
      return C[75] || CT.C75;
    },
    /*axis.measureAxisKey*/get measureAxisKey() {
      return C[76] || CT.C76;
    },
    /*axis.domainAxisKey*/get domainAxisKey() {
      return C[77] || CT.C77;
    }
  }, true);
  dart.trackLibraries("packages/charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart", {
    "package:charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart": simple_ordinal_scale,
    "package:charts_common/src/chart/cartesian/axis/ordinal_tick_provider.dart": ordinal_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/ordinal_extents.dart": ordinal_extents,
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart": ordinal_scale_domain_info,
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale.dart": ordinal_scale,
    "package:charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart": numeric_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_viewport.dart": linear_scale_viewport,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_function.dart": linear_scale_function,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_domain_info.dart": linear_scale_domain_info,
    "package:charts_common/src/chart/cartesian/axis/numeric_scale.dart": numeric_scale,
    "package:charts_common/src/chart/cartesian/axis/numeric_extents.dart": numeric_extents,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale.dart": linear_scale,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart": base_tick_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart": small_tick_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/tick_provider.dart": tick_provider,
    "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart": tick_formatter,
    "package:charts_common/src/chart/common/series_renderer.dart": series_renderer,
    "package:charts_common/src/chart/common/series_datum.dart": series_datum,
    "package:charts_common/src/chart/common/selection_model/selection_model.dart": selection_model,
    "package:charts_common/src/chart/common/processed_series.dart": processed_series,
    "package:charts_common/src/common/symbol_renderer.dart": symbol_renderer,
    "package:charts_common/src/chart/common/datum_details.dart": datum_details,
    "package:charts_common/src/chart/layout/layout_margin_strategy.dart": layout_margin_strategy,
    "package:charts_common/src/chart/layout/layout_manager_impl.dart": layout_manager_impl,
    "package:charts_common/src/chart/layout/layout_manager.dart": layout_manager,
    "package:charts_common/src/chart/common/base_chart.dart": base_chart,
    "package:charts_common/src/chart/common/behavior/chart_behavior.dart": chart_behavior,
    "package:charts_common/src/chart/layout/layout_view.dart": layout_view,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart": tick_draw_strategy,
    "package:charts_common/src/common/style/style.dart": style,
    "package:charts_common/src/common/style/material_style.dart": material_style,
    "package:charts_common/src/common/style/style_factory.dart": style_factory,
    "package:charts_common/src/chart/cartesian/axis/scale.dart": scale,
    "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart": axis_spec,
    "package:charts_common/src/data/series.dart": series$,
    "package:charts_common/src/chart/cartesian/axis/axis.dart": axis
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["simple_ordinal_scale.dart","tick_provider.dart","ordinal_tick_provider.dart","scale.dart","ordinal_extents.dart","ordinal_scale_domain_info.dart","ordinal_scale.dart","numeric_tick_provider.dart","linear/linear_scale_viewport.dart","linear/linear_scale_function.dart","linear/linear_scale_domain_info.dart","numeric_scale.dart","numeric_extents.dart","linear/linear_scale.dart","draw_strategy/base_tick_draw_strategy.dart","draw_strategy/small_tick_draw_strategy.dart","tick_formatter.dart","../../layout/layout_view.dart","../../common/series_renderer.dart","../../common/series_datum.dart","../../common/selection_model/selection_model.dart","../../common/processed_series.dart","../../../common/symbol_renderer.dart","../../common/datum_details.dart","../../layout/layout_margin_strategy.dart","../../layout/layout_manager_impl.dart","../../layout/layout_manager.dart","../../common/base_chart.dart","../../common/behavior/chart_behavior.dart","draw_strategy/tick_draw_strategy.dart","../../../common/style/style.dart","../../../common/style/material_style.dart","../../../common/style/style_factory.dart","spec/axis_spec.dart","../../../data/series.dart","axis.dart"],"names":[],"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","file":"../../../../../../../../../../../../D:/packages/charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart.lib.js"}');
  // Exports:
  return {
    src__chart__cartesian__axis__simple_ordinal_scale: simple_ordinal_scale,
    src__chart__cartesian__axis__ordinal_tick_provider: ordinal_tick_provider,
    src__chart__cartesian__axis__ordinal_extents: ordinal_extents,
    src__chart__cartesian__axis__ordinal_scale_domain_info: ordinal_scale_domain_info,
    src__chart__cartesian__axis__ordinal_scale: ordinal_scale,
    src__chart__cartesian__axis__numeric_tick_provider: numeric_tick_provider,
    src__chart__cartesian__axis__linear__linear_scale_viewport: linear_scale_viewport,
    src__chart__cartesian__axis__linear__linear_scale_function: linear_scale_function,
    src__chart__cartesian__axis__linear__linear_scale_domain_info: linear_scale_domain_info,
    src__chart__cartesian__axis__numeric_scale: numeric_scale,
    src__chart__cartesian__axis__numeric_extents: numeric_extents,
    src__chart__cartesian__axis__linear__linear_scale: linear_scale,
    src__chart__cartesian__axis__draw_strategy__base_tick_draw_strategy: base_tick_draw_strategy,
    src__chart__cartesian__axis__draw_strategy__small_tick_draw_strategy: small_tick_draw_strategy,
    src__chart__cartesian__axis__tick_provider: tick_provider,
    src__chart__cartesian__axis__tick_formatter: tick_formatter,
    src__chart__common__series_renderer: series_renderer,
    src__chart__common__series_datum: series_datum,
    src__chart__common__selection_model__selection_model: selection_model,
    src__chart__common__processed_series: processed_series,
    src__common__symbol_renderer: symbol_renderer,
    src__chart__common__datum_details: datum_details,
    src__chart__layout__layout_margin_strategy: layout_margin_strategy,
    src__chart__layout__layout_manager_impl: layout_manager_impl,
    src__chart__layout__layout_manager: layout_manager,
    src__chart__common__base_chart: base_chart,
    src__chart__common__behavior__chart_behavior: chart_behavior,
    src__chart__layout__layout_view: layout_view,
    src__chart__cartesian__axis__draw_strategy__tick_draw_strategy: tick_draw_strategy,
    src__common__style__style: style,
    src__common__style__material_style: material_style,
    src__common__style__style_factory: style_factory,
    src__chart__cartesian__axis__scale: scale,
    src__chart__cartesian__axis__spec__axis_spec: axis_spec,
    src__data__series: series$,
    src__chart__cartesian__axis__axis: axis
  };
}));

//# sourceMappingURL=simple_ordinal_scale.dart.lib.js.map
