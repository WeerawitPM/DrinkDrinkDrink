define(['dart_sdk', 'packages/awesome_notifications/src/utils/assert_utils.dart', 'packages/awesome_notifications/src/enumerators/notification_source.dart', 'packages/awesome_notifications/src/enumerators/notification_life_cycle.dart', 'packages/awesome_notifications/src/enumerators/notification_privacy.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/awesome_notifications/src/utils/html_utils.dart', 'packages/awesome_notifications/src/models/model.dart', 'packages/awesome_notifications/src/models/notification_schedule.dart', 'packages/awesome_notifications/src/enumerators/notification_layout.dart', 'packages/awesome_notifications/src/enumerators/notification_importance.dart', 'packages/awesome_notifications/src/enumerators/group_sort.dart', 'packages/awesome_notifications/src/enumerators/group_alert_behaviour.dart', 'packages/awesome_notifications/src/enumerators/default_ringtone_type.dart', 'packages/awesome_notifications/src/utils/string_utils.dart', 'packages/awesome_notifications/src/enumerators/media_source.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/image_resolution.dart', 'packages/awesome_notifications/src/utils/media_abstract_utils.dart', 'packages/awesome_notifications/src/enumerators/action_button_type.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/awesome_notifications/src/utils/date_utils.dart'], (function load__packages__awesome_notifications__src__models__received_models__received_notification_dart(dart_sdk, packages__awesome_notifications__src__utils__assert_utils$46dart, packages__awesome_notifications__src__enumerators__notification_source$46dart, packages__awesome_notifications__src__enumerators__notification_life_cycle$46dart, packages__awesome_notifications__src__enumerators__notification_privacy$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__awesome_notifications__src__utils__html_utils$46dart, packages__awesome_notifications__src__models__model$46dart, packages__awesome_notifications__src__models__notification_schedule$46dart, packages__awesome_notifications__src__enumerators__notification_layout$46dart, packages__awesome_notifications__src__enumerators__notification_importance$46dart, packages__awesome_notifications__src__enumerators__group_sort$46dart, packages__awesome_notifications__src__enumerators__group_alert_behaviour$46dart, packages__awesome_notifications__src__enumerators__default_ringtone_type$46dart, packages__awesome_notifications__src__utils__string_utils$46dart, packages__awesome_notifications__src__enumerators__media_source$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__image_resolution$46dart, packages__awesome_notifications__src__utils__media_abstract_utils$46dart, packages__awesome_notifications__src__enumerators__action_button_type$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__services__system_channels$46dart, packages__awesome_notifications__src__utils__date_utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const async = dart_sdk.async;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const assert_utils = packages__awesome_notifications__src__utils__assert_utils$46dart.src__utils__assert_utils;
  const notification_source = packages__awesome_notifications__src__enumerators__notification_source$46dart.src__enumerators__notification_source;
  const notification_life_cycle = packages__awesome_notifications__src__enumerators__notification_life_cycle$46dart.src__enumerators__notification_life_cycle;
  const notification_privacy = packages__awesome_notifications__src__enumerators__notification_privacy$46dart.src__enumerators__notification_privacy;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const _network_image_web = packages__flutter__src__painting___network_image_web$46dart.src__painting___network_image_web;
  const html_utils = packages__awesome_notifications__src__utils__html_utils$46dart.src__utils__html_utils;
  const model = packages__awesome_notifications__src__models__model$46dart.src__models__model;
  const notification_schedule = packages__awesome_notifications__src__models__notification_schedule$46dart.src__models__notification_schedule;
  const notification_layout = packages__awesome_notifications__src__enumerators__notification_layout$46dart.src__enumerators__notification_layout;
  const notification_importance = packages__awesome_notifications__src__enumerators__notification_importance$46dart.src__enumerators__notification_importance;
  const group_sort = packages__awesome_notifications__src__enumerators__group_sort$46dart.src__enumerators__group_sort;
  const group_alert_behaviour = packages__awesome_notifications__src__enumerators__group_alert_behaviour$46dart.src__enumerators__group_alert_behaviour;
  const default_ringtone_type = packages__awesome_notifications__src__enumerators__default_ringtone_type$46dart.src__enumerators__default_ringtone_type;
  const string_utils = packages__awesome_notifications__src__utils__string_utils$46dart.src__utils__string_utils;
  const media_source = packages__awesome_notifications__src__enumerators__media_source$46dart.src__enumerators__media_source;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const image_resolution = packages__flutter__src__painting__image_resolution$46dart.src__painting__image_resolution;
  const media_abstract_utils = packages__awesome_notifications__src__utils__media_abstract_utils$46dart.src__utils__media_abstract_utils;
  const action_button_type = packages__awesome_notifications__src__enumerators__action_button_type$46dart.src__enumerators__action_button_type;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const date_utils = packages__awesome_notifications__src__utils__date_utils$46dart.src__utils__date_utils;
  var received_notification = Object.create(dart.library);
  var received_action = Object.create(dart.library);
  var push_notification = Object.create(dart.library);
  var basic_notification_content = Object.create(dart.library);
  var notification_content = Object.create(dart.library);
  var notification_channel = Object.create(dart.library);
  var resource_image_provider = Object.create(dart.library);
  var bitmap_utils = Object.create(dart.library);
  var notification_button = Object.create(dart.library);
  var awesome_notifications_core = Object.create(dart.library);
  var awesome_notifications = Object.create(dart.library);
  var $addAll = dartx.addAll;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $toString = dartx.toString;
  var $replaceAll = dartx.replaceAll;
  var $runtimeType = dartx.runtimeType;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    NotificationSourceL: () => (T.NotificationSourceL = dart.constFn(dart.legacy(notification_source.NotificationSource)))(),
    NotificationLifeCycleL: () => (T.NotificationLifeCycleL = dart.constFn(dart.legacy(notification_life_cycle.NotificationLifeCycle)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    NotificationPrivacyL: () => (T.NotificationPrivacyL = dart.constFn(dart.legacy(notification_privacy.NotificationPrivacy)))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    ImageProviderOfObjectL: () => (T.ImageProviderOfObjectL = dart.constFn(image_provider.ImageProvider$(T.ObjectL())))(),
    ImageProviderLOfObjectL: () => (T.ImageProviderLOfObjectL = dart.constFn(dart.legacy(T.ImageProviderOfObjectL())))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    LinkedHashMapOfStringL$dynamic: () => (T.LinkedHashMapOfStringL$dynamic = dart.constFn(collection.LinkedHashMap$(T.StringL(), dart.dynamic)))(),
    NotificationContentL: () => (T.NotificationContentL = dart.constFn(dart.legacy(notification_content.NotificationContent)))(),
    NotificationActionButtonL: () => (T.NotificationActionButtonL = dart.constFn(dart.legacy(notification_button.NotificationActionButton)))(),
    JSArrayOfNotificationActionButtonL: () => (T.JSArrayOfNotificationActionButtonL = dart.constFn(_interceptors.JSArray$(T.NotificationActionButtonL())))(),
    ListOfObjectL: () => (T.ListOfObjectL = dart.constFn(core.List$(T.ObjectL())))(),
    JSArrayOfMapLOfStringL$dynamic: () => (T.JSArrayOfMapLOfStringL$dynamic = dart.constFn(_interceptors.JSArray$(T.MapLOfStringL$dynamic())))(),
    NotificationLayoutL: () => (T.NotificationLayoutL = dart.constFn(dart.legacy(notification_layout.NotificationLayout)))(),
    NotificationImportanceL: () => (T.NotificationImportanceL = dart.constFn(dart.legacy(notification_importance.NotificationImportance)))(),
    Int64ListL: () => (T.Int64ListL = dart.constFn(dart.legacy(typed_data.Int64List)))(),
    ColorL: () => (T.ColorL = dart.constFn(dart.legacy(ui.Color)))(),
    GroupSortL: () => (T.GroupSortL = dart.constFn(dart.legacy(group_sort.GroupSort)))(),
    GroupAlertBehaviorL: () => (T.GroupAlertBehaviorL = dart.constFn(dart.legacy(group_alert_behaviour.GroupAlertBehavior)))(),
    DefaultRingtoneTypeL: () => (T.DefaultRingtoneTypeL = dart.constFn(dart.legacy(default_ringtone_type.DefaultRingtoneType)))(),
    ResourceImageL: () => (T.ResourceImageL = dart.constFn(dart.legacy(resource_image_provider.ResourceImage)))(),
    SynchronousFutureOfResourceImageL: () => (T.SynchronousFutureOfResourceImageL = dart.constFn(synchronous_future.SynchronousFuture$(T.ResourceImageL())))(),
    CodecL: () => (T.CodecL = dart.constFn(dart.legacy(ui.Codec)))(),
    ActionButtonTypeL: () => (T.ActionButtonTypeL = dart.constFn(dart.legacy(action_button_type.ActionButtonType)))(),
    StreamControllerOfStringL: () => (T.StreamControllerOfStringL = dart.constFn(async.StreamController$(T.StringL())))(),
    ReceivedNotificationL: () => (T.ReceivedNotificationL = dart.constFn(dart.legacy(received_notification.ReceivedNotification)))(),
    StreamControllerOfReceivedNotificationL: () => (T.StreamControllerOfReceivedNotificationL = dart.constFn(async.StreamController$(T.ReceivedNotificationL())))(),
    ReceivedActionL: () => (T.ReceivedActionL = dart.constFn(dart.legacy(received_action.ReceivedAction)))(),
    StreamControllerOfReceivedActionL: () => (T.StreamControllerOfReceivedActionL = dart.constFn(async.StreamController$(T.ReceivedActionL())))(),
    IdentityMapOfStringL$ObjectL: () => (T.IdentityMapOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ObjectL())))(),
    FutureOrOfboolL: () => (T.FutureOrOfboolL = dart.constFn(async.FutureOr$(T.boolL())))(),
    FutureOrLOfboolL: () => (T.FutureOrLOfboolL = dart.constFn(dart.legacy(T.FutureOrOfboolL())))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    FutureOrOfUint8ListL: () => (T.FutureOrOfUint8ListL = dart.constFn(async.FutureOr$(T.Uint8ListL())))(),
    FutureOrLOfUint8ListL: () => (T.FutureOrLOfUint8ListL = dart.constFn(dart.legacy(T.FutureOrOfUint8ListL())))(),
    PlatformExceptionL: () => (T.PlatformExceptionL = dart.constFn(dart.legacy(message_codec.PlatformException)))(),
    PushNotificationL: () => (T.PushNotificationL = dart.constFn(dart.legacy(push_notification.PushNotification)))(),
    JSArrayOfPushNotificationL: () => (T.JSArrayOfPushNotificationL = dart.constFn(_interceptors.JSArray$(T.PushNotificationL())))(),
    ListOfPushNotificationL: () => (T.ListOfPushNotificationL = dart.constFn(core.List$(T.PushNotificationL())))(),
    ListLOfPushNotificationL: () => (T.ListLOfPushNotificationL = dart.constFn(dart.legacy(T.ListOfPushNotificationL())))(),
    DateTimeL: () => (T.DateTimeL = dart.constFn(dart.legacy(core.DateTime)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: action_button_type.ActionButtonType.prototype,
        [_name]: "ActionButtonType.Default",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "awesome_notifications"
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/awesome_notifications-0.0.5+8/lib/src/models/basic_notification_content.dart",
    "package:awesome_notifications/src/models/basic_notification_content.dart",
    "package:awesome_notifications/src/models/received_models/received_notification.dart",
    "package:awesome_notifications/src/models/received_models/received_action.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/awesome_notifications-0.0.5+8/lib/src/models/received_models/push_notification.dart",
    "package:awesome_notifications/src/models/received_models/push_notification.dart",
    "package:awesome_notifications/src/models/notification_content.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/awesome_notifications-0.0.5+8/lib/src/models/notification_channel.dart",
    "package:awesome_notifications/src/models/notification_channel.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/awesome_notifications-0.0.5+8/lib/src/utils/resource_image_provider.dart",
    "package:awesome_notifications/src/utils/resource_image_provider.dart",
    "package:awesome_notifications/src/utils/bitmap_utils.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/awesome_notifications-0.0.5+8/lib/src/models/notification_button.dart",
    "package:awesome_notifications/src/models/notification_button.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/awesome_notifications-0.0.5+8/lib/src/awesome_notifications_core.dart",
    "package:awesome_notifications/src/awesome_notifications_core.dart"
  ];
  var displayedLifeCycle = dart.privateName(received_notification, "ReceivedNotification.displayedLifeCycle");
  var createdSource = dart.privateName(received_notification, "ReceivedNotification.createdSource");
  var createdLifeCycle = dart.privateName(received_notification, "ReceivedNotification.createdLifeCycle");
  var displayedDate = dart.privateName(received_notification, "ReceivedNotification.displayedDate");
  var createdDate = dart.privateName(received_notification, "ReceivedNotification.createdDate");
  var id$ = dart.privateName(basic_notification_content, "BaseNotificationContent.id");
  var channelKey$ = dart.privateName(basic_notification_content, "BaseNotificationContent.channelKey");
  var title$ = dart.privateName(basic_notification_content, "BaseNotificationContent.title");
  var body$ = dart.privateName(basic_notification_content, "BaseNotificationContent.body");
  var summary$ = dart.privateName(basic_notification_content, "BaseNotificationContent.summary");
  var showWhen$ = dart.privateName(basic_notification_content, "BaseNotificationContent.showWhen");
  var payload$ = dart.privateName(basic_notification_content, "BaseNotificationContent.payload");
  var icon$ = dart.privateName(basic_notification_content, "BaseNotificationContent.icon");
  var largeIcon$ = dart.privateName(basic_notification_content, "BaseNotificationContent.largeIcon");
  var bigPicture$ = dart.privateName(basic_notification_content, "BaseNotificationContent.bigPicture");
  var customSound$ = dart.privateName(basic_notification_content, "BaseNotificationContent.customSound");
  var autoCancel$ = dart.privateName(basic_notification_content, "BaseNotificationContent.autoCancel");
  var color$ = dart.privateName(basic_notification_content, "BaseNotificationContent.color");
  var backgroundColor$ = dart.privateName(basic_notification_content, "BaseNotificationContent.backgroundColor");
  var privacy = dart.privateName(basic_notification_content, "BaseNotificationContent.privacy");
  basic_notification_content.BaseNotificationContent = class BaseNotificationContent extends model.Model {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get channelKey() {
      return this[channelKey$];
    }
    set channelKey(value) {
      this[channelKey$] = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      this[title$] = value;
    }
    get body() {
      return this[body$];
    }
    set body(value) {
      this[body$] = value;
    }
    get summary() {
      return this[summary$];
    }
    set summary(value) {
      this[summary$] = value;
    }
    get showWhen() {
      return this[showWhen$];
    }
    set showWhen(value) {
      this[showWhen$] = value;
    }
    get payload() {
      return this[payload$];
    }
    set payload(value) {
      this[payload$] = value;
    }
    get icon() {
      return this[icon$];
    }
    set icon(value) {
      this[icon$] = value;
    }
    get largeIcon() {
      return this[largeIcon$];
    }
    set largeIcon(value) {
      this[largeIcon$] = value;
    }
    get bigPicture() {
      return this[bigPicture$];
    }
    set bigPicture(value) {
      this[bigPicture$] = value;
    }
    get customSound() {
      return this[customSound$];
    }
    set customSound(value) {
      this[customSound$] = value;
    }
    get autoCancel() {
      return this[autoCancel$];
    }
    set autoCancel(value) {
      this[autoCancel$] = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      this[color$] = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      this[backgroundColor$] = value;
    }
    get privacy() {
      return this[privacy];
    }
    set privacy(value) {
      this[privacy] = value;
    }
    fromMap(mapData) {
      this.id = T.intL().as(assert_utils.AssertUtils.extractValue(T.intL(), mapData, "id"));
      this.channelKey = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "channelKey"));
      this.title = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "title"));
      this.body = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "body"));
      this.summary = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "summary"));
      this.showWhen = T.boolL().as(assert_utils.AssertUtils.extractValue(T.boolL(), mapData, "showWhen"));
      this.payload = T.MapLOfStringL$dynamic().as(assert_utils.AssertUtils.extractMap(T.StringL(), dart.dynamic, mapData, "payload"));
      this.icon = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "icon"));
      this.largeIcon = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "largeIcon"));
      this.bigPicture = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "bigPicture"));
      this.customSound = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "customSound"));
      this.autoCancel = T.boolL().as(assert_utils.AssertUtils.extractValue(T.boolL(), mapData, "autoCancel"));
      this.privacy = T.NotificationPrivacyL().as(assert_utils.AssertUtils.extractEnum(T.NotificationPrivacyL(), mapData, "privacy", notification_privacy.NotificationPrivacy.values));
      let colorValue = T.intL().as(assert_utils.AssertUtils.extractValue(T.intL(), mapData, "color"));
      this.color = colorValue == null ? null : new ui.Color.new(colorValue);
      let backgroundColorValue = T.intL().as(assert_utils.AssertUtils.extractValue(T.intL(), mapData, "backgroundColor"));
      this.backgroundColor = backgroundColorValue == null ? null : new ui.Color.new(backgroundColorValue);
      return this;
    }
    toMap() {
      let t0, t0$;
      return new (T.IdentityMapOfStringL$dynamic()).from(["id", this.id, "channelKey", this.channelKey, "title", this.title, "body", this.body, "summary", this.summary, "showWhen", this.showWhen, "icon", this.icon, "payload", this.payload, "largeIcon", this.largeIcon, "bigPicture", this.bigPicture, "customSound", this.customSound, "autoCancel", this.autoCancel, "privacy", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationPrivacyL(), this.privacy), "color", (t0 = this.color, t0 == null ? null : t0.value), "backgroundColor", (t0$ = this.backgroundColor, t0$ == null ? null : t0$.value)]);
    }
    get bigPictureImage() {
      return T.ImageProviderLOfObjectL().as(bitmap_utils.BitmapUtils.new().getFromMediaPath(this.bigPicture));
    }
    get largeIconImage() {
      return T.ImageProviderLOfObjectL().as(bitmap_utils.BitmapUtils.new().getFromMediaPath(this.largeIcon));
    }
    get titleWithoutHtml() {
      return html_utils.HtmlUtils.removeAllHtmlTags(this.title);
    }
    get bodyWithoutHtml() {
      return html_utils.HtmlUtils.removeAllHtmlTags(this.body);
    }
    validate() {
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.id, dart.wrapType(core.int)))) dart.assertFailed(null, I[0], 105, 12, "!AssertUtils.isNullOrEmptyOrInvalid(id, int)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.channelKey, dart.wrapType(core.String)))) dart.assertFailed(null, I[0], 106, 12, "!AssertUtils.isNullOrEmptyOrInvalid(channelKey, String)");
    }
  };
  (basic_notification_content.BaseNotificationContent.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let channelKey = opts && 'channelKey' in opts ? opts.channelKey : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let summary = opts && 'summary' in opts ? opts.summary : null;
    let showWhen = opts && 'showWhen' in opts ? opts.showWhen : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let largeIcon = opts && 'largeIcon' in opts ? opts.largeIcon : null;
    let bigPicture = opts && 'bigPicture' in opts ? opts.bigPicture : null;
    let autoCancel = opts && 'autoCancel' in opts ? opts.autoCancel : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let payload = opts && 'payload' in opts ? opts.payload : null;
    let customSound = opts && 'customSound' in opts ? opts.customSound : null;
    this[privacy] = null;
    this[id$] = id;
    this[channelKey$] = channelKey;
    this[title$] = title;
    this[body$] = body;
    this[summary$] = summary;
    this[showWhen$] = showWhen;
    this[icon$] = icon;
    this[largeIcon$] = largeIcon;
    this[bigPicture$] = bigPicture;
    this[autoCancel$] = autoCancel;
    this[color$] = color;
    this[backgroundColor$] = backgroundColor;
    this[payload$] = payload;
    this[customSound$] = customSound;
    ;
  }).prototype = basic_notification_content.BaseNotificationContent.prototype;
  dart.addTypeTests(basic_notification_content.BaseNotificationContent);
  dart.addTypeCaches(basic_notification_content.BaseNotificationContent);
  dart.setMethodSignature(basic_notification_content.BaseNotificationContent, () => ({
    __proto__: dart.getMethods(basic_notification_content.BaseNotificationContent.__proto__),
    fromMap: dart.fnType(dart.legacy(model.Model), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    validate: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(basic_notification_content.BaseNotificationContent, () => ({
    __proto__: dart.getGetters(basic_notification_content.BaseNotificationContent.__proto__),
    bigPictureImage: dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))),
    largeIconImage: dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))),
    titleWithoutHtml: dart.legacy(core.String),
    bodyWithoutHtml: dart.legacy(core.String)
  }));
  dart.setLibraryUri(basic_notification_content.BaseNotificationContent, I[1]);
  dart.setFieldSignature(basic_notification_content.BaseNotificationContent, () => ({
    __proto__: dart.getFields(basic_notification_content.BaseNotificationContent.__proto__),
    id: dart.fieldType(dart.legacy(core.int)),
    channelKey: dart.fieldType(dart.legacy(core.String)),
    title: dart.fieldType(dart.legacy(core.String)),
    body: dart.fieldType(dart.legacy(core.String)),
    summary: dart.fieldType(dart.legacy(core.String)),
    showWhen: dart.fieldType(dart.legacy(core.bool)),
    payload: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    icon: dart.fieldType(dart.legacy(core.String)),
    largeIcon: dart.fieldType(dart.legacy(core.String)),
    bigPicture: dart.fieldType(dart.legacy(core.String)),
    customSound: dart.fieldType(dart.legacy(core.String)),
    autoCancel: dart.fieldType(dart.legacy(core.bool)),
    color: dart.fieldType(dart.legacy(ui.Color)),
    backgroundColor: dart.fieldType(dart.legacy(ui.Color)),
    privacy: dart.fieldType(dart.legacy(notification_privacy.NotificationPrivacy))
  }));
  received_notification.ReceivedNotification = class ReceivedNotification extends basic_notification_content.BaseNotificationContent {
    get displayedLifeCycle() {
      return this[displayedLifeCycle];
    }
    set displayedLifeCycle(value) {
      this[displayedLifeCycle] = value;
    }
    get createdSource() {
      return this[createdSource];
    }
    set createdSource(value) {
      this[createdSource] = value;
    }
    get createdLifeCycle() {
      return this[createdLifeCycle];
    }
    set createdLifeCycle(value) {
      this[createdLifeCycle] = value;
    }
    get displayedDate() {
      return this[displayedDate];
    }
    set displayedDate(value) {
      this[displayedDate] = value;
    }
    get createdDate() {
      return this[createdDate];
    }
    set createdDate(value) {
      this[createdDate] = value;
    }
    fromMap(dataMap) {
      super.fromMap(dataMap);
      this.createdSource = T.NotificationSourceL().as(assert_utils.AssertUtils.extractEnum(T.NotificationSourceL(), dataMap, "createdSource", notification_source.NotificationSource.values));
      this.createdLifeCycle = T.NotificationLifeCycleL().as(assert_utils.AssertUtils.extractEnum(T.NotificationLifeCycleL(), dataMap, "createdLifeCycle", notification_life_cycle.NotificationLifeCycle.values));
      this.displayedLifeCycle = T.NotificationLifeCycleL().as(assert_utils.AssertUtils.extractEnum(T.NotificationLifeCycleL(), dataMap, "displayedLifeCycle", notification_life_cycle.NotificationLifeCycle.values));
      this.displayedDate = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), dataMap, "displayedDate"));
      this.createdDate = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), dataMap, "createdDate"));
      return this;
    }
    toMap() {
      let t0;
      let map = super.toMap();
      t0 = map;
      return (() => {
        t0[$addAll](new (T.IdentityMapOfStringL$dynamic()).from(["createdSource", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationSourceL(), this.createdSource), "createdLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleL(), this.createdLifeCycle), "displayedLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleL(), this.displayedLifeCycle), "createdDate", this.createdDate, "displayedDate", this.displayedDate]));
        return t0;
      })();
    }
  };
  (received_notification.ReceivedNotification.new = function() {
    this[displayedLifeCycle] = null;
    this[createdSource] = null;
    this[createdLifeCycle] = null;
    this[displayedDate] = null;
    this[createdDate] = null;
    received_notification.ReceivedNotification.__proto__.new.call(this);
    ;
  }).prototype = received_notification.ReceivedNotification.prototype;
  dart.addTypeTests(received_notification.ReceivedNotification);
  dart.addTypeCaches(received_notification.ReceivedNotification);
  dart.setMethodSignature(received_notification.ReceivedNotification, () => ({
    __proto__: dart.getMethods(received_notification.ReceivedNotification.__proto__),
    fromMap: dart.fnType(dart.legacy(received_notification.ReceivedNotification), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))])
  }));
  dart.setLibraryUri(received_notification.ReceivedNotification, I[2]);
  dart.setFieldSignature(received_notification.ReceivedNotification, () => ({
    __proto__: dart.getFields(received_notification.ReceivedNotification.__proto__),
    displayedLifeCycle: dart.fieldType(dart.legacy(notification_life_cycle.NotificationLifeCycle)),
    createdSource: dart.fieldType(dart.legacy(notification_source.NotificationSource)),
    createdLifeCycle: dart.fieldType(dart.legacy(notification_life_cycle.NotificationLifeCycle)),
    displayedDate: dart.fieldType(dart.legacy(core.String)),
    createdDate: dart.fieldType(dart.legacy(core.String))
  }));
  var actionLifeCycle = dart.privateName(received_action, "ReceivedAction.actionLifeCycle");
  var dismissedLifeCycle = dart.privateName(received_action, "ReceivedAction.dismissedLifeCycle");
  var buttonKeyPressed = dart.privateName(received_action, "ReceivedAction.buttonKeyPressed");
  var buttonKeyInput = dart.privateName(received_action, "ReceivedAction.buttonKeyInput");
  var actionDate = dart.privateName(received_action, "ReceivedAction.actionDate");
  var dismissedDate = dart.privateName(received_action, "ReceivedAction.dismissedDate");
  received_action.ReceivedAction = class ReceivedAction extends received_notification.ReceivedNotification {
    get actionLifeCycle() {
      return this[actionLifeCycle];
    }
    set actionLifeCycle(value) {
      this[actionLifeCycle] = value;
    }
    get dismissedLifeCycle() {
      return this[dismissedLifeCycle];
    }
    set dismissedLifeCycle(value) {
      this[dismissedLifeCycle] = value;
    }
    get buttonKeyPressed() {
      return this[buttonKeyPressed];
    }
    set buttonKeyPressed(value) {
      this[buttonKeyPressed] = value;
    }
    get buttonKeyInput() {
      return this[buttonKeyInput];
    }
    set buttonKeyInput(value) {
      this[buttonKeyInput] = value;
    }
    get actionDate() {
      return this[actionDate];
    }
    set actionDate(value) {
      this[actionDate] = value;
    }
    get dismissedDate() {
      return this[dismissedDate];
    }
    set dismissedDate(value) {
      this[dismissedDate] = value;
    }
    fromMap(dataMap) {
      super.fromMap(dataMap);
      this.actionLifeCycle = T.NotificationLifeCycleL().as(assert_utils.AssertUtils.extractEnum(T.NotificationLifeCycleL(), dataMap, "actionLifeCycle", notification_life_cycle.NotificationLifeCycle.values));
      this.dismissedLifeCycle = T.NotificationLifeCycleL().as(assert_utils.AssertUtils.extractEnum(T.NotificationLifeCycleL(), dataMap, "dismissedLifeCycle", notification_life_cycle.NotificationLifeCycle.values));
      this.actionDate = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), dataMap, "actionDate"));
      this.dismissedDate = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), dataMap, "dismissedDate"));
      this.buttonKeyPressed = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), dataMap, "actionKey"));
      this.buttonKeyInput = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), dataMap, "actionInput"));
      return this;
    }
    toMap() {
      let t0;
      let map = super.toMap();
      t0 = map;
      return (() => {
        t0[$addAll](new (T.IdentityMapOfStringL$dynamic()).from(["actionDate", this.actionDate, "dismissedDate", this.dismissedDate, "actionLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleL(), this.actionLifeCycle), "dismissedLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleL(), this.dismissedLifeCycle), "buttonKeyPressed", this.buttonKeyPressed, "buttonKeyInput", this.buttonKeyInput]));
        return t0;
      })();
    }
  };
  (received_action.ReceivedAction.new = function() {
    this[actionLifeCycle] = null;
    this[dismissedLifeCycle] = null;
    this[buttonKeyPressed] = "";
    this[buttonKeyInput] = "";
    this[actionDate] = null;
    this[dismissedDate] = null;
    received_action.ReceivedAction.__proto__.new.call(this);
    ;
  }).prototype = received_action.ReceivedAction.prototype;
  dart.addTypeTests(received_action.ReceivedAction);
  dart.addTypeCaches(received_action.ReceivedAction);
  dart.setLibraryUri(received_action.ReceivedAction, I[3]);
  dart.setFieldSignature(received_action.ReceivedAction, () => ({
    __proto__: dart.getFields(received_action.ReceivedAction.__proto__),
    actionLifeCycle: dart.fieldType(dart.legacy(notification_life_cycle.NotificationLifeCycle)),
    dismissedLifeCycle: dart.fieldType(dart.legacy(notification_life_cycle.NotificationLifeCycle)),
    buttonKeyPressed: dart.fieldType(dart.legacy(core.String)),
    buttonKeyInput: dart.fieldType(dart.legacy(core.String)),
    actionDate: dart.fieldType(dart.legacy(core.String)),
    dismissedDate: dart.fieldType(dart.legacy(core.String))
  }));
  var content$ = dart.privateName(push_notification, "PushNotification.content");
  var schedule$ = dart.privateName(push_notification, "PushNotification.schedule");
  var actionButtons$ = dart.privateName(push_notification, "PushNotification.actionButtons");
  push_notification.PushNotification = class PushNotification extends model.Model {
    get content() {
      return this[content$];
    }
    set content(value) {
      this[content$] = value;
    }
    get schedule() {
      return this[schedule$];
    }
    set schedule(value) {
      this[schedule$] = value;
    }
    get actionButtons() {
      return this[actionButtons$];
    }
    set actionButtons(value) {
      this[actionButtons$] = value;
    }
    fromMap(mapData) {
      try {
        if (!(dart.test(mapData[$containsKey]("content")) && T.MapL().is(mapData[$_get]("content")))) dart.assertFailed(null, I[4], 18, 14, "mapData.containsKey('content') && mapData['content'] is Map");
        let contentData = T.LinkedHashMapOfStringL$dynamic().from(core.Map.as(mapData[$_get]("content")));
        this.content = T.NotificationContentL().as(new notification_content.NotificationContent.new().fromMap(contentData));
        this.content.validate();
        if (dart.test(mapData[$containsKey]("schedule"))) {
          let scheduleData = T.LinkedHashMapOfStringL$dynamic().from(core.Map.as(mapData[$_get]("schedule")));
          this.schedule = new notification_schedule.NotificationSchedule.new().fromMap(scheduleData);
          this.schedule.validate();
        }
        if (dart.test(mapData[$containsKey]("actionButtons"))) {
          this.actionButtons = T.JSArrayOfNotificationActionButtonL().of([]);
          let actionButtonsData = T.ListOfObjectL().from(core.Iterable.as(mapData[$_get]("actionButtons")));
          for (let buttonData of actionButtonsData) {
            let actionButtonData = T.LinkedHashMapOfStringL$dynamic().from(core.Map.as(buttonData));
            let button = T.NotificationActionButtonL().as(new notification_button.NotificationActionButton.new().fromMap(actionButtonData));
            button.validate();
            this.actionButtons[$add](button);
          }
          if (!dart.test(this.actionButtons[$isNotEmpty])) dart.assertFailed(null, I[4], 49, 16, "actionButtons.isNotEmpty");
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
      return this;
    }
    toMap() {
      let t1, t1$, t1$0, t1$1;
      let actionButtonsData = T.JSArrayOfMapLOfStringL$dynamic().of([]);
      if (this.actionButtons != null) {
        for (let button of this.actionButtons) {
          let data = button.toMap();
          if (data != null && dart.test(data[$isNotEmpty])) actionButtonsData[$add](data);
        }
      }
      return new (T.IdentityMapOfStringL$dynamic()).from(["content", (t1$ = (t1 = this.content, t1 == null ? null : t1.toMap()), t1$ == null ? new _js_helper.LinkedMap.new() : t1$), "schedule", (t1$1 = (t1$0 = this.schedule, t1$0 == null ? null : t1$0.toMap()), t1$1 == null ? new _js_helper.LinkedMap.new() : t1$1), "actionButtons", dart.test(actionButtonsData[$isEmpty]) ? null : actionButtonsData]);
    }
    validate() {
      if (!(this.content != null)) dart.assertFailed(null, I[4], 78, 12, "content != null");
    }
  };
  (push_notification.PushNotification.new = function(opts) {
    let content = opts && 'content' in opts ? opts.content : null;
    let schedule = opts && 'schedule' in opts ? opts.schedule : null;
    let actionButtons = opts && 'actionButtons' in opts ? opts.actionButtons : null;
    this[content$] = content;
    this[schedule$] = schedule;
    this[actionButtons$] = actionButtons;
    ;
  }).prototype = push_notification.PushNotification.prototype;
  dart.addTypeTests(push_notification.PushNotification);
  dart.addTypeCaches(push_notification.PushNotification);
  dart.setMethodSignature(push_notification.PushNotification, () => ({
    __proto__: dart.getMethods(push_notification.PushNotification.__proto__),
    fromMap: dart.fnType(dart.legacy(push_notification.PushNotification), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    validate: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(push_notification.PushNotification, I[5]);
  dart.setFieldSignature(push_notification.PushNotification, () => ({
    __proto__: dart.getFields(push_notification.PushNotification.__proto__),
    content: dart.fieldType(dart.legacy(notification_content.NotificationContent)),
    schedule: dart.fieldType(dart.legacy(notification_schedule.NotificationSchedule)),
    actionButtons: dart.fieldType(dart.legacy(core.List$(dart.legacy(notification_button.NotificationActionButton))))
  }));
  var hideLargeIconOnExpand$ = dart.privateName(notification_content, "NotificationContent.hideLargeIconOnExpand");
  var progress$ = dart.privateName(notification_content, "NotificationContent.progress");
  var ticker$ = dart.privateName(notification_content, "NotificationContent.ticker");
  var displayedLifeCycle$ = dart.privateName(notification_content, "NotificationContent.displayedLifeCycle");
  var createdSource$ = dart.privateName(notification_content, "NotificationContent.createdSource");
  var createdLifeCycle$ = dart.privateName(notification_content, "NotificationContent.createdLifeCycle");
  var notificationLayout$ = dart.privateName(notification_content, "NotificationContent.notificationLayout");
  var displayOnForeground$ = dart.privateName(notification_content, "NotificationContent.displayOnForeground");
  var displayOnBackground$ = dart.privateName(notification_content, "NotificationContent.displayOnBackground");
  var createdDate$ = dart.privateName(notification_content, "NotificationContent.createdDate");
  var displayedDate$ = dart.privateName(notification_content, "NotificationContent.displayedDate");
  var locked$ = dart.privateName(notification_content, "NotificationContent.locked");
  notification_content.NotificationContent = class NotificationContent extends basic_notification_content.BaseNotificationContent {
    get hideLargeIconOnExpand() {
      return this[hideLargeIconOnExpand$];
    }
    set hideLargeIconOnExpand(value) {
      this[hideLargeIconOnExpand$] = value;
    }
    get progress() {
      return this[progress$];
    }
    set progress(value) {
      this[progress$] = value;
    }
    get ticker() {
      return this[ticker$];
    }
    set ticker(value) {
      this[ticker$] = value;
    }
    get displayedLifeCycle() {
      return this[displayedLifeCycle$];
    }
    set displayedLifeCycle(value) {
      this[displayedLifeCycle$] = value;
    }
    get createdSource() {
      return this[createdSource$];
    }
    set createdSource(value) {
      this[createdSource$] = value;
    }
    get createdLifeCycle() {
      return this[createdLifeCycle$];
    }
    set createdLifeCycle(value) {
      this[createdLifeCycle$] = value;
    }
    get notificationLayout() {
      return this[notificationLayout$];
    }
    set notificationLayout(value) {
      this[notificationLayout$] = value;
    }
    get displayOnForeground() {
      return this[displayOnForeground$];
    }
    set displayOnForeground(value) {
      this[displayOnForeground$] = value;
    }
    get displayOnBackground() {
      return this[displayOnBackground$];
    }
    set displayOnBackground(value) {
      this[displayOnBackground$] = value;
    }
    get createdDate() {
      return this[createdDate$];
    }
    set createdDate(value) {
      this[createdDate$] = value;
    }
    get displayedDate() {
      return this[displayedDate$];
    }
    set displayedDate(value) {
      this[displayedDate$] = value;
    }
    get locked() {
      return this[locked$];
    }
    set locked(value) {
      this[locked$] = value;
    }
    fromMap(mapData) {
      super.fromMap(mapData);
      this.hideLargeIconOnExpand = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, mapData, "hideLargeIconOnExpand"));
      this.progress = T.intL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, mapData, "progress"));
      this.ticker = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, mapData, "ticker"));
      this.locked = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, mapData, "locked"));
      this.notificationLayout = T.NotificationLayoutL().as(assert_utils.AssertUtils.extractEnum(T.NotificationLayoutL(), mapData, "notificationLayout", notification_layout.NotificationLayout.values));
      this.displayedLifeCycle = T.NotificationLifeCycleL().as(assert_utils.AssertUtils.extractEnum(T.NotificationLifeCycleL(), mapData, "displayedLifeCycle", notification_life_cycle.NotificationLifeCycle.values));
      this.createdSource = T.NotificationSourceL().as(assert_utils.AssertUtils.extractEnum(T.NotificationSourceL(), mapData, "createdSource", notification_source.NotificationSource.values));
      this.createdLifeCycle = T.NotificationLifeCycleL().as(assert_utils.AssertUtils.extractEnum(T.NotificationLifeCycleL(), mapData, "createdLifeCycle", notification_life_cycle.NotificationLifeCycle.values));
      this.createdDate = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "createdDate"));
      this.displayOnForeground = T.boolL().as(assert_utils.AssertUtils.extractValue(T.boolL(), mapData, "displayOnForeground"));
      this.displayOnBackground = T.boolL().as(assert_utils.AssertUtils.extractValue(T.boolL(), mapData, "displayOnBackground"));
      this.displayedDate = T.StringL().as(assert_utils.AssertUtils.extractValue(T.StringL(), mapData, "displayedDate"));
      return this;
    }
    toMap() {
      let t1;
      let dataMap = super.toMap();
      let actionButtonList = [];
      dataMap = (t1 = dataMap, (() => {
        t1[$addAll](new (T.IdentityMapOfStringL$dynamic()).from(["hideLargeIconOnExpand", this.hideLargeIconOnExpand, "progress", this.progress, "ticker", this.ticker, "locked", this.locked, "actionButtons", dart.notNull(actionButtonList[$length]) > 0 ? actionButtonList : null, "notificationLayout", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLayoutL(), this.notificationLayout), "createdSource", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationSourceL(), this.createdSource), "createdLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleL(), this.createdLifeCycle), "displayedLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleL(), this.displayedLifeCycle), "displayOnForeground", this.displayOnForeground, "displayOnBackground", this.displayOnBackground, "createdDate", this.createdDate, "displayedDate", this.displayedDate]));
        return t1;
      })());
      return dataMap;
    }
    toString() {
      return dart.toString(this.toMap())[$replaceAll](",", ",\n");
    }
  };
  (notification_content.NotificationContent.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let channelKey = opts && 'channelKey' in opts ? opts.channelKey : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let summary = opts && 'summary' in opts ? opts.summary : null;
    let showWhen = opts && 'showWhen' in opts ? opts.showWhen : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let largeIcon = opts && 'largeIcon' in opts ? opts.largeIcon : null;
    let bigPicture = opts && 'bigPicture' in opts ? opts.bigPicture : null;
    let customSound = opts && 'customSound' in opts ? opts.customSound : null;
    let autoCancel = opts && 'autoCancel' in opts ? opts.autoCancel : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let payload = opts && 'payload' in opts ? opts.payload : null;
    let notificationLayout = opts && 'notificationLayout' in opts ? opts.notificationLayout : null;
    let hideLargeIconOnExpand = opts && 'hideLargeIconOnExpand' in opts ? opts.hideLargeIconOnExpand : null;
    let locked = opts && 'locked' in opts ? opts.locked : null;
    let progress = opts && 'progress' in opts ? opts.progress : null;
    let ticker = opts && 'ticker' in opts ? opts.ticker : null;
    let createdSource = opts && 'createdSource' in opts ? opts.createdSource : null;
    let createdLifeCycle = opts && 'createdLifeCycle' in opts ? opts.createdLifeCycle : null;
    let displayedLifeCycle = opts && 'displayedLifeCycle' in opts ? opts.displayedLifeCycle : null;
    let createdDate = opts && 'createdDate' in opts ? opts.createdDate : null;
    let displayOnForeground = opts && 'displayOnForeground' in opts ? opts.displayOnForeground : null;
    let displayOnBackground = opts && 'displayOnBackground' in opts ? opts.displayOnBackground : null;
    let displayedDate = opts && 'displayedDate' in opts ? opts.displayedDate : null;
    this[notificationLayout$] = notificationLayout;
    this[hideLargeIconOnExpand$] = hideLargeIconOnExpand;
    this[locked$] = locked;
    this[progress$] = progress;
    this[ticker$] = ticker;
    this[createdSource$] = createdSource;
    this[createdLifeCycle$] = createdLifeCycle;
    this[displayedLifeCycle$] = displayedLifeCycle;
    this[createdDate$] = createdDate;
    this[displayOnForeground$] = displayOnForeground;
    this[displayOnBackground$] = displayOnBackground;
    this[displayedDate$] = displayedDate;
    notification_content.NotificationContent.__proto__.new.call(this, {id: id, channelKey: channelKey, title: title, body: body, summary: summary, showWhen: showWhen, payload: payload, icon: icon, largeIcon: largeIcon, bigPicture: bigPicture, customSound: customSound, autoCancel: autoCancel, color: color, backgroundColor: backgroundColor});
    ;
  }).prototype = notification_content.NotificationContent.prototype;
  dart.addTypeTests(notification_content.NotificationContent);
  dart.addTypeCaches(notification_content.NotificationContent);
  dart.setLibraryUri(notification_content.NotificationContent, I[6]);
  dart.setFieldSignature(notification_content.NotificationContent, () => ({
    __proto__: dart.getFields(notification_content.NotificationContent.__proto__),
    hideLargeIconOnExpand: dart.fieldType(dart.legacy(core.bool)),
    progress: dart.fieldType(dart.legacy(core.int)),
    ticker: dart.fieldType(dart.legacy(core.String)),
    displayedLifeCycle: dart.fieldType(dart.legacy(notification_life_cycle.NotificationLifeCycle)),
    createdSource: dart.fieldType(dart.legacy(notification_source.NotificationSource)),
    createdLifeCycle: dart.fieldType(dart.legacy(notification_life_cycle.NotificationLifeCycle)),
    notificationLayout: dart.fieldType(dart.legacy(notification_layout.NotificationLayout)),
    displayOnForeground: dart.fieldType(dart.legacy(core.bool)),
    displayOnBackground: dart.fieldType(dart.legacy(core.bool)),
    createdDate: dart.fieldType(dart.legacy(core.String)),
    displayedDate: dart.fieldType(dart.legacy(core.String)),
    locked: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(notification_content.NotificationContent, ['toString']);
  var channelKey$0 = dart.privateName(notification_channel, "NotificationChannel.channelKey");
  var channelName$ = dart.privateName(notification_channel, "NotificationChannel.channelName");
  var channelDescription$ = dart.privateName(notification_channel, "NotificationChannel.channelDescription");
  var channelShowBadge$ = dart.privateName(notification_channel, "NotificationChannel.channelShowBadge");
  var importance$ = dart.privateName(notification_channel, "NotificationChannel.importance");
  var playSound$ = dart.privateName(notification_channel, "NotificationChannel.playSound");
  var soundSource$ = dart.privateName(notification_channel, "NotificationChannel.soundSource");
  var defaultRingtoneType$ = dart.privateName(notification_channel, "NotificationChannel.defaultRingtoneType");
  var enableVibration$ = dart.privateName(notification_channel, "NotificationChannel.enableVibration");
  var vibrationPattern$ = dart.privateName(notification_channel, "NotificationChannel.vibrationPattern");
  var enableLights$ = dart.privateName(notification_channel, "NotificationChannel.enableLights");
  var ledColor$ = dart.privateName(notification_channel, "NotificationChannel.ledColor");
  var ledOnMs$ = dart.privateName(notification_channel, "NotificationChannel.ledOnMs");
  var ledOffMs$ = dart.privateName(notification_channel, "NotificationChannel.ledOffMs");
  var groupKey$ = dart.privateName(notification_channel, "NotificationChannel.groupKey");
  var groupSort$ = dart.privateName(notification_channel, "NotificationChannel.groupSort");
  var groupAlertBehavior$ = dart.privateName(notification_channel, "NotificationChannel.groupAlertBehavior");
  var defaultPrivacy$ = dart.privateName(notification_channel, "NotificationChannel.defaultPrivacy");
  var icon$0 = dart.privateName(notification_channel, "NotificationChannel.icon");
  var defaultColor$ = dart.privateName(notification_channel, "NotificationChannel.defaultColor");
  var locked$0 = dart.privateName(notification_channel, "NotificationChannel.locked");
  var onlyAlertOnce$ = dart.privateName(notification_channel, "NotificationChannel.onlyAlertOnce");
  notification_channel.NotificationChannel = class NotificationChannel extends model.Model {
    get channelKey() {
      return this[channelKey$0];
    }
    set channelKey(value) {
      this[channelKey$0] = value;
    }
    get channelName() {
      return this[channelName$];
    }
    set channelName(value) {
      this[channelName$] = value;
    }
    get channelDescription() {
      return this[channelDescription$];
    }
    set channelDescription(value) {
      this[channelDescription$] = value;
    }
    get channelShowBadge() {
      return this[channelShowBadge$];
    }
    set channelShowBadge(value) {
      this[channelShowBadge$] = value;
    }
    get importance() {
      return this[importance$];
    }
    set importance(value) {
      this[importance$] = value;
    }
    get playSound() {
      return this[playSound$];
    }
    set playSound(value) {
      this[playSound$] = value;
    }
    get soundSource() {
      return this[soundSource$];
    }
    set soundSource(value) {
      this[soundSource$] = value;
    }
    get defaultRingtoneType() {
      return this[defaultRingtoneType$];
    }
    set defaultRingtoneType(value) {
      this[defaultRingtoneType$] = value;
    }
    get enableVibration() {
      return this[enableVibration$];
    }
    set enableVibration(value) {
      this[enableVibration$] = value;
    }
    get vibrationPattern() {
      return this[vibrationPattern$];
    }
    set vibrationPattern(value) {
      this[vibrationPattern$] = value;
    }
    get enableLights() {
      return this[enableLights$];
    }
    set enableLights(value) {
      this[enableLights$] = value;
    }
    get ledColor() {
      return this[ledColor$];
    }
    set ledColor(value) {
      this[ledColor$] = value;
    }
    get ledOnMs() {
      return this[ledOnMs$];
    }
    set ledOnMs(value) {
      this[ledOnMs$] = value;
    }
    get ledOffMs() {
      return this[ledOffMs$];
    }
    set ledOffMs(value) {
      this[ledOffMs$] = value;
    }
    get groupKey() {
      return this[groupKey$];
    }
    set groupKey(value) {
      this[groupKey$] = value;
    }
    get groupSort() {
      return this[groupSort$];
    }
    set groupSort(value) {
      this[groupSort$] = value;
    }
    get groupAlertBehavior() {
      return this[groupAlertBehavior$];
    }
    set groupAlertBehavior(value) {
      this[groupAlertBehavior$] = value;
    }
    get defaultPrivacy() {
      return this[defaultPrivacy$];
    }
    set defaultPrivacy(value) {
      this[defaultPrivacy$] = value;
    }
    get icon() {
      return this[icon$0];
    }
    set icon(value) {
      this[icon$0] = value;
    }
    get defaultColor() {
      return this[defaultColor$];
    }
    set defaultColor(value) {
      this[defaultColor$] = value;
    }
    get locked() {
      return this[locked$0];
    }
    set locked(value) {
      this[locked$0] = value;
    }
    get onlyAlertOnce() {
      return this[onlyAlertOnce$];
    }
    set onlyAlertOnce(value) {
      this[onlyAlertOnce$] = value;
    }
    toMap() {
      let t1, t1$;
      return new (T.IdentityMapOfStringL$dynamic()).from(["icon", this.icon, "channelKey", this.channelKey, "channelName", this.channelName, "channelDescription", this.channelDescription, "channelShowBadge", this.channelShowBadge, "importance", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationImportanceL(), this.importance), "playSound", this.playSound, "soundSource", this.soundSource, "enableVibration", this.enableVibration, "vibrationPattern", this.vibrationPattern, "enableLights", this.enableLights, "defaultColor", (t1 = this.defaultColor, t1 == null ? null : t1.value), "ledColor", (t1$ = this.ledColor, t1$ == null ? null : t1$.value), "ledOnMs", this.ledOnMs, "ledOffMs", this.ledOffMs, "groupKey", this.groupKey, "groupSort", assert_utils.AssertUtils.toSimpleEnumString(T.GroupSortL(), this.groupSort), "groupAlertBehavior", assert_utils.AssertUtils.toSimpleEnumString(T.GroupAlertBehaviorL(), this.groupAlertBehavior), "defaultPrivacy", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationPrivacyL(), this.defaultPrivacy), "defaultRingtoneType", assert_utils.AssertUtils.toSimpleEnumString(T.DefaultRingtoneTypeL(), this.defaultRingtoneType), "locked", this.locked, "onlyAlertOnce", this.onlyAlertOnce]);
    }
    fromMap(dataMap) {
      this.channelKey = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "channelKey"));
      this.channelName = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "channelName"));
      this.channelDescription = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "channelDescription"));
      this.channelShowBadge = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "channelShowBadge"));
      this.importance = T.NotificationImportanceL().as(assert_utils.AssertUtils.extractEnum(T.NotificationImportanceL(), dataMap, "importance", notification_importance.NotificationImportance.values));
      this.playSound = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "playSound"));
      this.soundSource = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "soundPath"));
      this.enableVibration = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "enableVibration"));
      this.vibrationPattern = T.Int64ListL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "vibrationPattern"));
      this.enableLights = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "enableLights"));
      this.groupKey = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "groupKey"));
      this.groupSort = T.GroupSortL().as(assert_utils.AssertUtils.extractEnum(T.GroupSortL(), dataMap, "groupSort", group_sort.GroupSort.values));
      this.groupAlertBehavior = T.GroupAlertBehaviorL().as(assert_utils.AssertUtils.extractEnum(T.GroupAlertBehaviorL(), dataMap, "groupAlertBehavior", group_alert_behaviour.GroupAlertBehavior.values));
      this.defaultPrivacy = T.NotificationPrivacyL().as(assert_utils.AssertUtils.extractEnum(T.NotificationPrivacyL(), dataMap, "defaultPrivacy", notification_privacy.NotificationPrivacy.values));
      this.defaultRingtoneType = T.DefaultRingtoneTypeL().as(assert_utils.AssertUtils.extractEnum(T.DefaultRingtoneTypeL(), dataMap, "defaultRingtoneType", default_ringtone_type.DefaultRingtoneType.values));
      this.icon = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "icon"));
      this.locked = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "locked"));
      this.onlyAlertOnce = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "onlyAlertOnce"));
      let defaultColorValue = T.intL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "defaultColor"));
      this.defaultColor = this.defaultColor == null ? null : new ui.Color.new(defaultColorValue);
      let ledColorValue = T.intL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "ledColor"));
      this.ledColor = this.defaultColor == null ? null : new ui.Color.new(ledColorValue);
      this.ledOnMs = T.intL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "ledOnMs"));
      this.ledOffMs = T.intL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "ledOffMs"));
      return this;
    }
    validate() {
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.channelKey, dart.wrapType(core.String)))) dart.assertFailed(null, I[7], 190, 12, "!AssertUtils.isNullOrEmptyOrInvalid(channelKey, String)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.channelName, dart.wrapType(core.String)))) dart.assertFailed(null, I[7], 191, 12, "!AssertUtils.isNullOrEmptyOrInvalid(channelName, String)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.channelDescription, dart.wrapType(core.String)))) dart.assertFailed(null, I[7], 192, 12, "!AssertUtils.isNullOrEmptyOrInvalid(channelDescription, String)");
    }
  };
  (notification_channel.NotificationChannel.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let channelKey = opts && 'channelKey' in opts ? opts.channelKey : null;
    let channelName = opts && 'channelName' in opts ? opts.channelName : null;
    let channelDescription = opts && 'channelDescription' in opts ? opts.channelDescription : null;
    let channelShowBadge = opts && 'channelShowBadge' in opts ? opts.channelShowBadge : null;
    let importance = opts && 'importance' in opts ? opts.importance : null;
    let playSound = opts && 'playSound' in opts ? opts.playSound : null;
    let soundSource = opts && 'soundSource' in opts ? opts.soundSource : null;
    let defaultRingtoneType = opts && 'defaultRingtoneType' in opts ? opts.defaultRingtoneType : null;
    let enableVibration = opts && 'enableVibration' in opts ? opts.enableVibration : null;
    let vibrationPattern = opts && 'vibrationPattern' in opts ? opts.vibrationPattern : null;
    let enableLights = opts && 'enableLights' in opts ? opts.enableLights : null;
    let ledColor = opts && 'ledColor' in opts ? opts.ledColor : null;
    let ledOnMs = opts && 'ledOnMs' in opts ? opts.ledOnMs : null;
    let ledOffMs = opts && 'ledOffMs' in opts ? opts.ledOffMs : null;
    let groupKey = opts && 'groupKey' in opts ? opts.groupKey : null;
    let groupSort = opts && 'groupSort' in opts ? opts.groupSort : null;
    let groupAlertBehavior = opts && 'groupAlertBehavior' in opts ? opts.groupAlertBehavior : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let defaultColor = opts && 'defaultColor' in opts ? opts.defaultColor : null;
    let locked = opts && 'locked' in opts ? opts.locked : null;
    let onlyAlertOnce = opts && 'onlyAlertOnce' in opts ? opts.onlyAlertOnce : null;
    let defaultPrivacy = opts && 'defaultPrivacy' in opts ? opts.defaultPrivacy : null;
    this[channelKey$0] = channelKey;
    this[channelName$] = channelName;
    this[channelDescription$] = channelDescription;
    this[channelShowBadge$] = channelShowBadge;
    this[importance$] = importance;
    this[playSound$] = playSound;
    this[soundSource$] = soundSource;
    this[defaultRingtoneType$] = defaultRingtoneType;
    this[enableVibration$] = enableVibration;
    this[vibrationPattern$] = vibrationPattern;
    this[enableLights$] = enableLights;
    this[ledColor$] = ledColor;
    this[ledOnMs$] = ledOnMs;
    this[ledOffMs$] = ledOffMs;
    this[groupKey$] = groupKey;
    this[groupSort$] = groupSort;
    this[groupAlertBehavior$] = groupAlertBehavior;
    this[icon$0] = icon;
    this[defaultColor$] = defaultColor;
    this[locked$0] = locked;
    this[onlyAlertOnce$] = onlyAlertOnce;
    this[defaultPrivacy$] = defaultPrivacy;
    this.channelKey = T.StringL().as(assert_utils.AssertUtils.getValueOrDefault("channelKey", this.channelKey, dart.wrapType(core.String)));
    this.channelName = T.StringL().as(assert_utils.AssertUtils.getValueOrDefault("channelName", this.channelName, dart.wrapType(core.String)));
    this.channelDescription = T.StringL().as(assert_utils.AssertUtils.getValueOrDefault("channelDescription", this.channelDescription, dart.wrapType(core.String)));
    this.channelShowBadge = T.boolL().as(assert_utils.AssertUtils.getValueOrDefault("channelShowBadge", this.channelShowBadge, dart.wrapType(core.bool)));
    this.importance = T.NotificationImportanceL().as(assert_utils.AssertUtils.getValueOrDefault("importance", this.importance, dart.wrapType(notification_importance.NotificationImportance)));
    this.playSound = T.boolL().as(assert_utils.AssertUtils.getValueOrDefault("playSound", this.playSound, dart.wrapType(core.bool)));
    this.soundSource = T.StringL().as(assert_utils.AssertUtils.getValueOrDefault("soundSource", this.soundSource, dart.wrapType(core.String)));
    this.enableVibration = T.boolL().as(assert_utils.AssertUtils.getValueOrDefault("enableVibration", this.enableVibration, dart.wrapType(core.bool)));
    this.vibrationPattern = T.Int64ListL().as(assert_utils.AssertUtils.getValueOrDefault("vibrationPattern", this.vibrationPattern, dart.wrapType(typed_data.Int64List)));
    this.enableLights = T.boolL().as(assert_utils.AssertUtils.getValueOrDefault("enableLights", this.enableLights, dart.wrapType(core.bool)));
    this.ledColor = T.ColorL().as(assert_utils.AssertUtils.getValueOrDefault("ledColor", this.ledColor, dart.wrapType(ui.Color)));
    this.ledOnMs = T.intL().as(assert_utils.AssertUtils.getValueOrDefault("ledOnMs", this.ledOnMs, dart.wrapType(core.int)));
    this.ledOffMs = T.intL().as(assert_utils.AssertUtils.getValueOrDefault("ledOffMs", this.ledOffMs, dart.wrapType(core.int)));
    this.groupKey = T.StringL().as(assert_utils.AssertUtils.getValueOrDefault("groupKey", this.groupKey, dart.wrapType(core.String)));
    this.groupSort = T.GroupSortL().as(assert_utils.AssertUtils.getValueOrDefault("groupSort", this.groupSort, dart.wrapType(group_sort.GroupSort)));
    this.groupAlertBehavior = T.GroupAlertBehaviorL().as(assert_utils.AssertUtils.getValueOrDefault("groupAlertBehavior", this.groupAlertBehavior, dart.wrapType(group_alert_behaviour.GroupAlertBehavior)));
    this.icon = T.StringL().as(assert_utils.AssertUtils.getValueOrDefault("icon", this.icon, dart.wrapType(core.String)));
    this.defaultColor = T.ColorL().as(assert_utils.AssertUtils.getValueOrDefault("defaultColor", this.defaultColor, dart.wrapType(ui.Color)));
    this.locked = T.boolL().as(assert_utils.AssertUtils.getValueOrDefault("locked", this.locked, dart.wrapType(core.bool)));
    this.onlyAlertOnce = T.boolL().as(assert_utils.AssertUtils.getValueOrDefault("onlyAlertOnce", this.onlyAlertOnce, dart.wrapType(core.bool)));
    this.defaultPrivacy = T.NotificationPrivacyL().as(assert_utils.AssertUtils.getValueOrDefault("defaultPrivacy", this.defaultPrivacy, dart.wrapType(notification_privacy.NotificationPrivacy)));
    this.defaultRingtoneType = T.DefaultRingtoneTypeL().as(assert_utils.AssertUtils.getValueOrDefault("defaultRingtoneType", this.defaultRingtoneType, dart.wrapType(default_ringtone_type.DefaultRingtoneType)));
    if (!(dart.test(string_utils.StringUtils.isNullOrEmpty(this.icon)) || bitmap_utils.BitmapUtils.new().getMediaSource(this.icon) == media_source.MediaSource.Resource)) dart.assertFailed(null, I[7], 117, 12, "StringUtils.isNullOrEmpty(icon) ||\r\n        BitmapUtils().getMediaSource(icon) == MediaSource.Resource");
  }).prototype = notification_channel.NotificationChannel.prototype;
  dart.addTypeTests(notification_channel.NotificationChannel);
  dart.addTypeCaches(notification_channel.NotificationChannel);
  dart.setMethodSignature(notification_channel.NotificationChannel, () => ({
    __proto__: dart.getMethods(notification_channel.NotificationChannel.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    fromMap: dart.fnType(dart.legacy(notification_channel.NotificationChannel), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    validate: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(notification_channel.NotificationChannel, I[8]);
  dart.setFieldSignature(notification_channel.NotificationChannel, () => ({
    __proto__: dart.getFields(notification_channel.NotificationChannel.__proto__),
    channelKey: dart.fieldType(dart.legacy(core.String)),
    channelName: dart.fieldType(dart.legacy(core.String)),
    channelDescription: dart.fieldType(dart.legacy(core.String)),
    channelShowBadge: dart.fieldType(dart.legacy(core.bool)),
    importance: dart.fieldType(dart.legacy(notification_importance.NotificationImportance)),
    playSound: dart.fieldType(dart.legacy(core.bool)),
    soundSource: dart.fieldType(dart.legacy(core.String)),
    defaultRingtoneType: dart.fieldType(dart.legacy(default_ringtone_type.DefaultRingtoneType)),
    enableVibration: dart.fieldType(dart.legacy(core.bool)),
    vibrationPattern: dart.fieldType(dart.legacy(typed_data.Int64List)),
    enableLights: dart.fieldType(dart.legacy(core.bool)),
    ledColor: dart.fieldType(dart.legacy(ui.Color)),
    ledOnMs: dart.fieldType(dart.legacy(core.int)),
    ledOffMs: dart.fieldType(dart.legacy(core.int)),
    groupKey: dart.fieldType(dart.legacy(core.String)),
    groupSort: dart.fieldType(dart.legacy(group_sort.GroupSort)),
    groupAlertBehavior: dart.fieldType(dart.legacy(group_alert_behaviour.GroupAlertBehavior)),
    defaultPrivacy: dart.fieldType(dart.legacy(notification_privacy.NotificationPrivacy)),
    icon: dart.fieldType(dart.legacy(core.String)),
    defaultColor: dart.fieldType(dart.legacy(ui.Color)),
    locked: dart.fieldType(dart.legacy(core.bool)),
    onlyAlertOnce: dart.fieldType(dart.legacy(core.bool))
  }));
  var drawablePath$ = dart.privateName(resource_image_provider, "ResourceImage.drawablePath");
  var scale$ = dart.privateName(resource_image_provider, "ResourceImage.scale");
  var _loadAsync = dart.privateName(resource_image_provider, "_loadAsync");
  resource_image_provider.ResourceImage = class ResourceImage extends image_provider.ImageProvider {
    get drawablePath() {
      return this[drawablePath$];
    }
    set drawablePath(value) {
      super.drawablePath = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    obtainKey(configuration) {
      return new (T.SynchronousFutureOfResourceImageL()).new(this);
    }
    load(key, decode) {
      T.ResourceImageL().as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync](key, decode), scale: key.scale});
    }
    [_loadAsync](key, decode) {
      return async.async(T.CodecL(), (function* _loadAsync() {
        if (!dart.equals(key, this)) dart.assertFailed(null, I[9], 47, 12, "key == this");
        let bytes = null;
        let awesomeNotifications = awesome_notifications_core.AwesomeNotifications.new();
        bytes = (yield awesomeNotifications.getDrawableData(this.drawablePath));
        return decode(bytes);
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      return T.ResourceImageL().is(other) && other.drawablePath == this.drawablePath && other.scale == this.scale;
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.drawablePath), this.scale);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "ResourceImage")) + "(" + dart.str(this.drawablePath) + ", scale: " + dart.str(this.scale) + ")";
    }
  };
  (resource_image_provider.ResourceImage.new = function(drawablePath, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    this[drawablePath$] = drawablePath;
    this[scale$] = scale;
    if (!(drawablePath != null)) dart.assertFailed(null, I[9], 25, 16, "drawablePath != null");
    if (!(scale != null)) dart.assertFailed(null, I[9], 26, 16, "scale != null");
    resource_image_provider.ResourceImage.__proto__.new.call(this);
    ;
  }).prototype = resource_image_provider.ResourceImage.prototype;
  dart.addTypeTests(resource_image_provider.ResourceImage);
  dart.addTypeCaches(resource_image_provider.ResourceImage);
  dart.setMethodSignature(resource_image_provider.ResourceImage, () => ({
    __proto__: dart.getMethods(resource_image_provider.ResourceImage.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(resource_image_provider.ResourceImage))), [dart.legacy(image_provider.ImageConfiguration)]),
    load: dart.fnType(dart.legacy(image_stream.ImageStreamCompleter), [dart.legacy(core.Object), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    [_loadAsync]: dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(resource_image_provider.ResourceImage), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(resource_image_provider.ResourceImage, () => ({
    __proto__: dart.getGetters(resource_image_provider.ResourceImage.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(resource_image_provider.ResourceImage, I[10]);
  dart.setFieldSignature(resource_image_provider.ResourceImage, () => ({
    __proto__: dart.getFields(resource_image_provider.ResourceImage.__proto__),
    drawablePath: dart.finalFieldType(dart.legacy(core.String)),
    scale: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(resource_image_provider.ResourceImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(resource_image_provider.ResourceImage, ['hashCode']);
  bitmap_utils.BitmapUtils = class BitmapUtils extends media_abstract_utils.MediaUtils {
    static new() {
      return bitmap_utils.BitmapUtils._instance;
    }
    getFromMediaAsset(mediaPath) {
      return new image_resolution.AssetImage.new(this.cleanMediaPath(mediaPath));
    }
    getFromMediaFile(mediaPath) {
      return new image_provider.FileImage.new(io.File.new(this.cleanMediaPath(mediaPath)));
    }
    getFromMediaNetwork(mediaPath) {
      return new _network_image_web.NetworkImage.new(mediaPath);
    }
    getFromMediaResource(mediaPath) {
      return new resource_image_provider.ResourceImage.new(mediaPath);
    }
  };
  (bitmap_utils.BitmapUtils.private = function() {
    ;
  }).prototype = bitmap_utils.BitmapUtils.prototype;
  dart.addTypeTests(bitmap_utils.BitmapUtils);
  dart.addTypeCaches(bitmap_utils.BitmapUtils);
  dart.setMethodSignature(bitmap_utils.BitmapUtils, () => ({
    __proto__: dart.getMethods(bitmap_utils.BitmapUtils.__proto__),
    getFromMediaAsset: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
    getFromMediaFile: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
    getFromMediaNetwork: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
    getFromMediaResource: dart.fnType(dart.dynamic, [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(bitmap_utils.BitmapUtils, I[11]);
  dart.defineLazy(bitmap_utils.BitmapUtils, {
    /*bitmap_utils.BitmapUtils._instance*/get _instance() {
      return new bitmap_utils.BitmapUtils.private();
    }
  }, true);
  var key$ = dart.privateName(notification_button, "NotificationActionButton.key");
  var label$ = dart.privateName(notification_button, "NotificationActionButton.label");
  var icon$1 = dart.privateName(notification_button, "NotificationActionButton.icon");
  var enabled$ = dart.privateName(notification_button, "NotificationActionButton.enabled");
  var autoCancel$0 = dart.privateName(notification_button, "NotificationActionButton.autoCancel");
  var buttonType$ = dart.privateName(notification_button, "NotificationActionButton.buttonType");
  var _name = dart.privateName(action_button_type, "_name");
  notification_button.NotificationActionButton = class NotificationActionButton extends model.Model {
    get key() {
      return this[key$];
    }
    set key(value) {
      this[key$] = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      this[label$] = value;
    }
    get icon() {
      return this[icon$1];
    }
    set icon(value) {
      this[icon$1] = value;
    }
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      this[enabled$] = value;
    }
    get autoCancel() {
      return this[autoCancel$0];
    }
    set autoCancel(value) {
      this[autoCancel$0] = value;
    }
    get buttonType() {
      return this[buttonType$];
    }
    set buttonType(value) {
      this[buttonType$] = value;
    }
    fromMap(dataMap) {
      this.key = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "key"));
      this.icon = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "icon"));
      this.label = T.StringL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "label"));
      this.enabled = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "enabled"));
      this.autoCancel = T.boolL().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "autoCancel"));
      this.buttonType = T.ActionButtonTypeL().as(assert_utils.AssertUtils.extractEnum(T.ActionButtonTypeL(), dataMap, "buttonType", action_button_type.ActionButtonType.values));
      if (!(dart.test(string_utils.StringUtils.isNullOrEmpty(this.icon)) || bitmap_utils.BitmapUtils.new().getMediaSource(this.icon) == media_source.MediaSource.Resource)) dart.assertFailed(null, I[12], 45, 12, "StringUtils.isNullOrEmpty(icon) ||\r\n        BitmapUtils().getMediaSource(icon) == MediaSource.Resource");
      return this;
    }
    toMap() {
      return new (T.IdentityMapOfStringL$dynamic()).from(["key", this.key, "icon", this.icon, "label", this.label, "enabled", this.enabled, "autoCancel", this.autoCancel, "buttonType", assert_utils.AssertUtils.toSimpleEnumString(T.ActionButtonTypeL(), this.buttonType)]);
    }
    validate() {
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.key, dart.wrapType(core.String)))) dart.assertFailed(null, I[12], 65, 12, "!AssertUtils.isNullOrEmptyOrInvalid(key, String)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.label, dart.wrapType(core.String)))) dart.assertFailed(null, I[12], 66, 12, "!AssertUtils.isNullOrEmptyOrInvalid(label, String)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.autoCancel, dart.wrapType(core.bool)))) dart.assertFailed(null, I[12], 67, 12, "!AssertUtils.isNullOrEmptyOrInvalid(autoCancel, bool)");
    }
  };
  (notification_button.NotificationActionButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let autoCancel = opts && 'autoCancel' in opts ? opts.autoCancel : null;
    let buttonType = opts && 'buttonType' in opts ? opts.buttonType : C[0] || CT.C0;
    this[key$] = key;
    this[icon$1] = icon;
    this[label$] = label;
    this[enabled$] = enabled;
    this[autoCancel$0] = autoCancel;
    this[buttonType$] = buttonType;
    ;
  }).prototype = notification_button.NotificationActionButton.prototype;
  dart.addTypeTests(notification_button.NotificationActionButton);
  dart.addTypeCaches(notification_button.NotificationActionButton);
  dart.setMethodSignature(notification_button.NotificationActionButton, () => ({
    __proto__: dart.getMethods(notification_button.NotificationActionButton.__proto__),
    fromMap: dart.fnType(dart.legacy(model.Model), [dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))]),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    validate: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(notification_button.NotificationActionButton, I[13]);
  dart.setFieldSignature(notification_button.NotificationActionButton, () => ({
    __proto__: dart.getFields(notification_button.NotificationActionButton.__proto__),
    key: dart.fieldType(dart.legacy(core.String)),
    label: dart.fieldType(dart.legacy(core.String)),
    icon: dart.fieldType(dart.legacy(core.String)),
    enabled: dart.fieldType(dart.legacy(core.bool)),
    autoCancel: dart.fieldType(dart.legacy(core.bool)),
    buttonType: dart.fieldType(dart.legacy(action_button_type.ActionButtonType))
  }));
  var _tokenStreamController = dart.privateName(awesome_notifications_core, "_tokenStreamController");
  var _createdSubject = dart.privateName(awesome_notifications_core, "_createdSubject");
  var _displayedSubject = dart.privateName(awesome_notifications_core, "_displayedSubject");
  var _actionSubject = dart.privateName(awesome_notifications_core, "_actionSubject");
  var _dismissedSubject = dart.privateName(awesome_notifications_core, "_dismissedSubject");
  var _channel = dart.privateName(awesome_notifications_core, "_channel");
  var _handleMethod = dart.privateName(awesome_notifications_core, "_handleMethod");
  var _validateId = dart.privateName(awesome_notifications_core, "_validateId");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  awesome_notifications_core.AwesomeNotifications = class AwesomeNotifications extends core.Object {
    get fcmTokenStream() {
      return this[_tokenStreamController].stream;
    }
    get createdStream() {
      return this[_createdSubject].stream;
    }
    get displayedStream() {
      return this[_displayedSubject].stream;
    }
    get dismissedStream() {
      return this[_dismissedSubject].stream;
    }
    get actionStream() {
      return this[_actionSubject].stream;
    }
    get fcmTokenSink() {
      return this[_tokenStreamController].sink;
    }
    get createdSink() {
      return this[_createdSubject].sink;
    }
    get displayedSink() {
      return this[_displayedSubject].sink;
    }
    get dismissedSink() {
      return this[_dismissedSubject].sink;
    }
    get actionSink() {
      return this[_actionSubject].sink;
    }
    dispose() {
      this[_tokenStreamController].close();
      this[_createdSubject].close();
      this[_displayedSubject].close();
      this[_dismissedSubject].close();
      this[_actionSubject].close();
    }
    static new() {
      return awesome_notifications_core.AwesomeNotifications._instance;
    }
    initialize(defaultIcon, channels) {
      return async.async(T.boolL(), (function* initialize() {
        binding.WidgetsFlutterBinding.ensureInitialized();
        this[_channel].setMethodCallHandler(dart.bind(this, _handleMethod));
        let serializedChannels = [];
        for (let channel of channels) {
          serializedChannels[$add](channel.toMap());
        }
        let defaultIconPath = null;
        if (!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(T.StringL(), defaultIcon, dart.wrapType(core.String)))) {
          if (!(bitmap_utils.BitmapUtils.new().getMediaSource(defaultIcon) == media_source.MediaSource.Resource)) dart.assertFailed(null, I[14], 142, 14, "BitmapUtils().getMediaSource(defaultIcon) == MediaSource.Resource");
          defaultIconPath = defaultIcon;
        }
        let result = (yield this[_channel].invokeMethod(dart.dynamic, "initialize", new (T.IdentityMapOfStringL$ObjectL()).from(["defaultIcon", defaultIconPath, "initializeChannels", serializedChannels])));
        return T.FutureOrLOfboolL().as(result);
      }).bind(this));
    }
    getDrawableData(drawablePath) {
      return async.async(T.Uint8ListL(), (function* getDrawableData() {
        let result2 = (yield this[_channel].invokeMethod(dart.dynamic, "getDrawableData", drawablePath));
        if (result2 == null) return null;
        return T.FutureOrLOfUint8ListL().as(result2);
      }).bind(this));
    }
    [_handleMethod](call) {
      return async.async(dart.dynamic, (function* _handleMethod() {
        let $arguments = T.LinkedHashMapOfStringL$dynamic().from(core.Map.as(call.arguments));
        switch (call.method) {
          case "newTokenReceived":
          {
            let token = T.StringL().as(call.arguments);
            this[_tokenStreamController].add(token);
            return;
          }
          case "notificationCreated":
          {
            this[_createdSubject].sink.add(new received_notification.ReceivedNotification.new().fromMap($arguments));
            print.debugPrint("Notification created");
            return;
          }
          case "notificationDisplayed":
          {
            this[_displayedSubject].sink.add(new received_notification.ReceivedNotification.new().fromMap($arguments));
            print.debugPrint("Notification displayed");
            return;
          }
          case "notificationDismissed":
          {
            this[_dismissedSubject].sink.add(T.ReceivedActionL().as(new received_action.ReceivedAction.new().fromMap($arguments)));
            print.debugPrint("Notification dismissed");
            return;
          }
          case "receivedAction":
          {
            this[_actionSubject].sink.add(T.ReceivedActionL().as(new received_action.ReceivedAction.new().fromMap($arguments)));
            print.debugPrint("Action received");
            return;
          }
          default:
          {
            dart.throw(new core.UnsupportedError.new("Unrecognized JSON message"));
          }
        }
      }).bind(this));
    }
    [_validateId](id) {
      if (dart.notNull(id) > 2147483647 || dart.notNull(id) < -2147483648) {
        dart.throw(new core.ArgumentError.new("The id field must be the limited to 32-bit size integer"));
      }
    }
    get firebaseAppToken() {
      return async.async(T.StringL(), (function* firebaseAppToken() {
        let token = (yield this[_channel].invokeMethod(T.StringL(), "getFirebaseToken"));
        return token;
      }).bind(this));
    }
    get isFirebaseAvailable() {
      return async.async(T.boolL(), (function* isFirebaseAvailable() {
        let isAvailable = (yield this[_channel].invokeMethod(T.boolL(), "isFirebaseAvailable"));
        return isAvailable;
      }).bind(this));
    }
    createNotification(opts) {
      let content = opts && 'content' in opts ? opts.content : null;
      let schedule = opts && 'schedule' in opts ? opts.schedule : null;
      let actionButtons = opts && 'actionButtons' in opts ? opts.actionButtons : null;
      return async.async(T.boolL(), (function* createNotification() {
        this[_validateId](content.id);
        try {
          let wasCreated = (yield this[_channel].invokeMethod(T.boolL(), "createNewNotification", new push_notification.PushNotification.new({content: content, schedule: schedule, actionButtons: actionButtons}).toMap()));
          return wasCreated;
        } catch (e) {
          let error = dart.getThrown(e);
          if (T.PlatformExceptionL().is(error)) {
            core.print(error);
          } else
            throw e;
        }
        return false;
      }).bind(this));
    }
    isNotificationAllowed() {
      return async.async(T.boolL(), (function* isNotificationAllowed() {
        let isAllowed = (yield this[_channel].invokeMethod(T.boolL(), "isNotificationAllowed"));
        return isAllowed;
      }).bind(this));
    }
    requestPermissionToSendNotifications() {
      return async.async(T.boolL(), (function* requestPermissionToSendNotifications() {
        let isAllowed = (yield this[_channel].invokeMethod(T.boolL(), "requestNotifications"));
        return isAllowed;
      }).bind(this));
    }
    listScheduledNotifications() {
      return async.async(T.ListLOfPushNotificationL(), (function* listScheduledNotifications() {
        let scheduledNotifications = T.JSArrayOfPushNotificationL().of([]);
        let returned = (yield this[_channel].invokeListMethod(T.ObjectL(), "listAllSchedules"));
        for (let object of returned) {
          if (T.MapL().is(object)) {
            try {
              let pushNotification = new push_notification.PushNotification.new().fromMap(T.LinkedHashMapOfStringL$dynamic().from(object));
              scheduledNotifications[$add](pushNotification);
            } catch (e$) {
              let e = dart.getThrown(e$);
              return T.JSArrayOfPushNotificationL().of([]);
            }
          }
        }
        return scheduledNotifications;
      }).bind(this));
    }
    setChannel(notificationChannel, opts) {
      let forceUpdate = opts && 'forceUpdate' in opts ? opts.forceUpdate : null;
      return async.async(dart.void, (function* setChannel() {
        let parameters = notificationChannel.toMap();
        parameters[$addAll](new (T.IdentityMapOfStringL$dynamic()).from(["forceUpdate", forceUpdate]));
        yield this[_channel].invokeMethod(dart.dynamic, "setNotificationChannel", parameters);
      }).bind(this));
    }
    removeChannel(channelKey) {
      return async.async(T.boolL(), (function* removeChannel() {
        let wasRemoved = (yield this[_channel].invokeMethod(T.boolL(), "removeNotificationChannel", channelKey));
        return wasRemoved;
      }).bind(this));
    }
    setGlobalBadgeCounter(amount) {
      return async.async(dart.void, (function* setGlobalBadgeCounter() {
        if (amount == null) {
          return;
        }
        let data = new (T.IdentityMapOfStringL$dynamic()).from(["channelShowBadge", amount]);
        yield this[_channel].invokeMethod(dart.dynamic, "setBadgeCount", data);
      }).bind(this));
    }
    getGlobalBadgeCounter() {
      return async.async(T.intL(), (function* getGlobalBadgeCounter() {
        let badgeCount = (yield this[_channel].invokeMethod(T.intL(), "getBadgeCount"));
        return badgeCount;
      }).bind(this));
    }
    resetGlobalBadge() {
      return async.async(dart.void, (function* resetGlobalBadge() {
        yield this[_channel].invokeListMethod(dart.dynamic, "resetBadge");
      }).bind(this));
    }
    getNextDate(schedule, opts) {
      let fixedDate = opts && 'fixedDate' in opts ? opts.fixedDate : null;
      return async.async(T.DateTimeL(), (function* getNextDate() {
        let parameters = new _js_helper.LinkedMap.from(["fixedDate", date_utils.DateUtils.parseDateToString(fixedDate), "schedule", schedule.toMap()]);
        let nextDate = (yield this[_channel].invokeMethod(T.StringL(), "getNextDate", parameters));
        return date_utils.DateUtils.parseStringToDate(nextDate);
      }).bind(this));
    }
    cancel(id) {
      return async.async(dart.void, (function* cancel() {
        this[_validateId](id);
        yield this[_channel].invokeMethod(dart.dynamic, "cancelNotification", id);
      }).bind(this));
    }
    cancelSchedule(id) {
      return async.async(dart.void, (function* cancelSchedule() {
        this[_validateId](id);
        yield this[_channel].invokeMethod(dart.dynamic, "cancelSchedule", id);
      }).bind(this));
    }
    cancelAllSchedules() {
      return async.async(dart.void, (function* cancelAllSchedules() {
        yield this[_channel].invokeMethod(dart.dynamic, "cancelAllSchedules");
      }).bind(this));
    }
    cancelAll() {
      return async.async(dart.void, (function* cancelAll() {
        yield this[_channel].invokeMethod(dart.dynamic, "cancelAllNotifications");
      }).bind(this));
    }
  };
  (awesome_notifications_core.AwesomeNotifications.private = function(channel) {
    this[_tokenStreamController] = T.StreamControllerOfStringL().new();
    this[_createdSubject] = T.StreamControllerOfReceivedNotificationL().new();
    this[_displayedSubject] = T.StreamControllerOfReceivedNotificationL().new();
    this[_actionSubject] = T.StreamControllerOfReceivedActionL().new();
    this[_dismissedSubject] = T.StreamControllerOfReceivedActionL().new();
    this[_channel] = channel;
    ;
  }).prototype = awesome_notifications_core.AwesomeNotifications.prototype;
  dart.addTypeTests(awesome_notifications_core.AwesomeNotifications);
  dart.addTypeCaches(awesome_notifications_core.AwesomeNotifications);
  dart.setMethodSignature(awesome_notifications_core.AwesomeNotifications, () => ({
    __proto__: dart.getMethods(awesome_notifications_core.AwesomeNotifications.__proto__),
    dispose: dart.fnType(dart.dynamic, []),
    initialize: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(notification_channel.NotificationChannel)))]),
    getDrawableData: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [dart.legacy(core.String)]),
    [_handleMethod]: dart.fnType(dart.legacy(async.Future), [dart.legacy(message_codec.MethodCall)]),
    [_validateId]: dart.fnType(dart.void, [dart.legacy(core.int)]),
    createNotification: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [], {actionButtons: dart.legacy(core.List$(dart.legacy(notification_button.NotificationActionButton))), content: dart.legacy(notification_content.NotificationContent), schedule: dart.legacy(notification_schedule.NotificationSchedule)}, {}),
    isNotificationAllowed: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    requestPermissionToSendNotifications: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    listScheduledNotifications: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(push_notification.PushNotification))))), []),
    setChannel: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(notification_channel.NotificationChannel)], {forceUpdate: dart.legacy(core.bool)}, {}),
    removeChannel: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(core.String)]),
    setGlobalBadgeCounter: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    getGlobalBadgeCounter: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    resetGlobalBadge: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    getNextDate: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.DateTime))), [dart.legacy(notification_schedule.NotificationSchedule)], {fixedDate: dart.legacy(core.DateTime)}, {}),
    cancel: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    cancelSchedule: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    cancelAllSchedules: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    cancelAll: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setGetterSignature(awesome_notifications_core.AwesomeNotifications, () => ({
    __proto__: dart.getGetters(awesome_notifications_core.AwesomeNotifications.__proto__),
    fcmTokenStream: dart.legacy(async.Stream$(dart.legacy(core.String))),
    createdStream: dart.legacy(async.Stream$(dart.legacy(received_notification.ReceivedNotification))),
    displayedStream: dart.legacy(async.Stream$(dart.legacy(received_notification.ReceivedNotification))),
    dismissedStream: dart.legacy(async.Stream$(dart.legacy(received_action.ReceivedAction))),
    actionStream: dart.legacy(async.Stream$(dart.legacy(received_action.ReceivedAction))),
    fcmTokenSink: dart.legacy(core.Sink),
    createdSink: dart.legacy(core.Sink),
    displayedSink: dart.legacy(core.Sink),
    dismissedSink: dart.legacy(core.Sink),
    actionSink: dart.legacy(core.Sink),
    firebaseAppToken: dart.legacy(async.Future$(dart.legacy(core.String))),
    isFirebaseAvailable: dart.legacy(async.Future$(dart.legacy(core.bool)))
  }));
  dart.setLibraryUri(awesome_notifications_core.AwesomeNotifications, I[15]);
  dart.setFieldSignature(awesome_notifications_core.AwesomeNotifications, () => ({
    __proto__: dart.getFields(awesome_notifications_core.AwesomeNotifications.__proto__),
    [_tokenStreamController]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(core.String)))),
    [_createdSubject]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(received_notification.ReceivedNotification)))),
    [_displayedSubject]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(received_notification.ReceivedNotification)))),
    [_actionSubject]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(received_action.ReceivedAction)))),
    [_dismissedSubject]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(received_action.ReceivedAction)))),
    [_channel]: dart.finalFieldType(dart.legacy(platform_channel.MethodChannel))
  }));
  dart.defineLazy(awesome_notifications_core.AwesomeNotifications, {
    /*awesome_notifications_core.AwesomeNotifications.rootNativePath*/get rootNativePath() {
      return null;
    },
    set rootNativePath(_) {},
    /*awesome_notifications_core.AwesomeNotifications._instance*/get _instance() {
      return new awesome_notifications_core.AwesomeNotifications.private(C[1] || CT.C1);
    }
  }, true);
  dart.defineLazy(awesome_notifications, {
    /*awesome_notifications.lowVibrationPattern*/get lowVibrationPattern() {
      return typed_data.Int64List.fromList(T.JSArrayOfintL().of([0, 200, 200, 200]));
    },
    set lowVibrationPattern(_) {},
    /*awesome_notifications.mediumVibrationPattern*/get mediumVibrationPattern() {
      return typed_data.Int64List.fromList(T.JSArrayOfintL().of([0, 500, 200, 200, 200, 200]));
    },
    set mediumVibrationPattern(_) {},
    /*awesome_notifications.highVibrationPattern*/get highVibrationPattern() {
      return typed_data.Int64List.fromList(T.JSArrayOfintL().of([0, 1000, 200, 200, 200, 200, 200, 200]));
    },
    set highVibrationPattern(_) {}
  }, true);
  dart.setBaseClass(resource_image_provider.ResourceImage, image_provider.ImageProvider$(dart.legacy(resource_image_provider.ResourceImage)));
  dart.trackLibraries("packages/awesome_notifications/src/models/received_models/received_notification.dart", {
    "package:awesome_notifications/src/models/received_models/received_notification.dart": received_notification,
    "package:awesome_notifications/src/models/received_models/received_action.dart": received_action,
    "package:awesome_notifications/src/models/received_models/push_notification.dart": push_notification,
    "package:awesome_notifications/src/models/basic_notification_content.dart": basic_notification_content,
    "package:awesome_notifications/src/models/notification_content.dart": notification_content,
    "package:awesome_notifications/src/models/notification_channel.dart": notification_channel,
    "package:awesome_notifications/src/utils/resource_image_provider.dart": resource_image_provider,
    "package:awesome_notifications/src/utils/bitmap_utils.dart": bitmap_utils,
    "package:awesome_notifications/src/models/notification_button.dart": notification_button,
    "package:awesome_notifications/src/awesome_notifications_core.dart": awesome_notifications_core,
    "package:awesome_notifications/awesome_notifications.dart": awesome_notifications
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../basic_notification_content.dart","received_notification.dart","received_action.dart","push_notification.dart","../notification_content.dart","../notification_channel.dart","../../utils/resource_image_provider.dart","../../utils/bitmap_utils.dart","../notification_button.dart","../../awesome_notifications_core.dart","../../../awesome_notifications.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../D:/packages/awesome_notifications/src/models/received_models/received_notification.dart.lib.js"}');
  // Exports:
  return {
    src__models__received_models__received_notification: received_notification,
    src__models__received_models__received_action: received_action,
    src__models__received_models__push_notification: push_notification,
    src__models__basic_notification_content: basic_notification_content,
    src__models__notification_content: notification_content,
    src__models__notification_channel: notification_channel,
    src__utils__resource_image_provider: resource_image_provider,
    src__utils__bitmap_utils: bitmap_utils,
    src__models__notification_button: notification_button,
    src__awesome_notifications_core: awesome_notifications_core,
    awesome_notifications: awesome_notifications
  };
}));

//# sourceMappingURL=received_notification.dart.lib.js.map
